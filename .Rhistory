hist(rgamma(10000, 50, 120))
hist(rgamma(10000, 30, 100))
## Going to do simple simulation with normally distributed data to see
## what the sd_est vs. sd trendline is expected to look like
hist(Fn_sd$sd_est)
hist(rgamma(10000, 20, 90))
hist(rgamma(10000, 15, 80))
## Going to do simple simulation with normally distributed data to see
## what the sd_est vs. sd trendline is expected to look like
hist(Fn_sd$sd_est)
hist(rgamma(10000, 15, 80))
## Going to do simple simulation with normally distributed data to see
## what the sd_est vs. sd trendline is expected to look like
hist(Fn_sd$sd_est)
hist(rgamma(10000, 15, 80), xlim=c(0.1, 1.0))
## Going to do simple simulation with normally distributed data to see
## what the sd_est vs. sd trendline is expected to look like
hist(Fn_sd$sd_est)
hist(rgamma(10000, 15, 80), xlim=c(0.1, 1.0))
## Going to do simple simulation with normally distributed data to see
## what the sd_est vs. sd trendline is expected to look like
hist(Fn_sd$sd_est)
## Going to do simple simulation with normally distributed data to see
## what the sd_est vs. sd trendline is expected to look like
hist(Fn_sd$sd_est, xlim=c(0.1, 1.0))
## Going to do simple simulation with normally distributed data to see
## what the sd_est vs. sd trendline is expected to look like
hist(Fn_sd$sd_est, xlim=c(0.1, 1.0))
hist(rgamma(10000, 15, 80), xlim=c(0.1, 1.0))
hist(rgamma(10000, 20, 80), xlim=c(0.1, 1.0))
## Going to do simple simulation with normally distributed data to see
## what the sd_est vs. sd trendline is expected to look like
hist(Fn_sd$sd_est, xlim=c(0.1, 1.0))
ng_sim <- 10000
sds <- rgamma(ng_sim, 20, 80)
params <- data.frame(
n = rep(2, times = ng_sim),
mean = rep(0, times = ng_sim),
sd = sds
)
sim_data <- pmap(params, rnorm)
sds_sim <- map_dbl(sim_data, sd)
sim_df <- data.frame(
sds_sim = sds_sim,
sd_est = sds
)
ggplot(sim_df, aes(x = sd_est, y = sds_sim)) +
geom_point(size = 1) +
theme_classic() +
geom_abline(slope =1, intercept = 0, color = "red") +
xlim(c(0.1, 1))
ggplot(sim_df, aes(x = sd_est, y = sds_sim)) +
geom_point(size = 1) +
theme_classic() +
geom_abline(slope =1, intercept = 0, color = "red") +
xlim(c(0.05, 1))
ggplot(Fn_sd, aes(x = sd_est, y = sd)) +
geom_point(size = 1) +
geom_abline(intercept = 0, slope = 1) +
theme_classic()
sim_df$bin_ID <- as.numeric(Hmisc::cut2(sim_df$sd_est), g = 30)
sim_bin <- sim_df %>% group_by(bin_ID) %>%
summarise(max_sd = max(sds_sim))
sim_bin
sim_bin <- sim_df %>% group_by(bin_ID) %>%
summarise(max_sd = max(sds_sim), sd_est = mean(sd_est))
sim_bin
sim_df$bin_ID <- as.numeric(Hmisc::cut2(sim_df$sd_est), g = 10)
sim_bin <- sim_df %>% group_by(bin_ID) %>%
summarise(max_sd = max(sds_sim), sd_est = mean(sd_est))
sim_bin
ng_sim <- 10000
sds <- rgamma(ng_sim, 20, 80)
params <- data.frame(
n = rep(2, times = ng_sim),
mean = rep(0, times = ng_sim),
sd = sds
)
sim_data <- pmap(params, rnorm)
sds_sim <- map_dbl(sim_data, sd)
sim_df <- data.frame(
sds_sim = sds_sim,
sd_est = sds
)
ggplot(sim_df, aes(x = sd_est, y = sds_sim)) +
geom_point(size = 1) +
theme_classic() +
geom_abline(slope =1, intercept = 0, color = "red") +
xlim(c(0.05, 1))
sim_df$bin_ID <- as.numeric(Hmisc::cut2(sim_df$sd_est), g = 10)
sim_bin <- sim_df %>% group_by(bin_ID) %>%
summarise(max_sd = max(sds_sim), sd_est = mean(sd_est))
sim_bin
max(sim_df$bin_ID)
sim_df
sim_df$bin_ID <- as.numeric(Hmisc::cut2(sim_df$sd_est, g = 10))
sim_bin <- sim_df %>% group_by(bin_ID) %>%
summarise(max_sd = max(sds_sim), sd_est = mean(sd_est))
sim_bin
## Plot maximum line overlay
ggplot(Fn_sd, aes(x = sd_est, y = sd)) +
geom_point(size = 1) +
geom_abline(intercept = 0, slope = 1) +
theme_classic() +
geom_line(data = sim_bin, mapping = aes(x = sd_est, y = max_sd), color = "green")
hist(rgamma(10000, 10, 40), xlim=c(0.1, 1.0))
hist(rgamma(10000, 7.5, 20), xlim=c(0.1, 1.0))
## Going to do simple simulation with normally distributed data to see
## what the sd_est vs. sd trendline is expected to look like
hist(Fn_sd$sd_est, xlim=c(0.1, 1.0))
hist(rgamma(10000, 7.5, 20), xlim=c(0.1, 1.0))
ng_sim <- 10000
sds <- rgamma(ng_sim, 20, 80)
params <- data.frame(
n = rep(2, times = ng_sim),
mean = rep(0, times = ng_sim),
sd = sds
)
sim_data <- pmap(params, rnorm)
sds_sim <- map_dbl(sim_data, sd)
sim_df <- data.frame(
sds_sim = sds_sim,
sd_est = sds
)
ggplot(sim_df, aes(x = sd_est, y = sds_sim)) +
geom_point(size = 1) +
theme_classic() +
geom_abline(slope =1, intercept = 0, color = "red") +
xlim(c(0.05, 1))
ng_sim <- 10000
sds <- rgamma(ng_sim, 7.5, 20)
params <- data.frame(
n = rep(2, times = ng_sim),
mean = rep(0, times = ng_sim),
sd = sds
)
sim_data <- pmap(params, rnorm)
sds_sim <- map_dbl(sim_data, sd)
sim_df <- data.frame(
sds_sim = sds_sim,
sd_est = sds
)
ggplot(sim_df, aes(x = sd_est, y = sds_sim)) +
geom_point(size = 1) +
theme_classic() +
geom_abline(slope =1, intercept = 0, color = "red") +
xlim(c(0.05, 1))
ggplot(sim_df, aes(x = sd_est, y = sds_sim)) +
geom_point(size = 1) +
theme_classic() +
geom_abline(slope =1, intercept = 0, color = "red") +
xlim(c(0.05, 1.5))
sim_df$bin_ID <- as.numeric(Hmisc::cut2(sim_df$sd_est, g = 10))
sim_bin <- sim_df %>% group_by(bin_ID) %>%
summarise(max_sd = max(sds_sim), sd_est = mean(sd_est))
sim_bin
sim_df$bin_ID <- as.numeric(Hmisc::cut2(sim_df$sd_est, g = 40))
sim_bin <- sim_df %>% group_by(bin_ID) %>%
summarise(max_sd = max(sds_sim), sd_est = mean(sd_est))
sim_bin
## Plot maximum line overlay
ggplot(Fn_sd, aes(x = sd_est, y = sd)) +
geom_point(size = 1) +
geom_abline(intercept = 0, slope = 1) +
theme_classic() +
geom_line(data = sim_bin, mapping = aes(x = sd_est, y = max_sd), color = "green")
ng_sim <- 100000
sds <- rgamma(ng_sim, 7.5, 20)
params <- data.frame(
n = rep(2, times = ng_sim),
mean = rep(0, times = ng_sim),
sd = sds
)
sim_data <- pmap(params, rnorm)
sds_sim <- map_dbl(sim_data, sd)
sim_df <- data.frame(
sds_sim = sds_sim,
sd_est = sds
)
ggplot(sim_df, aes(x = sd_est, y = sds_sim)) +
geom_point(size = 1) +
theme_classic() +
geom_abline(slope =1, intercept = 0, color = "red") +
xlim(c(0.05, 1.5))
sim_df$bin_ID <- as.numeric(Hmisc::cut2(sim_df$sd_est, g = 40))
sim_bin <- sim_df %>% group_by(bin_ID) %>%
summarise(max_sd = max(sds_sim), sd_est = mean(sd_est))
sim_bin
## Plot maximum line overlay
ggplot(Fn_sd, aes(x = sd_est, y = sd)) +
geom_point(size = 1) +
geom_abline(intercept = 0, slope = 1) +
theme_classic() +
geom_line(data = sim_bin, mapping = aes(x = sd_est, y = max_sd), color = "green")
## Let's look at the two possible outliers
Fn_sd$sd[Fn_sd$sd_est < 0.3]
## Let's look at the two possible outliers
Outlier_1 <- Fn_sd[Fn_sd$sd_est < 0.3, ]
Outlier_1 <- Outlier_1[order(Outlier_1$sd, decreasing = TRUE), ]
Outlier_1
Counts_df$XF[Counts_df$fnum == 1956]
Outlier_2 <- Fn_sd[order(Fn_sd$sd), ]
Outlier_2
Outlier_2 <- Fn_sd[order(Fn_sd$sd, decreasing = TRUE), ]
Outlier_2
Counts_df$XF[Counts_df$fnum == 9083]
Counts_df$n[Counts_df$fnum %in% outliers]
outliers <- c(1956, 9083)
Counts_df$n[Counts_df$fnum %in% outliers]
Fn_sd
Fn_sd
Fn_counts
Fn_sd <- Fn_counts %>% group_by(Gene_ID, Condition) %>%
summarise(sd = sd(logit_fn), sd_est = 0.02*(mean(logit_fn)^2) + 0.08 +0.01055 + 2.17*(1/mean(n)^(1/2)))
Fn_sd[order(Fn_sd$sd, decreasing = TRUE), ]
ggplot(Fn_sd, aes(x = sd_est, y = sd)) +
geom_point(size = 1) +
geom_abline(intercept = 0, slope = 1) +
theme_classic()
ng_sim <- 100000
sds <- rgamma(ng_sim, 7.5, 20)
params <- data.frame(
n = rep(2, times = ng_sim),
mean = rep(0, times = ng_sim),
sd = sds
)
sim_data <- pmap(params, rnorm)
sds_sim <- map_dbl(sim_data, sd)
sim_df <- data.frame(
sds_sim = sds_sim,
sd_est = sds
)
ggplot(sim_df, aes(x = sd_est, y = sds_sim)) +
geom_point(size = 1) +
theme_classic() +
geom_abline(slope =1, intercept = 0, color = "red") +
xlim(c(0.05, 2.0))
sim_df$bin_ID <- as.numeric(Hmisc::cut2(sim_df$sd_est, g = 40))
sim_bin <- sim_df %>% group_by(bin_ID) %>%
summarise(max_sd = max(sds_sim), sd_est = mean(sd_est))
sim_bin
## Plot maximum line overlay
ggplot(Fn_sd, aes(x = sd_est, y = sd)) +
geom_point(size = 1) +
geom_abline(intercept = 0, slope = 1) +
theme_classic() +
geom_line(data = sim_bin, mapping = aes(x = sd_est, y = max_sd), color = "green")
Fn_sd
Fn_sd[order(Fn_sd$sd)]
Fn_sd[order(Fn_sd$sd, decreasing = TRUE), ]
Counts_df$n[Counts_df$fnum %in% outliers]
## Let's look at the two possible outliers
Outlier_1 <- Fn_sd[Fn_sd$sd_est < 0.3, ]
Outlier_1 <- Outlier_1[order(Outlier_1$sd, decreasing = TRUE), ]
Outlier_1
Outlier_2 <- Fn_sd[order(Fn_sd$sd, decreasing = TRUE), ]
Outlier_2
ng_sim <- 10000
sds <- rgamma(ng_sim, 7.5, 20)
params <- data.frame(
n = rep(2, times = ng_sim),
mean = rep(0, times = ng_sim),
sd = sds
)
sim_data <- pmap(params, rnorm)
sds_sim <- map_dbl(sim_data, sd)
sim_df <- data.frame(
sds_sim = sds_sim,
sd_est = sds
)
ggplot(sim_df, aes(x = sd_est, y = sds_sim)) +
geom_point(size = 1) +
theme_classic() +
geom_abline(slope =1, intercept = 0, color = "red") +
xlim(c(0.05, 2.0))
sim_df$bin_ID <- as.numeric(Hmisc::cut2(sim_df$sd_est, g = 40))
sim_bin <- sim_df %>% group_by(bin_ID) %>%
summarise(max_sd = max(sds_sim), sd_est = mean(sd_est))
sim_bin
## Plot maximum line overlay
ggplot(Fn_sd, aes(x = sd_est, y = sd)) +
geom_point(size = 1) +
geom_abline(intercept = 0, slope = 1) +
theme_classic() +
geom_line(data = sim_bin, mapping = aes(x = sd_est, y = max_sd), color = "green")
## Let's look at the two possible outliers
Outlier_1 <- Fn_sd[Fn_sd$sd_est < 0.3, ]
sim_df$bin_ID <- as.numeric(Hmisc::cut2(sim_df$sd_est, g = 30))
sim_bin <- sim_df %>% group_by(bin_ID) %>%
summarise(max_sd = max(sds_sim), sd_est = mean(sd_est))
sim_bin
## Plot maximum line overlay
ggplot(Fn_sd, aes(x = sd_est, y = sd)) +
geom_point(size = 1) +
geom_abline(intercept = 0, slope = 1) +
theme_classic() +
geom_line(data = sim_bin, mapping = aes(x = sd_est, y = max_sd), color = "green")
fast_list$Regularized_ests$avg_logit_fn[fast_list$Regularized_ests$Gene_ID %in% outliers]
Fn_sd
Fn_sd[Fn_sd$Gene_ID %in% outliers]
Fn_sd[Fn_sd$Gene_ID %in% outliers, ]
fast_list$Regularized_ests$avg_logit_fn[fast_list$Regularized_ests$Gene_ID %in% outliers]
fast_list$Regularized_ests[fast_list$Regularized_ests$Gene_ID %in% outliers]
fast_list$Regularized_ests[fast_list$Regularized_ests$Gene_ID %in% outliers,]
hist(fast_list$Regularized_ests$sd_post)
hist(Fn_sd$sd)
hist(fast_list$Regularized_ests$sd_post)
hist(Fn_sd$sd)
hist(fast_list$Regularized_ests$sd_post, xlim = c(0, 1.5))
hist(Fn_sd$sd, xlim = c(0, 1.5))
hist(fast_list$Regularized_ests$sd_post, xlim = c(0, 1.5))
hist(Fn_sd$sd, xlim = c(0, 1.5))
hist(fast_list$Regularized_ests$sd_post, xlim = c(0, 1.5))
plot(density(fast_list$Regularized_ests$sd_post), xlim = c(0, 1.5))
lines(density(Fn_sd$sd), xlim = c(0, 1.5))
plot(density(fast_list$Regularized_ests$sd_post), xlim = c(0, 1.5), color = "blue")
plot(density(fast_list$Regularized_ests$sd_post), xlim = c(0, 1.5), col = "blue")
lines(density(Fn_sd$sd), xlim = c(0, 1.5), col = "red")
fast_list$Regularized_ests[fast_list$Regularized_ests$Gene_ID %in% outliers,]
## Plot maximum line overlay
ggplot(Fn_sd, aes(x = sd_est, y = sd)) +
geom_point(size = 1) +
geom_abline(intercept = 0, slope = 1) +
theme_classic() +
geom_line(data = sim_bin, mapping = aes(x = sd_est, y = max_sd), color = "green")
sim_df$bin_ID <- as.numeric(Hmisc::cut2(sim_df$sd_est, g = 20))
sim_bin <- sim_df %>% group_by(bin_ID) %>%
summarise(max_sd = max(sds_sim), sd_est = mean(sd_est))
sim_bin
## Plot maximum line overlay
ggplot(Fn_sd, aes(x = sd_est, y = sd)) +
geom_point(size = 1) +
geom_abline(intercept = 0, slope = 1) +
theme_classic() +
geom_line(data = sim_bin, mapping = aes(x = sd_est, y = max_sd), color = "green")
fast_list$Regularized_ests[fast_list$Regularized_ests$Gene_ID %in% outliers,]
fast_list$Fn_Estimates[fast_list$Fn_Estimates$Gene_ID %in% outliers,]
ng_sim <- 10000
params <- data.frame(
n = rep(1000, times = ng_sim),
lambda = seq(from = 10, to = 10000, length.out = ng_sim),
sd = sds
)
params <- data.frame(
n = rep(1000, times = ng_sim),
lambda = seq(from = 10, to = 10000, length.out = ng_sim)
)
sim_data <- pmap(params, rpois)
lambda <- 1000
lambda <- 1000
fn_grid <- seq(from = 0.05, to = 0.95, length.out = ng_sim)
params_new <- data.frame(
n = rep(1000, times = ng_sim),
lambda = fn_grid*lambda
)
params_old <- data.frame(
n = rep(1000, times = ng_sim),
lambda = (1-fn_grid)*lambda
)
sim_data_new <- pmap(params, rpois)
sim_data_new <- pmap(params_new, rpois)
sim_data_old <- pmap(params_old, rpois)
sim_data_new <- pmap_dbl(params_new, rpois)
params_new
sim_data_new[[1]]
sim_data_new/sim_data_old
params <- data.frame(
n = rep(1000, times = ng_sim),
lambda = rep(lambda, times = ng_sim),
fn = fn_grid
)
fn_sim <- function(n, lambda, fn){
new_reads <- rpois(n, lambda*fn)
old_reads <- rpois(n, lambda*(1-fn))
fn <- new_reads/(new_reads + old_reads)
}
fn_sim <- function(n, lambda, fn){
new_reads <- rpois(n, lambda*fn)
old_reads <- rpois(n, lambda*(1-fn))
fn <- new_reads/(new_reads + old_reads)
return(fn)
}
sim_fn <- pmap(params,  fn_sim)
sim_fn
fn_sim <- function(n, lambda, fn){
new_reads <- rpois(n, lambda*fn)
old_reads <- rpois(n, lambda*(1-fn))
fn <- new_reads/(new_reads + old_reads)
return(pracma::logit(fn))
}
sim_fn <- pmap(params,  fn_sim)
sds_fn <- map_dbl(sim_fn, sd)
sds_fn
heterosked_df <- data.frame(sds_fn, pracma::logit(fn_grid))
colnames(heterosked_df) <- c("sds_fn", "logit_fn")
ggplot(heterosked_df, aes(x = logit_fn, y = sd_fn)) +
geom_point(size = 1) +
theme_classic()
ggplot(heterosked_df, aes(x = logit_fn, y = sds_fn)) +
geom_point(size = 1) +
theme_classic()
size <- 50
params <- data.frame(
n = rep(1000, times = ng_sim),
mu = rep(lambda, times = ng_sim),
fn = fn_grid,
size = rep(size, times = ng_sim)
)
fn_sim_NB <- function(n, mu, fn, size){
new_reads <- rnbinom(n, mu = mu*fn, size = size)
old_reads <- rnbinom(n, mu = mu*(1-fn), size = size)
fn <- new_reads/(new_reads + old_reads)
return(pracma::logit(fn))
}
sim_fn <- pmap(params,  fn_sim_NB)
sds_fn <- map_dbl(sim_fn, sd)
heterosked_df <- data.frame(sds_fn, pracma::logit(fn_grid))
colnames(heterosked_df) <- c("sds_fn", "logit_fn")
ggplot(heterosked_df, aes(x = logit_fn, y = sds_fn)) +
geom_point(size = 1) +
theme_classic()
ggplot(heterosked_df, aes(x = logit_fn, y = sds_fn)) +
geom_point(size = 1) +
theme_classic() +
xlim(0, 0.5)
ggplot(heterosked_df, aes(x = logit_fn, y = sds_fn)) +
geom_point(size = 1) +
theme_classic() +
ylim(0, 0.5)
ng_sim <- 10000
lambda <- 1000
fn_grid <- seq(from = 0.05, to = 0.95, length.out = ng_sim)
params <- data.frame(
n = rep(1000, times = ng_sim),
lambda = rep(lambda, times = ng_sim),
fn = fn_grid
)
fn_sim <- function(n, lambda, fn){
new_reads <- rpois(n, lambda*fn)
old_reads <- rpois(n, lambda*(1-fn))
fn <- new_reads/(new_reads + old_reads)
return(pracma::logit(fn))
}
sim_fn <- pmap(params,  fn_sim)
sds_fn <- map_dbl(sim_fn, sd)
sds_fn
heterosked_df <- data.frame(sds_fn, pracma::logit(fn_grid))
colnames(heterosked_df) <- c("sds_fn", "logit_fn")
ggplot(heterosked_df, aes(x = logit_fn, y = sds_fn)) +
geom_point(size = 1) +
theme_classic() +
ylim(0, 0.5)
ggplot(heterosked_df, aes(x = logit_fn, y = sds_fn)) +
geom_point(size = 1) +
theme_classic() +
ylim(0, 0.3)
ng_sim <- 10000
mu <- 1000
size <- 50
fn_grid <- seq(from = 0.05, to = 0.95, length.out = ng_sim)
params_NB <- data.frame(
n = rep(1000, times = ng_sim),
mu = rep(lambda, times = ng_sim),
fn = fn_grid,
size = rep(size, times = ng_sim)
)
fn_sim_NB <- function(n, mu, fn, size){
new_reads <- rnbinom(n, mu = mu*fn, size = size)
old_reads <- rnbinom(n, mu = mu*(1-fn), size = size)
fn <- new_reads/(new_reads + old_reads)
return(pracma::logit(fn))
}
sim_fn_NB <- pmap(params_NB,  fn_sim_NB)
sds_fn_NB <- map_dbl(sim_fn_NB, sd)
heterosked_df_NB <- data.frame(sds_fn_NB, pracma::logit(fn_grid))
colnames(heterosked_df_NB) <- c("sds_fn", "logit_fn")
ggplot(heterosked_df_NB, aes(x = logit_fn, y = sds_fn)) +
geom_point(size = 1) +
theme_classic() +
ylim(0, 0.3)
ng_sim <- 10000
mu <- 1000
size <- 10
fn_grid <- seq(from = 0.05, to = 0.95, length.out = ng_sim)
params_NB <- data.frame(
n = rep(1000, times = ng_sim),
mu = rep(lambda, times = ng_sim),
fn = fn_grid,
size = rep(size, times = ng_sim)
)
fn_sim_NB <- function(n, mu, fn, size){
new_reads <- rnbinom(n, mu = mu*fn, size = size)
old_reads <- rnbinom(n, mu = mu*(1-fn), size = size)
fn <- new_reads/(new_reads + old_reads)
return(pracma::logit(fn))
}
sim_fn_NB <- pmap(params_NB,  fn_sim_NB)
sds_fn_NB <- map_dbl(sim_fn_NB, sd)
heterosked_df_NB <- data.frame(sds_fn_NB, pracma::logit(fn_grid))
colnames(heterosked_df_NB) <- c("sds_fn", "logit_fn")
ggplot(heterosked_df_NB, aes(x = logit_fn, y = sds_fn)) +
geom_point(size = 1) +
theme_classic() +
ylim(0, 0.3)
ggplot(heterosked_df_NB, aes(x = logit_fn, y = sds_fn)) +
geom_point(size = 1) +
theme_classic() +
ylim(0, 1)
ggplot(heterosked_df_NB, aes(x = logit_fn, y = sds_fn)) +
geom_point(size = 1) +
theme_classic() +
ylim(0, 0.75)
