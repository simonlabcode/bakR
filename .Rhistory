fn_post_df <- fast_list$Regularized_ests
fn_post_df
fn_post_df <- merge(fn_post_df, Map_fnumtoGene, by="Gene_ID")
fn_post_df <- fn_post_df[order(fn_post_df$Sim_Gene, fn_post_df$Condition), ]
# Define helper functions:
logit <- function(x) log(x/(1-x))
inv_logit <- function(x) exp(x)/(1+exp(x))
fn_post_est <- inv_logit(fn_post_df$logit_fn_post)
fn_unreg_est <- inv_logit(fn_post_df$avg_logit_fn)
avg_fn_sim_vector <- rep(0, times= length(fn_post_est))
ngene <- dim(fn_sim)[1]
nconds <- dim(fn_sim)[2]
count <- 1
for(i in 1:ngene){
if(i %in% effects_1$Gene)
for(j in 1:nconds){
avg_fn_sim_vector[count] <- mean(fn_sim[i,j,])
count <- count + 1
}
}
plot(fn_unreg_est, avg_fn_sim_vector)
abline(coef = c(0, 1))
hist(rbinom(n = 1000, size = 25, prob = 0.1)/25)
devtools::load_all()
setwd("C:/Users/isaac/Documents/Simon_Lab/MyfirstPaper/Data/Simulated_dfs/")
fast_list <- fast_analysis(df_fast, read_cut = 30)
# Look at number of transcripts making it through filtering
ngenes_filter <- max(df_fast$fnum)
ngenes_filter
# Number significant in each condition
nsig <- c(10, 25, 50, 75, 100, 150, 200, 500, 1000)
# Extract effect sizes
effects_1 <- fast_list$Effects_df
# Map fnum to Gene num
Map_fnumtoGene <- df_fast %>%
select(XF, fnum) %>%
distinct()
colnames(Map_fnumtoGene) <- c("Gene", "Genes_effects")
# Add Gene nume to effects_df
effects_1 <- merge(effects_1, Map_fnumtoGene, by="Genes_effects")
# Add significance at an lfdr threshold
FDR <- 0.05
effects_1 <- effects_1 %>%
mutate(significance = ifelse(lfdr < 0.05, 1, 0))
effects_1$Gene <- as.numeric(effects_1$Gene)
ngenes_sim <- 5000
FDR_summary_1 <- effects_1 %>% group_by(Condition_effects) %>%
summarise(FDs = sum((significance == 1) & (Gene < (ngenes_sim - nsig[Condition_effects-1]))), Ds = sum(significance))
FDR_summary_1$FDR <- FDR_summary_1$FDs/FDR_summary_1$Ds
Power_summary_1 <- effects_1 %>% group_by(Condition_effects) %>%
summarise(TPs = sum((significance == 1) & (Gene >= (ngenes_sim - nsig[Condition_effects-1]))))
FDR_summary_1
Power_summary_1$Power <- Power_summary_1$TPs/nsig
Power_summary_1
Results_1 <- cbind(FDR_summary_1, Power_summary_1)
## Extract estimated fraction news
fn_est_df <- fast_list$Fn_Estimates
colnames(Map_fnumtoGene) <- c("Sim_Gene", "Gene_ID")
Map_fnumtoGene$Sim_Gene <- as.numeric(Map_fnumtoGene$Sim_Gene)
fn_est_df <- merge(fn_est_df, Map_fnumtoGene, by="Gene_ID")
fn_est_df <- fn_est_df[order(fn_est_df$Sim_Gene, fn_est_df$Condition, fn_est_df$Replicate), ]
fn_est <- fn_est_df$fn_estimate
## Extract simulated fraction news
fn_sim <- sim_df_1$fn_s4U
fn_sim_vector <- rep(0, times= length(fn_est))
ngene <- dim(fn_sim)[1]
nconds <- dim(fn_sim)[2]
nreps <- dim(fn_sim)[3]
count <- 1
for(i in 1:ngene){
if(i %in% effects_1$Gene)
for(j in 1:nconds){
for(k in 1:nreps){
fn_sim_vector[count] <- fn_sim[i, j, k]
count <- count + 1
}
}
}
plot(fn_est, fn_sim_vector)
abline(coef = c(0, 1))
fn_post_df <- fast_list$Regularized_ests
fn_post_df
fn_post_df <- merge(fn_post_df, Map_fnumtoGene, by="Gene_ID")
fn_post_df <- fn_post_df[order(fn_post_df$Sim_Gene, fn_post_df$Condition), ]
# Define helper functions:
logit <- function(x) log(x/(1-x))
inv_logit <- function(x) exp(x)/(1+exp(x))
fn_post_est <- inv_logit(fn_post_df$logit_fn_post)
fn_unreg_est <- inv_logit(fn_post_df$avg_logit_fn)
avg_fn_sim_vector <- rep(0, times= length(fn_post_est))
ngene <- dim(fn_sim)[1]
nconds <- dim(fn_sim)[2]
count <- 1
for(i in 1:ngene){
if(i %in% effects_1$Gene)
for(j in 1:nconds){
avg_fn_sim_vector[count] <- mean(fn_sim[i,j,])
count <- count + 1
}
}
plot(fn_unreg_est, avg_fn_sim_vector)
abline(coef = c(0, 1))
devtools::load_all()
devtools::load_all()
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
fast_list <- fast_analysis(df_fast, read_cut = 30)
# Look at number of transcripts making it through filtering
ngenes_filter <- max(df_fast$fnum)
ngenes_filter
# Number significant in each condition
nsig <- c(10, 25, 50, 75, 100, 150, 200, 500, 1000)
# Extract effect sizes
effects_1 <- fast_list$Effects_df
# Map fnum to Gene num
Map_fnumtoGene <- df_fast %>%
select(XF, fnum) %>%
distinct()
colnames(Map_fnumtoGene) <- c("Gene", "Genes_effects")
# Add Gene nume to effects_df
effects_1 <- merge(effects_1, Map_fnumtoGene, by="Genes_effects")
# Add significance at an lfdr threshold
FDR <- 0.05
effects_1 <- effects_1 %>%
mutate(significance = ifelse(lfdr < 0.05, 1, 0))
effects_1$Gene <- as.numeric(effects_1$Gene)
ngenes_sim <- 5000
FDR_summary_1 <- effects_1 %>% group_by(Condition_effects) %>%
summarise(FDs = sum((significance == 1) & (Gene < (ngenes_sim - nsig[Condition_effects-1]))), Ds = sum(significance))
FDR_summary_1$FDR <- FDR_summary_1$FDs/FDR_summary_1$Ds
Power_summary_1 <- effects_1 %>% group_by(Condition_effects) %>%
summarise(TPs = sum((significance == 1) & (Gene >= (ngenes_sim - nsig[Condition_effects-1]))))
FDR_summary_1
Power_summary_1$Power <- Power_summary_1$TPs/nsig
Power_summary_1
Results_1 <- cbind(FDR_summary_1, Power_summary_1)
## Extract estimated fraction news
fn_est_df <- fast_list$Fn_Estimates
colnames(Map_fnumtoGene) <- c("Sim_Gene", "Gene_ID")
Map_fnumtoGene$Sim_Gene <- as.numeric(Map_fnumtoGene$Sim_Gene)
fn_est_df <- merge(fn_est_df, Map_fnumtoGene, by="Gene_ID")
fn_est_df <- fn_est_df[order(fn_est_df$Sim_Gene, fn_est_df$Condition, fn_est_df$Replicate), ]
fn_est <- fn_est_df$fn_estimate
## Extract simulated fraction news
fn_sim <- sim_df_1$fn_s4U
fn_sim_vector <- rep(0, times= length(fn_est))
ngene <- dim(fn_sim)[1]
nconds <- dim(fn_sim)[2]
nreps <- dim(fn_sim)[3]
count <- 1
for(i in 1:ngene){
if(i %in% effects_1$Gene)
for(j in 1:nconds){
for(k in 1:nreps){
fn_sim_vector[count] <- fn_sim[i, j, k]
count <- count + 1
}
}
}
plot(fn_est, fn_sim_vector)
abline(coef = c(0, 1))
fn_post_df <- fast_list$Regularized_ests
fn_post_df
fn_post_df <- merge(fn_post_df, Map_fnumtoGene, by="Gene_ID")
fn_post_df <- fn_post_df[order(fn_post_df$Sim_Gene, fn_post_df$Condition), ]
# Define helper functions:
logit <- function(x) log(x/(1-x))
inv_logit <- function(x) exp(x)/(1+exp(x))
fn_post_est <- inv_logit(fn_post_df$logit_fn_post)
fn_unreg_est <- inv_logit(fn_post_df$avg_logit_fn)
avg_fn_sim_vector <- rep(0, times= length(fn_post_est))
ngene <- dim(fn_sim)[1]
nconds <- dim(fn_sim)[2]
count <- 1
for(i in 1:ngene){
if(i %in% effects_1$Gene)
for(j in 1:nconds){
avg_fn_sim_vector[count] <- mean(fn_sim[i,j,])
count <- count + 1
}
}
plot(fn_unreg_est, avg_fn_sim_vector)
abline(coef = c(0, 1))
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
fast_list <- fast_analysis(df_fast, read_cut = 30)
# Look at number of transcripts making it through filtering
ngenes_filter <- max(df_fast$fnum)
ngenes_filter
# Number significant in each condition
nsig <- c(10, 25, 50, 75, 100, 150, 200, 500, 1000)
# Extract effect sizes
effects_1 <- fast_list$Effects_df
# Map fnum to Gene num
Map_fnumtoGene <- df_fast %>%
select(XF, fnum) %>%
distinct()
colnames(Map_fnumtoGene) <- c("Gene", "Genes_effects")
# Add Gene nume to effects_df
effects_1 <- merge(effects_1, Map_fnumtoGene, by="Genes_effects")
# Add significance at an lfdr threshold
FDR <- 0.05
effects_1 <- effects_1 %>%
mutate(significance = ifelse(lfdr < 0.05, 1, 0))
effects_1$Gene <- as.numeric(effects_1$Gene)
ngenes_sim <- 5000
FDR_summary_1 <- effects_1 %>% group_by(Condition_effects) %>%
summarise(FDs = sum((significance == 1) & (Gene < (ngenes_sim - nsig[Condition_effects-1]))), Ds = sum(significance))
FDR_summary_1$FDR <- FDR_summary_1$FDs/FDR_summary_1$Ds
Power_summary_1 <- effects_1 %>% group_by(Condition_effects) %>%
summarise(TPs = sum((significance == 1) & (Gene >= (ngenes_sim - nsig[Condition_effects-1]))))
FDR_summary_1
Power_summary_1$Power <- Power_summary_1$TPs/nsig
Power_summary_1
Results_1 <- cbind(FDR_summary_1, Power_summary_1)
## Extract estimated fraction news
fn_est_df <- fast_list$Fn_Estimates
colnames(Map_fnumtoGene) <- c("Sim_Gene", "Gene_ID")
Map_fnumtoGene$Sim_Gene <- as.numeric(Map_fnumtoGene$Sim_Gene)
fn_est_df <- merge(fn_est_df, Map_fnumtoGene, by="Gene_ID")
fn_est_df <- fn_est_df[order(fn_est_df$Sim_Gene, fn_est_df$Condition, fn_est_df$Replicate), ]
fn_est <- fn_est_df$fn_estimate
## Extract simulated fraction news
fn_sim <- sim_df_1$fn_s4U
fn_sim_vector <- rep(0, times= length(fn_est))
ngene <- dim(fn_sim)[1]
nconds <- dim(fn_sim)[2]
nreps <- dim(fn_sim)[3]
count <- 1
for(i in 1:ngene){
if(i %in% effects_1$Gene)
for(j in 1:nconds){
for(k in 1:nreps){
fn_sim_vector[count] <- fn_sim[i, j, k]
count <- count + 1
}
}
}
plot(fn_est, fn_sim_vector)
abline(coef = c(0, 1))
fn_post_df <- fast_list$Regularized_ests
fn_post_df
# Define helper functions:
logit <- function(x) log(x/(1-x))
inv_logit <- function(x) exp(x)/(1+exp(x))
fn_post_df <- fast_list$Regularized_ests
fn_post_df
fn_post_df <- merge(fn_post_df, Map_fnumtoGene, by="Gene_ID")
fn_post_df <- fn_post_df[order(fn_post_df$Sim_Gene, fn_post_df$Condition), ]
# Define helper functions:
logit <- function(x) log(x/(1-x))
inv_logit <- function(x) exp(x)/(1+exp(x))
fn_post_est <- inv_logit(fn_post_df$logit_fn_post)
fn_unreg_est <- inv_logit(fn_post_df$avg_logit_fn)
avg_fn_sim_vector <- rep(0, times= length(fn_post_est))
ngene <- dim(fn_sim)[1]
nconds <- dim(fn_sim)[2]
count <- 1
for(i in 1:ngene){
if(i %in% effects_1$Gene)
for(j in 1:nconds){
avg_fn_sim_vector[count] <- mean(fn_sim[i,j,])
count <- count + 1
}
}
plot(fn_unreg_est, avg_fn_sim_vector)
abline(coef = c(0, 1))
plot(fn_post_est, avg_fn_sim_vector)
abline(coef = c(0, 1))
plot(fn_unreg_est, fn_post_est)
abline(coef = c(0, 1))
setwd("C:/Users/isaac/Documents/Simon_Lab/MyfirstPaper/Data/Simulated_dfs/Controls/")
# Load effect sizes
sim_effects <- readRDS("effect_sizes_rep_var_0.05_300_genes_2_conds_s4U_0.05.rds")
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
fast_list <- fast_analysis(df_fast, read_cut = 30)
# Look at number of transcripts making it through filtering
ngenes_filter <- max(df_fast$fnum)
ngenes_filter
# Number significant in each condition
nsig <- c(10, 25, 50, 75, 100, 150, 200, 500, 1000)
# Extract effect sizes
effects_1 <- fast_list$Effects_df
# Map fnum to Gene num
Map_fnumtoGene <- df_fast %>%
select(XF, fnum) %>%
distinct()
colnames(Map_fnumtoGene) <- c("Gene", "Genes_effects")
# Add Gene nume to effects_df
effects_1 <- merge(effects_1, Map_fnumtoGene, by="Genes_effects")
# Add significance at an lfdr threshold
FDR <- 0.05
effects_1 <- effects_1 %>%
mutate(significance = ifelse(lfdr < 0.05, 1, 0))
effects_1$Gene <- as.numeric(effects_1$Gene)
ngenes_sim <- 5000
FDR_summary_1 <- effects_1 %>% group_by(Condition_effects) %>%
summarise(FDs = sum((significance == 1) & (Gene < (ngenes_sim - nsig[Condition_effects-1]))), Ds = sum(significance))
FDR_summary_1$FDR <- FDR_summary_1$FDs/FDR_summary_1$Ds
Power_summary_1 <- effects_1 %>% group_by(Condition_effects) %>%
summarise(TPs = sum((significance == 1) & (Gene >= (ngenes_sim - nsig[Condition_effects-1]))))
FDR_summary_1
Power_summary_1$Power <- Power_summary_1$TPs/nsig
Power_summary_1
Results_1 <- cbind(FDR_summary_1, Power_summary_1)
## Extract estimated fraction news
fn_est_df <- fast_list$Fn_Estimates
colnames(Map_fnumtoGene) <- c("Sim_Gene", "Gene_ID")
Map_fnumtoGene$Sim_Gene <- as.numeric(Map_fnumtoGene$Sim_Gene)
fn_est_df <- merge(fn_est_df, Map_fnumtoGene, by="Gene_ID")
fn_est_df <- fn_est_df[order(fn_est_df$Sim_Gene, fn_est_df$Condition, fn_est_df$Replicate), ]
fn_est <- fn_est_df$fn_estimate
## Extract simulated fraction news
fn_sim <- sim_df_1$fn_s4U
fn_sim_vector <- rep(0, times= length(fn_est))
ngene <- dim(fn_sim)[1]
nconds <- dim(fn_sim)[2]
nreps <- dim(fn_sim)[3]
count <- 1
for(i in 1:ngene){
if(i %in% effects_1$Gene)
for(j in 1:nconds){
for(k in 1:nreps){
fn_sim_vector[count] <- fn_sim[i, j, k]
count <- count + 1
}
}
}
plot(fn_est, fn_sim_vector)
abline(coef = c(0, 1))
fn_post_df <- fast_list$Regularized_ests
fn_post_df
fn_post_df <- merge(fn_post_df, Map_fnumtoGene, by="Gene_ID")
fn_post_df <- fn_post_df[order(fn_post_df$Sim_Gene, fn_post_df$Condition), ]
# Define helper functions:
logit <- function(x) log(x/(1-x))
inv_logit <- function(x) exp(x)/(1+exp(x))
fn_post_est <- inv_logit(fn_post_df$logit_fn_post)
fn_unreg_est <- inv_logit(fn_post_df$avg_logit_fn)
avg_fn_sim_vector <- rep(0, times= length(fn_post_est))
ngene <- dim(fn_sim)[1]
nconds <- dim(fn_sim)[2]
count <- 1
for(i in 1:ngene){
if(i %in% effects_1$Gene)
for(j in 1:nconds){
avg_fn_sim_vector[count] <- mean(fn_sim[i,j,])
count <- count + 1
}
}
plot(fn_unreg_est, avg_fn_sim_vector)
abline(coef = c(0, 1))
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
fast_list <- fast_analysis(df_fast, read_cut = 30)
fast_list <- fast_analysis(df_fast, read_cut = 30)
devtools::load_all()
fast_list <- fast_analysis(df_fast, read_cut = 30)
devtools::load_all()
fast_list <- fast_analysis(df_fast, read_cut = 30)
devtools::load_all()
fast_list <- fast_analysis(df_fast, read_cut = 30)
devtools::load_all()
fast_list <- fast_analysis(df_fast, read_cut = 30)
fast_list$avg_df_fn
a_hyper <- 4
b_hyper <- 0.5
nreps <- 3
avg_df_fn_bayes <- avg_df_fn %>% dplyr::group_by(Gene_ID, Condition) %>%
mutate(sd_post = sqrt((a_hyper*b_hyper + nreps*sd_logit_fn)/(a_hyper + nreps - 2))) %>%
mutate(logit_fn_post = (avg_logit_fn*(nreps*(1/(sd_post^2))))/(nreps/(sd_post^2) + (1/sdp^2)) + (theta_o*(1/sdp^2))/(nreps/(sd_post^2) + (1/sdp^2)))
avg_df_fn_bayes <- fast_list$avg_df_fn %>% dplyr::group_by(Gene_ID, Condition) %>%
mutate(sd_post = sqrt((a_hyper*b_hyper + nreps*sd_logit_fn)/(a_hyper + nreps - 2))) %>%
mutate(logit_fn_post = (avg_logit_fn*(nreps*(1/(sd_post^2))))/(nreps/(sd_post^2) + (1/sdp^2)) + (theta_o*(1/sdp^2))/(nreps/(sd_post^2) + (1/sdp^2)))
devtools::load_all()
fast_list <- fast_analysis(df_fast, read_cut = 30)
# Look at number of transcripts making it through filtering
ngenes_filter <- max(df_fast$fnum)
ngenes_filter
# Number significant in each condition
nsig <- c(10, 25, 50, 75, 100, 150, 200, 500, 1000)
# Extract effect sizes
effects_1 <- fast_list$Effects_df
# Map fnum to Gene num
Map_fnumtoGene <- df_fast %>%
select(XF, fnum) %>%
distinct()
colnames(Map_fnumtoGene) <- c("Gene", "Genes_effects")
# Add Gene nume to effects_df
effects_1 <- merge(effects_1, Map_fnumtoGene, by="Genes_effects")
# Add significance at an lfdr threshold
FDR <- 0.05
effects_1 <- effects_1 %>%
mutate(significance = ifelse(lfdr < 0.05, 1, 0))
effects_1$Gene <- as.numeric(effects_1$Gene)
ngenes_sim <- 5000
FDR_summary_1 <- effects_1 %>% group_by(Condition_effects) %>%
summarise(FDs = sum((significance == 1) & (Gene < (ngenes_sim - nsig[Condition_effects-1]))), Ds = sum(significance))
FDR_summary_1$FDR <- FDR_summary_1$FDs/FDR_summary_1$Ds
Power_summary_1 <- effects_1 %>% group_by(Condition_effects) %>%
summarise(TPs = sum((significance == 1) & (Gene >= (ngenes_sim - nsig[Condition_effects-1]))))
FDR_summary_1
Power_summary_1$Power <- Power_summary_1$TPs/nsig
Power_summary_1
Results_1 <- cbind(FDR_summary_1, Power_summary_1)
## Extract estimated fraction news
fn_est_df <- fast_list$Fn_Estimates
colnames(Map_fnumtoGene) <- c("Sim_Gene", "Gene_ID")
Map_fnumtoGene$Sim_Gene <- as.numeric(Map_fnumtoGene$Sim_Gene)
fn_est_df <- merge(fn_est_df, Map_fnumtoGene, by="Gene_ID")
fn_est_df <- fn_est_df[order(fn_est_df$Sim_Gene, fn_est_df$Condition, fn_est_df$Replicate), ]
fn_est <- fn_est_df$fn_estimate
## Extract simulated fraction news
fn_sim <- sim_df_1$fn_s4U
fn_sim_vector <- rep(0, times= length(fn_est))
ngene <- dim(fn_sim)[1]
nconds <- dim(fn_sim)[2]
nreps <- dim(fn_sim)[3]
count <- 1
for(i in 1:ngene){
if(i %in% effects_1$Gene)
for(j in 1:nconds){
for(k in 1:nreps){
fn_sim_vector[count] <- fn_sim[i, j, k]
count <- count + 1
}
}
}
plot(fn_est, fn_sim_vector)
abline(coef = c(0, 1))
fn_post_df <- fast_list$Regularized_ests
fn_post_df
fn_post_df <- merge(fn_post_df, Map_fnumtoGene, by="Gene_ID")
fn_post_df <- fn_post_df[order(fn_post_df$Sim_Gene, fn_post_df$Condition), ]
# Define helper functions:
logit <- function(x) log(x/(1-x))
inv_logit <- function(x) exp(x)/(1+exp(x))
fn_post_est <- inv_logit(fn_post_df$logit_fn_post)
fn_unreg_est <- inv_logit(fn_post_df$avg_logit_fn)
avg_fn_sim_vector <- rep(0, times= length(fn_post_est))
ngene <- dim(fn_sim)[1]
nconds <- dim(fn_sim)[2]
count <- 1
for(i in 1:ngene){
if(i %in% effects_1$Gene)
for(j in 1:nconds){
avg_fn_sim_vector[count] <- mean(fn_sim[i,j,])
count <- count + 1
}
}
plot(fn_unreg_est, avg_fn_sim_vector)
abline(coef = c(0, 1))
plot(fn_post_est, avg_fn_sim_vector)
abline(coef = c(0, 1))
plot(fn_unreg_est, fn_post_est)
abline(coef = c(0, 1))
dbinom(x = 2, size = 25, prob = 0.001)
dbinom(x = 2, size = 25, prob = 0.002)
library(devtools)
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
library(devtools)
library(tidyverse)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
setwd("C:/Users/isaac/Documents/Simon_Lab/MyfirstPaper/Data/Simulated_dfs/")
sim_df_1 <- readRDS("Controls/effect_size_4.0_rep_var_0.05_1000_genes.rds")
# Extract simulated cB and summarise data
cB_sim_1 <- sim_df_1$sample_data
cB_sim_1 <- cB_sim_1 %>% group_by(S, TP, R, MIR, TC, MT, num_us) %>%
tally()
rm(sim_df_1)
cB_sim_1 <- cB_sim_1[(cB_sim_1$MIR < 50) & (MT < 3), ]
cB_sim_1 <- cB_sim_1[(cB_sim_1$MIR < 50) & (cB_sim_1$MT < 3), ]
cB_sim_1
# Define XF column
cB_sim_1$XF <- as.character(cB_sim_1$MIR)
samp_list <- unique(cB_sim_1$S)
type_list <- rep(0, times=length(samp_list))
mut_list <- rep(0, times = length(samp_list))
rep_list <- rep(0, times = length(samp_list))
tl <- 1
count <- 1
for(i in samp_list){
type_list[count] <- unique(cB_sim_1$TP[cB_sim_1$S == i])
rep_list[count] <- unique(cB_sim_1$R[cB_sim_1$S == i])
mut_list[count] <- unique(cB_sim_1$MT[cB_sim_1$S == i])
count <- count + 1
}
keep_params <- c(0.2, 50)
colnames(cB_sim_1) <- c("sample", "TP", "R", "MIR", "TC", "MT", "nT", "n", "XF")
?cBprocess
data_list <- cBprocess(cB_sim_1,
samp_list,
type_list,
mut_list,
rep_list,
tl,
keep_input = keep_params)
data_list
Stan_test <- TL_stan(data_list)
# Load stan
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
Stan_test <- TL_stan(data_list)
Stan_test <- TL_stan(data_list)
data_list$NF
