?plotMA
devtools::document()
?plotMA
devtools::load_all()
plotMA(Fit, Model = "Hybrid")
plotMA(Fit, Model = "MLE")
?optim
sqrt(2/3)
4800*(1-sqrt(2/3))
(4800*(1-sqrt(2/3)))/150
4000/1.25
library(devtools)
library(tidyverse)
library(rstan)
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
set.seed(123)
sim_list <- sim_bakRData(400, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$bakRData
Fit <- bakRFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 5)
cutoff <- 0.3
effs <- Fit$Fast_Fit$Effects_df$effect
ses <- Fit$Fast_Fit$Effects_df$se
tstats <- effs/ses
delta <- cutoff/ses*sign(effs)
pvals <- pnorm(tstats + delta, lower.tail = FALSE) + pnorm(tstat - delta, lower.tail = FALSE )
pvals <- pnorm(tstats + delta, lower.tail = FALSE) + pnorm(tstats - delta, lower.tail = FALSE )
pvals
hist(pvals)
cutoff <- 0
effs <- Fit$Fast_Fit$Effects_df$effect
ses <- Fit$Fast_Fit$Effects_df$se
tstats <- effs/ses
delta <- cutoff/ses*sign(effs)
pvals <- pnorm(tstats + delta, lower.tail = FALSE) + pnorm(tstats - delta, lower.tail = FALSE )
hist(pvals)
hist(pvals)
pvals <- (pnorm(tstats + delta, lower.tail = FALSE) + pnorm(tstats - delta, lower.tail = FALSE ))/2
hist(pvals)
hist(Fit$Fast_Fit$Effects_df$pval)
hist(pvals)
hist(Fit$Fast_Fit$Effects_df$pval)
hist(pvals)
hist(Fit$Fast_Fit$Effects_df$pval)
newstat <- sign(effs)*pmax( (abs(effs) - cutoff)/ses, 0)
cutoff <- 0
effs <- Fit$Fast_Fit$Effects_df$effect
ses <- Fit$Fast_Fit$Effects_df$se
newstat <- sign(effs)*pmax( (abs(effs) - cutoff)/ses, 0)
newpvals <- pmin(1, 2*pnorm( (abs(effs) - cutoff)/ses, lower.tail = FALSE ) )
hist(pvals)
hist(Fit$Fast_Fit$Effects_df$pval)
testpvals <- pnorm(abs(effs)/ses, lower.tail = FALSE)
hist(testpvals)
hist(Fit$Fast_Fit$Effects_df$pval)
testpvals <- 2*pnorm(abs(effs)/ses, lower.tail = FALSE)
plot(testpvals, Fit$Fast_Fit$Effects_df$pval)
abline(0,1)
effs <- Fit$Fast_Fit$Effects_df$L2FC_kdeg
ses <- Fit$Fast_Fit$Effects_df$se
testpvals <- 2*pnorm(abs(effs)/ses, lower.tail = FALSE)
plot(testpvals, Fit$Fast_Fit$Effects_df$pval)
abline(0,1)
effs <- Fit$Fast_Fit$Effects_df$effect
ses <- Fit$Fast_Fit$Effects_df$se
testpvals <- 2*pnorm(abs(effs)/ses, lower.tail = FALSE)
plot(testpvals, Fit$Fast_Fit$Effects_df$pval)
abline(0,1)
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
set.seed(123)
Fit <- bakRFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE)
## Alt statistical testing procedure
cutoff <- 0
effs <- Fit$Fast_Fit$Effects_df$effect
ses <- Fit$Fast_Fit$Effects_df$se
newstat <- sign(effs)*pmax( (abs(effs) - cutoff)/ses, 0)
newpvals <- pmin(1, 2*pnorm( (abs(effs) - cutoff)/ses, lower.tail = FALSE ) )
testpvals <- 2*pnorm(abs(effs)/ses, lower.tail = FALSE)
plot(testpvals, Fit$Fast_Fit$Effects_df$pval)
abline(0,1)
plot(newpvals, Fit$Fast_Fit$Effects_df$pval)
abline(0,1)
## Alt statistical testing procedure
cutoff <- 0.3
effs <- Fit$Fast_Fit$Effects_df$effect
ses <- Fit$Fast_Fit$Effects_df$se
newstat <- sign(effs)*pmax( (abs(effs) - cutoff)/ses, 0)
newpvals <- pmin(1, 2*pnorm( (abs(effs) - cutoff)/ses, lower.tail = FALSE ) )
testpvals <- 2*pnorm(abs(effs)/ses, lower.tail = FALSE)
plot(newpvals, Fit$Fast_Fit$Effects_df$pval)
plot(newpvals, Fit$Fast_Fit$Effects_df$pval)
abline(0,1)
stopifnot(is.numeric("a"))
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
set.seed(123)
sim_list <- sim_bakRData(400, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$bakRData
Fit <- bakRFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE)
plot(Fit$Fast_Fit$Effects_df$pval, testpvals)
plot(Fit$Fast_Fit$Effects_df$pval, newpvals)
Fit <- bakRFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, null_cutoff = 0.3)
plot(Fit$Fast_Fit$Effects_df$pval, newpvals)
Fit$Fast_Fit$Effects_df
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
set.seed(123)
sim_list <- sim_bakRData(400, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$bakRData
Fit <- bakRFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, null_cutoff = 0.3)
plot(Fit$Fast_Fit$Effects_df$pval, newpvals)
Fit <- bakRFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, null_cutoff = 0)
plot(Fit$Fast_Fit$Effects_df$pval, testpvals)
devtools::document()
library(rstan)
library(devtools)
library(tidyverse)
library(rstan)
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
set.seed(123)
sim_list <- sim_bakRData(400, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$bakRData
Fit <- bakRFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE)
f2U_check <- Fit$Data_lists$Fast_df %>%
group_by(XF, sample) %>%
summarise(n2U = sum(n[nT <=2]),
nmore = sum(n[nT > 2])) %>%
mutate(f2U = n2U/(n2U + nmore))
sum(f2U_check$f2U > 0.25)
max(Fit$Fast_Fit$Fn_Estimates$Feature_ID)
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
bakR_test <- sim_bakRData(500)
Fit_test <- bakRFit(bakR_test$bakRData, StanRateEst = TRUE, RateEst_size = 10)
plotVolcano(Fit_test$Fast_Fit)
?as.data.frame
devtools::check()
.Last.error.trace
library(utils)
devtools::install()
devtools::check()
?bakRFit
?usethis::use_vignette
usethis::use_vignette("Further-Analyses")
usethis::use_package("DESeq2", "Suggests")
usethis::use_package("pheatmap", "Suggests")
?bakRFit
sum(c(1, 2, 2, 3) %in% c(1, 2, 3))
class(Fit)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
.Last.error.trace
devtools::load_all()
devtools::document()
devtools::check()
devtools::load_all()
?sim_bakRData
sim <- sim_bakRData(1000, num_ks_DE = c(0, 200), num_kd_DE = c(0, 0))
Fittest <- bakRFit(sim$bakRData, pnew = rep(0.05, times = 6), pold= 0.001)
?colnames
Counts <- Fittest$Data_lists$Count_Matrix
Counts
conditions <- as.factor(rep(c("ref", "exp"), each = 3))
conditions
colnames(Counts)
sim$bakRData$metadf
conditions_s4U <- as.factor(rep(c("ref", "exp"), each = 3))
conditions_ctl <- as.factor(c("ref", "exp"))
conditions <- c(conditions_s4U, conditions_ctl)
colData <- data.frame(conditions = conditions)
rownames(colData) <- colnames(Counts)
print(t(colData))
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData = Counts, colData = colData, design = ~conditions)
ddso <- DESeq(dds)
reso <- results(ddso, contrast = c("conditions", "exp", "ref"))
reso$lfcSE
plot(reso$log2FoldChange/reso$lfcSE, reso$stat)
plot(reso$log2FoldChange/reso$lfcSE, reso$stat) +
abline(0,1)
?tibble
library(ggplot2)
-log10(0.1)
10^-0.1
ksyn_df <- tibble(L2FC = reso$log2FoldChange + Fittest$Fast_Fit$Effects_df$L2FC_kdeg)
ksyn_df <- data.frame(L2FC = reso$log2FoldChange + Fittest$Fast_Fit$Effects_df$L2FC_kdeg)
ksyn_df <- ksyn_df %>%
se
ksyn_df$se <- sqrt(reso$lfcSE^2 + (Fittest$Fast_Fit$Effects_df$se*log2(exp(1)))^2)
ksyn_df <- ksyn_df %>%
mutate(pval = 2*pnorm(-abs(L2FC/se)), padj = p.adjust(pval, method = "BH"))
?library
library(tidyverse, quietly = TRUE)
devtools::load_all()
sim <- sim_bakRData(1000, eff_mean = 1)
Fit <- bakRFit(sim$bakRData, StanRateEst = TRUE, RateEst_size = 5)
plotMA(Fit, Model = "MLE")
plotVolcano(Fit$Fast_Fit)
devtools::load_all()
sim <- sim_bakRData(1000)
cB <- sim$bakRData$cB
meta <- sim$bakRData$metadf
unique(cB$sample)
meta
samp_keep <- c("1", "2", "3", "7")
cB_filt <- cB[cB$sample %in% samp_keep]
cB_filt <- cB[cB$sample %in% samp_keep,]
cB_filt
ls
metadf <- meta
meta
metadf <- data.frame(tl = c(1, 1, 1, 0), Exp_ID = c(1, 1, 1, 1))
metadf
row.names(metadf) <- unique(cB_filt$sample)
metadf
bakRdata <- bakRData(cB_filt, metadf)
Fit <- bakRFit(bakRdata)
Fit$Fast_Fit$Fn_Estimates
Fit$Fast_Fit$Effects_df
Fit <- bakRFit(Fit, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 5)
devtools::load_all()
bakRdata <- bakRData(cB_filt, metadf)
?bakRFit
devtools::load_all()
bakRdata <- bakRData(cB_filt, metadf)
library(devtools)
use_package("data.table")
?tibble
?rbinom
?unlist
?pmap
?rbernoulli
devtools::load_all()
devtools::document()
devtools::load_all()
sim <- Simulate_bakRData(1000)
devtools::load_all()
sim <- Simulate_bakRData(1000)
?bind_rows
devtools::load_all()
sim <- Simulate_bakRData(1000)
sim$bakRData$cB
unique(sim$bakRData$cB$sample)
sim$bakRData$metadf
devtools::load_all()
sim <- Simulate_bakRData(1000)
Fit <- bakRFit(sim_data$bakRData, StanRateEst = TRUE, RateEst_size = 10)
Fit <- bakRFit(sim$bakRData, StanRateEst = TRUE, RateEst_size = 10)
Fit <- bakRFit(sim$bakRData, StanRateEst = TRUE, RateEst_size = 10, low_reads = 1, high_reads = 100000)
sim$bakRData$cB
sim <- Simulate_bakRData(1000)
warnings()
devtools::load_all()
sim <- Simulate_bakRData(1000)
Fit <- bakRFit(sim$bakRData, StanRateEst = TRUE, RateEst_size = 10)
plotVolcano(Fit$Fast_Fit)
plotMA(Fit, Model = "MLE")
sim_fn <- sim$sim_list$Fn_rep_sim
sim_fn <- sim_fn[sim_fn$Feature_ID %in% unique(Fit$Fast_Fit$Effects_df$XF),]
plot(Fit$Fast_Fit$Fn_Estimates$logit_fn, sim_fn$Logit_fn)
sim_L2FC <- sim_data$sim_list$Effect_sim
sim_L2FC <- sim$sim_list$Effect_sim
sim_L2FC <- sim_L2FC[sim_L2FC$Feature_ID %in% unique(Fit$Fast_Fit$Effects_df$XF),]
plot(Fit$Fast_Fit$Effects_df$L2FC_kdeg, sim_L2FC$L2FC_kdeg)
sum(Fit$Fast_Fit$Effects_df$padj[Fit$Fast_Fit$Effects_df$XF <= 500] < 0.05)/sum(Fit$Fast_Fit$Effects_df$padj < 0.05)
sim <- Simulate_bakRData(10000)
Fit <- bakRFit(sim$bakRData, StanRateEst = TRUE, RateEst_size = 10)
plotVolcano(Fit$Fast_Fit)
plotMA(Fit, Model = "MLE")
sum(Fit$Fast_Fit$Effects_df$padj[Fit$Fast_Fit$Effects_df$XF <= 5000] < 0.05)/sum(Fit$Fast_Fit$Effects_df$padj < 0.05)
sim_fn <- sim$sim_list$Fn_rep_sim
sim_fn <- sim_fn[sim_fn$Feature_ID %in% unique(Fit$Fast_Fit$Effects_df$XF),]
plot(Fit$Fast_Fit$Fn_Estimates$logit_fn, sim_fn$Logit_fn)
sim_L2FC <- sim$sim_list$Effect_sim
sim_L2FC <- sim_L2FC[sim_L2FC$Feature_ID %in% unique(Fit$Fast_Fit$Effects_df$XF),]
plot(Fit$Fast_Fit$Effects_df$L2FC_kdeg, sim_L2FC$L2FC_kdeg)
devtools::load_all()
sim <- Simulate_bakRData(1000, STL = TRUE, STL_len = 50)
Fit <- bakRFit(sim$bakRData, StanRateEst = TRUE, RateEst_size = 7)
sum(Fit$Fast_Fit$Effects_df$padj[Fit$Fast_Fit$Effects_df$XF <= 500] < 0.05)/sum(Fit$Fast_Fit$Effects_df$padj < 0.05)
sim_fn <- sim$sim_list$Fn_rep_sim
sim_fn <- sim_fn[sim_fn$Feature_ID %in% unique(Fit$Fast_Fit$Effects_df$XF),]
plot(Fit$Fast_Fit$Fn_Estimates$logit_fn, sim_fn$Logit_fn)
sim_L2FC <- sim$sim_list$Effect_sim
sim_L2FC <- sim_L2FC[sim_L2FC$Feature_ID %in% unique(Fit$Fast_Fit$Effects_df$XF),]
plot(Fit$Fast_Fit$Fn_Estimates$logit_fn, sim_fn$Logit_fn)
plot(Fit$Fast_Fit$Effects_df$L2FC_kdeg, sim_L2FC$L2FC_kdeg)
devtools::load_all()
sim <- Simulate_bakRData(10000)
?cBprocess
test <- bakR::cBprocess(sim$bakRData)
test$times
devtools::load_all()
test <- bakR::cBprocess(sim$bakRData)
test$times
devtools::load_all()
test <- bakR::cBprocess(sim$bakRData)
test$times
check_cB <- test$Fast_df
check_fast <- test$Fast_df
rm(check_cB)
check_Stan <- test$Stan_data
devtools::load_all()
test <- bakR::cBprocess(sim$bakRData)
test$times
anti_join(check_fast, test$Fast_df)
dplyr::anti_join(check_fast, test$Fast_df)
dplyr::anti_join(check_Stan$sdf, test$Stan_data$sdf)
names(check_fast)
devtools::load_all()
test <- bakR::cBprocess(sim$bakRData)
?cBprocess
library(data.table)
#### Set parameters
obj <- sim$bakRData
high_p <- 0.2
totcut <- 50
Ucut <- 0.25
AvgU <- 4
Stan <- TRUE
Fast <- TRUE
FOI <- c()
concat <- TRUE
## Check obj
if(class(obj) != "bakRData"){
stop("obj must be of class bakRData")
}
## Check high_p
if(!is.numeric(high_p)){
stop("high_p must be numeric")
}else if( (high_p < 0) | (high_p > 1) ){
stop("high_p must be between 0 and 1")
}else if (high_p < 0.01){
warning("high_p is abnormally low (< 0.01); many features will by pure chance have a higher mutation rate than this in a -s4U control and thus get filtered out")
}
## Check totcut
if(!is.numeric(totcut)){
stop("totcut must be numeric")
}else if( totcut < 0 ){
stop("totcut must be greater than 0")
}else if(totcut > 5000){
warning("totcut is abnormally high (> 5000); many features will not have this much coverage in every sample and thus get filtered out.")
}
## Check Ucut
if(!is.numeric(Ucut)){
stop("Ucut must be numeric")
}else if( Ucut < 0 ){
stop("Ucut must be greater than 0")
}else if(Ucut > 0.5 ){
warning("Ucut is abnormally high; you are allowing > 50% of reads to have 2 or less Us.")
}
## Check AvgU
if(!is.numeric(AvgU)){
stop("AvgU must be numeric")
}else if(AvgU < 0){
stop("AvgU must be greater than or equal to 0")
}else if (AvgU > 50){
warning("AvgU is abnormally high; you are requiring an average number of Us greater than 50")
}else if(AvgU < 4){
warning("AvgU is abnormally low; you are allowing an average of less than 4 Us per read, which may model convergence issues.")
}
## Check Stan
if(!is.logical(Stan)){
stop("Stan must be logical (TRUE or FALSE)")
}
## Check Fast_prep
if(!is.logical(Fast)){
stop("Fast must be logical (TRUE or FALSE")
}
## Check FOI
if(!is.null(FOI)){
if(typeof(obj$cB$XF) != typeof(FOI)){
warning("FOI should be the same data type as cB$XF in the bakRData object; if it is not none of the feature of interest will be found
in the cB.")
}
}else{
if(concat == FALSE){
stop("concat cannot be FALSE if FOI is null; this would cause no features to make it past filtering")
}
}
## Check concat
if(!is.logical(concat)){
stop("concat must be logical (TRUE or FALSE)")
}
start_1 <- Sys.time()
cB <- obj$cB
metadf <- obj$metadf
samp_list <- unique(cB$sample)
c_list <- rownames(metadf[metadf$tl == 0,])
s4U_list <- samp_list[!(samp_list %in% c_list)]
type_list <- ifelse(metadf[samp_list, "tl"] == 0, 0, 1)
mut_list <- metadf[samp_list, "Exp_ID"]
rep_list <- metadf[samp_list,] %>% dplyr::mutate(ctl = ifelse(tl == 0, 0, 1)) %>%
dplyr::group_by(ctl, Exp_ID) %>% dplyr::mutate(r_id = 1:length(tl)) %>% dplyr::ungroup() %>% dplyr::select(r_id)
rep_list <- rep_list$r_id
metadf <- metadf[samp_list, ] %>% dplyr::mutate(ctl = ifelse(tl == 0, 0, 1)) %>%
dplyr::group_by(ctl, Exp_ID) %>% dplyr::mutate(r_id = 1:length(tl)) %>% dplyr::ungroup()
names(type_list) <- samp_list
names(mut_list) <- samp_list
names(rep_list) <- samp_list
nreps <- max(rep_list)
# Helper function:
getType <- function(s) type_list[paste(s)]
getMut <- function(s) mut_list[paste(s)]
getRep <- function(s) rep_list[paste(s)]
end_1 <- Sys.time()
start_2 <- Sys.time()
# Get reliable features:
if(concat == TRUE | is.null(FOI)){
message("Finding reliable Features")
reliables <- bakR::reliableFeatures(obj, high_p = high_p, totcut = totcut, Ucut = Ucut, AvgU = AvgU)
keep <- c(FOI, reliables[!(reliables %in% FOI)])
}else{
keep <- FOI
}
if((length(keep) == 0) | (is.null(keep))){
stop("No features made it past filtering.Try increasing the read count or -s4U background mutation rate cutoffs.")
}
end_2 <- Sys.time()
start_3 <- Sys.time()
message("Filtering out unwanted or unreliable features")
cB <- cB %>% dplyr::ungroup() %>%
dplyr::filter(XF %in% keep)
cB <- data.table::setDT(cB)
ranked_features_df <- cB[, .N, by = .(XF)]
ranked_features_df <- ranked_features_df %>%
dplyr::mutate(fnum = order(XF)) %>%
dplyr::arrange(fnum) %>%
dplyr::select(XF, fnum)
names(ranked_features_df)[names(ranked_features_df) == "N"] <- "n"
ranked_features_df
end_3 <- Sys.time()
start_4 <- Sys.time()
message("Processing data...")
Counts_df <- cB[, .N, by = .(XF, sample)]
Counts_df <- Counts_df %>%
dplyr::right_join(ranked_features_df, by = 'XF') %>% dplyr::ungroup()
Counts_df
names(Counts_df)[names(Counts_df) == "N"] <- "n"
Counts_df
end_4 <- Sys.time()
start_5 <- Sys.time()
# Make count matrix
Cnt_mat <- matrix(0, ncol = length(samp_list), nrow = length(unique(Counts_df$XF)))
for(s in seq_along(samp_list)){
Cnt_mat[,s] <- Counts_df$n[Counts_df$sample == samp_list[s]]
}
rownames(Cnt_mat) <- Counts_df$XF[Counts_df$sample == samp_list[1]]
colnames(Cnt_mat) <- samp_list
rm(Counts_df)
sdf_Utmp <- cB[, .N, by = .(sample, XF, TC, nT)]
names(sdf_Utmp)[names(sdf_Utmp) == "N"] <- "n"
sdf_U < sdf_Utmp %>%
dplyr::right_join(ranked_features_df, by = 'XF') %>%
dplyr::ungroup()
devtools::load_all()
test <- bakR::cBprocess(sim$bakRData)
devtools::load_all()
test <- bakR::cBprocess(sim$bakRData)
devtools::load_all()
test <- bakR::cBprocess(sim$bakRData)
test$times
anti_join(check_fast, test$Fast_df)
dplyr::anti_join(check_fast, test$Fast_df)
test$Fast_df
check_fast
test$Fast_df
nrow(test$Fast_df)
test <- bakR::cBprocess(sim$bakRData)
dplyr::anti_join(check_fast, test$Fast_df)
devtools::load_all()
test <- bakR::cBprocess(sim$bakRData)
dplyr::anti_join(check_fast, test$Fast_df)
set.seed(123)
sim <- Simulate_bakRData(3000)
devtools::load_all()
set.seed(123)
sim2 <- Simulate_bakRData(3000)
dplyr::anti_join(sim$bakRData$cB, sim2$bakRData$cB)
