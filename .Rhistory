lm_list[[i]] <- c(h_int, h_slope)
lm_var[[i]] <- var(stats::residuals(heterosked_lm))
}
true_vars <-  Mut_data_est %>% dplyr::group_by(fnum, mut) %>%
dplyr::summarise(nreads = sum(nreads), fn_sd_log = log(sqrt(1/sum(1/((sd(logit_fn_rep)^2) + logit_fn_se^2 ) ) ) )) %>%
dplyr::ungroup() %>% dplyr::group_by(fnum, mut) %>% dplyr::mutate(slope = lm_list[[mut]][2], intercept = lm_list[[mut]][1]) %>%
dplyr::group_by(mut) %>%
dplyr::summarise(true_var = var(fn_sd_log - (intercept + slope*log10(nreads) ) ))
true_vars
true_vars$true_var
lm_list
Mut_data <- df
Mut_data <- Mut_data[Mut_data$type == 1,]
ngene <- max(Mut_data$fnum)
num_conds <- max(Mut_data$mut)
nreps <- max(Mut_data$reps)
sample_lookup <- Mut_data[, c("sample", "mut", "reps")] %>% dplyr::distinct()
feature_lookup <- Mut_data[,c("fnum", "XF")] %>% dplyr::distinct()
# Estimate fraction new in each replicate using binomial model
message("Estimating fraction labeled")
Mut_data <- merge(Mut_data, New_data_estimate, by = c("mut", "reps"))
if(!MLE){
# Bayesian Hypothesis Testing Method
Mut_data_est <- Mut_data %>% dplyr::group_by(fnum, mut, reps, TC, nT) %>%
# mutate(avg_mut = TC/nT) %>%
# #mutate(prior_new = ifelse(avg_mut >= (pnew_est - 0.01), 0.99, (avg_mut + 0.01)/pnew_est )) %>%
# mutate(prior_new = 0.9)%>%
dplyr::mutate(New_prob = stats::dbinom(TC, size=nT, prob=pnew)) %>%
dplyr::mutate(Old_prob = stats::dbinom(TC, size = nT, prob = pold)) %>%
dplyr::mutate(News = n*(New_prob/(New_prob + Old_prob))) %>%
dplyr::ungroup() %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(nreads = sum(n), Fn_rep_est = sum(News)/nreads) %>%
dplyr::mutate(logit_fn_rep = ifelse(Fn_rep_est == 1, logit(0.999), ifelse(Fn_rep_est == 0, logit(0.001), logit(Fn_rep_est)))) %>%
dplyr::ungroup()
}else{
# MLE
mixed_lik <- function(lam_n, lam_o, TC, n, logit_fn){
logl <- sum(n*log(inv_logit(logit_fn)*(lam_n^TC)*exp(-lam_n) + (1-inv_logit(logit_fn))*(lam_o^TC)*exp(-lam_o) ))
return(-logl)
}
Mut_data_est <- Mut_data %>% dplyr::ungroup() %>% dplyr::mutate(lam_n = pnew*nT, lam_o = pold*nT) %>%
dplyr::group_by(fnum, mut, reps, TC) %>%
dplyr::summarise(lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n),
n = sum(n), .groups = "keep") %>%
dplyr::ungroup() %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(logit_fn_rep = optim(0.5, mixed_lik, TC = TC, n = n, lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n), method = "L-BFGS-B", lower = lower, upper = upper)$par, nreads =sum(n), .groups = "keep") %>%
dplyr::mutate(logit_fn_rep = ifelse(logit_fn_rep == lower, runif(1, lower-0.2, lower), ifelse(logit_fn_rep == upper, runif(1, upper, upper+0.2), logit_fn_rep))) %>%
dplyr::ungroup()
## Look for numerical instabilities
instab_df <- Mut_data_est %>% dplyr::filter(abs(logit_fn_rep) > upper )
fnum_instab <- instab_df$fnum
mut_instab <- instab_df$mut
reps_instab <- instab_df$reps
instab_est <- merge(Mut_data, instab_df, by = c("fnum", "mut", "reps")) %>%
dplyr::ungroup() %>%
dplyr::mutate(totTC = TC*n, totU = nT*n) %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(tot_mut = sum(totTC), totUs = sum(totU), pnew = mean(pnew), pold = mean(pold)) %>% dplyr::ungroup() %>%
dplyr::mutate(avg_mut = tot_mut/totUs,
Fn_rep_est = (avg_mut - 0.9*pold)/(1.1*pnew - 0.9*pold)) %>%
dplyr::mutate(Fn_rep_est = ifelse(Fn_rep_est > 1, runif(1, min = inv_logit(upper-0.1), max = 1) , ifelse(Fn_rep_est < 0, runif(1, min = 0, max = inv_logit(lower+0.1)), Fn_rep_est ) )) %>%
dplyr::mutate(logit_fn_rep = logit(Fn_rep_est)) %>%
dplyr::select(fnum, mut, reps, logit_fn_rep)
Mut_data_est <- dplyr::left_join(Mut_data_est, instab_est, by = c("fnum", "mut", "reps")) %>%
dplyr::mutate(logit_fn_rep = ifelse(abs(logit_fn_rep.x) > upper, logit_fn_rep.y, logit_fn_rep.x)) %>%
dplyr::select(fnum, mut, reps, nreads, logit_fn_rep) %>%
dplyr::mutate(Fn_rep_est = inv_logit(logit_fn_rep))
}
message("Estimating per replicate uncertainties")
Mut_data <- dplyr::left_join(Mut_data, Mut_data_est[, c("logit_fn_rep", "fnum", "mut", "reps")], by = c("fnum", "mut", "reps"))
Mut_data <- df
Mut_data <- Mut_data[Mut_data$type == 1,]
ngene <- max(Mut_data$fnum)
num_conds <- max(Mut_data$mut)
nreps <- max(Mut_data$reps)
sample_lookup <- Mut_data[, c("sample", "mut", "reps")] %>% dplyr::distinct()
feature_lookup <- Mut_data[,c("fnum", "XF")] %>% dplyr::distinct()
# Estimate fraction new in each replicate using binomial model
message("Estimating fraction labeled")
Mut_data <- dplyr::left_join(Mut_data, New_data_estimate, by = c("mut", "reps"))
if(!MLE){
# Bayesian Hypothesis Testing Method
Mut_data_est <- Mut_data %>% dplyr::group_by(fnum, mut, reps, TC, nT) %>%
# mutate(avg_mut = TC/nT) %>%
# #mutate(prior_new = ifelse(avg_mut >= (pnew_est - 0.01), 0.99, (avg_mut + 0.01)/pnew_est )) %>%
# mutate(prior_new = 0.9)%>%
dplyr::mutate(New_prob = stats::dbinom(TC, size=nT, prob=pnew)) %>%
dplyr::mutate(Old_prob = stats::dbinom(TC, size = nT, prob = pold)) %>%
dplyr::mutate(News = n*(New_prob/(New_prob + Old_prob))) %>%
dplyr::ungroup() %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(nreads = sum(n), Fn_rep_est = sum(News)/nreads) %>%
dplyr::mutate(logit_fn_rep = ifelse(Fn_rep_est == 1, logit(0.999), ifelse(Fn_rep_est == 0, logit(0.001), logit(Fn_rep_est)))) %>%
dplyr::ungroup()
}else{
# MLE
mixed_lik <- function(lam_n, lam_o, TC, n, logit_fn){
logl <- sum(n*log(inv_logit(logit_fn)*(lam_n^TC)*exp(-lam_n) + (1-inv_logit(logit_fn))*(lam_o^TC)*exp(-lam_o) ))
return(-logl)
}
Mut_data_est <- Mut_data %>% dplyr::ungroup() %>% dplyr::mutate(lam_n = pnew*nT, lam_o = pold*nT) %>%
dplyr::group_by(fnum, mut, reps, TC) %>%
dplyr::summarise(lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n),
n = sum(n), .groups = "keep") %>%
dplyr::ungroup() %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(logit_fn_rep = optim(0.5, mixed_lik, TC = TC, n = n, lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n), method = "L-BFGS-B", lower = lower, upper = upper)$par, nreads =sum(n), .groups = "keep") %>%
dplyr::mutate(logit_fn_rep = ifelse(logit_fn_rep == lower, runif(1, lower-0.2, lower), ifelse(logit_fn_rep == upper, runif(1, upper, upper+0.2), logit_fn_rep))) %>%
dplyr::ungroup()
## Look for numerical instabilities
instab_df <- Mut_data_est %>% dplyr::filter(abs(logit_fn_rep) > upper )
fnum_instab <- instab_df$fnum
mut_instab <- instab_df$mut
reps_instab <- instab_df$reps
instab_est <- dplyr::left_join(Mut_data, instab_df, by = c("fnum", "mut", "reps")) %>%
dplyr::ungroup() %>%
dplyr::mutate(totTC = TC*n, totU = nT*n) %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(tot_mut = sum(totTC), totUs = sum(totU), pnew = mean(pnew), pold = mean(pold)) %>% dplyr::ungroup() %>%
dplyr::mutate(avg_mut = tot_mut/totUs,
Fn_rep_est = (avg_mut - 0.9*pold)/(1.1*pnew - 0.9*pold)) %>%
dplyr::mutate(Fn_rep_est = ifelse(Fn_rep_est > 1, runif(1, min = inv_logit(upper-0.1), max = 1) , ifelse(Fn_rep_est < 0, runif(1, min = 0, max = inv_logit(lower+0.1)), Fn_rep_est ) )) %>%
dplyr::mutate(logit_fn_rep = logit(Fn_rep_est)) %>%
dplyr::select(fnum, mut, reps, logit_fn_rep)
Mut_data_est <- dplyr::left_join(Mut_data_est, instab_est, by = c("fnum", "mut", "reps")) %>%
dplyr::mutate(logit_fn_rep = ifelse(abs(logit_fn_rep.x) > upper, logit_fn_rep.y, logit_fn_rep.x)) %>%
dplyr::select(fnum, mut, reps, nreads, logit_fn_rep) %>%
dplyr::mutate(Fn_rep_est = inv_logit(logit_fn_rep))
}
message("Estimating per replicate uncertainties")
Mut_data <- dplyr::left_join(Mut_data, Mut_data_est[, c("logit_fn_rep", "fnum", "mut", "reps")], by = c("fnum", "mut", "reps"))
?dplyr::left_join
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
Fit <- DynamicSeqFit(DynData, lower = -9, upper = 9)
rlang::last_error()
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
Fit <- DynamicSeqFit(DynData, lower = -9, upper = 9)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7)
plotVolcano(Fit$Fast_Fit)
dnorm(0, 0, 1)
# MLE
p_mean <- 0
p_sd <- 1
mixed_lik <- function(lam_n, lam_o, TC, n, logit_fn){
logl <- sum(n*log(inv_logit(logit_fn)*(lam_n^TC)*exp(-lam_n) + (1-inv_logit(logit_fn))*(lam_o^TC)*exp(-lam_o) )) + log(dnorm(logit_fn, mean = p_mean, sd = p_sd))
return(-logl)
}
inv_logit <- function(x) exp(x)/(1+exp(x))
optim(0.5, mixed_lik, TC = TC, n = nobs, lam_n = lam_n, lam_o = lam_o, method = "L-BFGS-B", lower = -9, upper = 9)
lam_n <- 0.0487*200*0.25
lam_o <- 0.001*200*0.25
optim(0.5, mixed_lik, TC = TC, n = nobs, lam_n = lam_n, lam_o = lam_o, method = "L-BFGS-B", lower = -9, upper = 9)
Mut_data <- df
Mut_data <- Mut_data[Mut_data$type == 1,]
ngene <- max(Mut_data$fnum)
num_conds <- max(Mut_data$mut)
nreps <- max(Mut_data$reps)
sample_lookup <- Mut_data[, c("sample", "mut", "reps")] %>% dplyr::distinct()
feature_lookup <- Mut_data[,c("fnum", "XF")] %>% dplyr::distinct()
# Estimate fraction new in each replicate using binomial model
message("Estimating fraction labeled")
Mut_data <- dplyr::left_join(Mut_data, New_data_estimate, by = c("mut", "reps"))
if(!MLE){
# Bayesian Hypothesis Testing Method
Mut_data_est <- Mut_data %>% dplyr::group_by(fnum, mut, reps, TC, nT) %>%
# mutate(avg_mut = TC/nT) %>%
# #mutate(prior_new = ifelse(avg_mut >= (pnew_est - 0.01), 0.99, (avg_mut + 0.01)/pnew_est )) %>%
# mutate(prior_new = 0.9)%>%
dplyr::mutate(New_prob = stats::dbinom(TC, size=nT, prob=pnew)) %>%
dplyr::mutate(Old_prob = stats::dbinom(TC, size = nT, prob = pold)) %>%
dplyr::mutate(News = n*(New_prob/(New_prob + Old_prob))) %>%
dplyr::ungroup() %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(nreads = sum(n), Fn_rep_est = sum(News)/nreads) %>%
dplyr::mutate(logit_fn_rep = ifelse(Fn_rep_est == 1, logit(0.999), ifelse(Fn_rep_est == 0, logit(0.001), logit(Fn_rep_est)))) %>%
dplyr::ungroup()
}else{
# MLE
p_mean <- 0
p_sd <- 1
mixed_lik <- function(lam_n, lam_o, TC, n, logit_fn){
logl <- sum(n*log(inv_logit(logit_fn)*(lam_n^TC)*exp(-lam_n) + (1-inv_logit(logit_fn))*(lam_o^TC)*exp(-lam_o) )) + log(dnorm(logit_fn, mean = p_mean, sd = p_sd))
return(-logl)
}
Mut_data_est <- Mut_data %>% dplyr::ungroup() %>% dplyr::mutate(lam_n = pnew*nT, lam_o = pold*nT) %>%
dplyr::group_by(fnum, mut, reps, TC) %>%
dplyr::summarise(lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n),
n = sum(n), .groups = "keep") %>%
dplyr::ungroup() %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(logit_fn_rep = optim(0.5, mixed_lik, TC = TC, n = n, lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n), method = "L-BFGS-B", lower = lower, upper = upper)$par, nreads =sum(n), .groups = "keep") %>%
dplyr::mutate(logit_fn_rep = ifelse(logit_fn_rep == lower, runif(1, lower-0.2, lower), ifelse(logit_fn_rep == upper, runif(1, upper, upper+0.2), logit_fn_rep))) %>%
dplyr::ungroup()
## Look for numerical instabilities
instab_df <- Mut_data_est %>% dplyr::filter(abs(logit_fn_rep) > upper )
fnum_instab <- instab_df$fnum
mut_instab <- instab_df$mut
reps_instab <- instab_df$reps
instab_est <- dplyr::left_join(Mut_data, instab_df, by = c("fnum", "mut", "reps")) %>%
dplyr::ungroup() %>%
dplyr::mutate(totTC = TC*n, totU = nT*n) %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(tot_mut = sum(totTC), totUs = sum(totU), pnew = mean(pnew), pold = mean(pold)) %>% dplyr::ungroup() %>%
dplyr::mutate(avg_mut = tot_mut/totUs,
Fn_rep_est = (avg_mut - 0.9*pold)/(1.1*pnew - 0.9*pold)) %>%
dplyr::mutate(Fn_rep_est = ifelse(Fn_rep_est > 1, runif(1, min = inv_logit(upper-0.1), max = 1) , ifelse(Fn_rep_est < 0, runif(1, min = 0, max = inv_logit(lower+0.1)), Fn_rep_est ) )) %>%
dplyr::mutate(logit_fn_rep = logit(Fn_rep_est)) %>%
dplyr::select(fnum, mut, reps, logit_fn_rep)
Mut_data_est <- dplyr::left_join(Mut_data_est, instab_est, by = c("fnum", "mut", "reps")) %>%
dplyr::mutate(logit_fn_rep = ifelse(abs(logit_fn_rep.x) > upper, logit_fn_rep.y, logit_fn_rep.x)) %>%
dplyr::select(fnum, mut, reps, nreads, logit_fn_rep) %>%
dplyr::mutate(Fn_rep_est = inv_logit(logit_fn_rep))
}
instab_est
instab_df
if(!MLE){
# Bayesian Hypothesis Testing Method
Mut_data_est <- Mut_data %>% dplyr::group_by(fnum, mut, reps, TC, nT) %>%
# mutate(avg_mut = TC/nT) %>%
# #mutate(prior_new = ifelse(avg_mut >= (pnew_est - 0.01), 0.99, (avg_mut + 0.01)/pnew_est )) %>%
# mutate(prior_new = 0.9)%>%
dplyr::mutate(New_prob = stats::dbinom(TC, size=nT, prob=pnew)) %>%
dplyr::mutate(Old_prob = stats::dbinom(TC, size = nT, prob = pold)) %>%
dplyr::mutate(News = n*(New_prob/(New_prob + Old_prob))) %>%
dplyr::ungroup() %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(nreads = sum(n), Fn_rep_est = sum(News)/nreads) %>%
dplyr::mutate(logit_fn_rep = ifelse(Fn_rep_est == 1, logit(0.999), ifelse(Fn_rep_est == 0, logit(0.001), logit(Fn_rep_est)))) %>%
dplyr::ungroup()
}else{
# MLE
p_mean <- 0
p_sd <- 1
mixed_lik <- function(lam_n, lam_o, TC, n, logit_fn){
logl <- sum(n*log(inv_logit(logit_fn)*(lam_n^TC)*exp(-lam_n) + (1-inv_logit(logit_fn))*(lam_o^TC)*exp(-lam_o) )) + log(dnorm(logit_fn, mean = p_mean, sd = p_sd))
return(-logl)
}
Mut_data_est <- Mut_data %>% dplyr::ungroup() %>% dplyr::mutate(lam_n = pnew*nT, lam_o = pold*nT) %>%
dplyr::group_by(fnum, mut, reps, TC) %>%
dplyr::summarise(lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n),
n = sum(n), .groups = "keep") %>%
dplyr::ungroup() %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(logit_fn_rep = optim(0.5, mixed_lik, TC = TC, n = n, lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n), method = "L-BFGS-B", lower = lower, upper = upper)$par, nreads =sum(n), .groups = "keep") %>%
dplyr::mutate(logit_fn_rep = ifelse(logit_fn_rep == lower, runif(1, lower-0.2, lower), ifelse(logit_fn_rep == upper, runif(1, upper, upper+0.2), logit_fn_rep))) %>%
dplyr::ungroup()
## Look for numerical instabilities
instab_df <- Mut_data_est %>% dplyr::filter(abs(logit_fn_rep) > upper )
fnum_instab <- instab_df$fnum
mut_instab <- instab_df$mut
reps_instab <- instab_df$reps
instab_est <- dplyr::right_join(Mut_data, instab_df, by = c("fnum", "mut", "reps")) %>%
dplyr::ungroup() %>%
dplyr::mutate(totTC = TC*n, totU = nT*n) %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(tot_mut = sum(totTC), totUs = sum(totU), pnew = mean(pnew), pold = mean(pold)) %>% dplyr::ungroup() %>%
dplyr::mutate(avg_mut = tot_mut/totUs,
Fn_rep_est = (avg_mut - 0.9*pold)/(1.1*pnew - 0.9*pold)) %>%
dplyr::mutate(Fn_rep_est = ifelse(Fn_rep_est > 1, runif(1, min = inv_logit(upper-0.1), max = 1) , ifelse(Fn_rep_est < 0, runif(1, min = 0, max = inv_logit(lower+0.1)), Fn_rep_est ) )) %>%
dplyr::mutate(logit_fn_rep = logit(Fn_rep_est)) %>%
dplyr::select(fnum, mut, reps, logit_fn_rep)
Mut_data_est <- dplyr::left_join(Mut_data_est, instab_est, by = c("fnum", "mut", "reps")) %>%
dplyr::mutate(logit_fn_rep = ifelse(abs(logit_fn_rep.x) > upper, logit_fn_rep.y, logit_fn_rep.x)) %>%
dplyr::select(fnum, mut, reps, nreads, logit_fn_rep) %>%
dplyr::mutate(Fn_rep_est = inv_logit(logit_fn_rep))
}
instab_df
instab_est
Mut_data_est
if(!MLE){
# Bayesian Hypothesis Testing Method
Mut_data_est <- Mut_data %>% dplyr::group_by(fnum, mut, reps, TC, nT) %>%
# mutate(avg_mut = TC/nT) %>%
# #mutate(prior_new = ifelse(avg_mut >= (pnew_est - 0.01), 0.99, (avg_mut + 0.01)/pnew_est )) %>%
# mutate(prior_new = 0.9)%>%
dplyr::mutate(New_prob = stats::dbinom(TC, size=nT, prob=pnew)) %>%
dplyr::mutate(Old_prob = stats::dbinom(TC, size = nT, prob = pold)) %>%
dplyr::mutate(News = n*(New_prob/(New_prob + Old_prob))) %>%
dplyr::ungroup() %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(nreads = sum(n), Fn_rep_est = sum(News)/nreads) %>%
dplyr::mutate(logit_fn_rep = ifelse(Fn_rep_est == 1, logit(0.999), ifelse(Fn_rep_est == 0, logit(0.001), logit(Fn_rep_est)))) %>%
dplyr::ungroup()
}else{
# MLE
p_mean <- 0
p_sd <- 1
mixed_lik <- function(lam_n, lam_o, TC, n, logit_fn){
logl <- sum(n*log(inv_logit(logit_fn)*(lam_n^TC)*exp(-lam_n) + (1-inv_logit(logit_fn))*(lam_o^TC)*exp(-lam_o) )) + log(dnorm(logit_fn, mean = p_mean, sd = p_sd))
return(-logl)
}
Mut_data_est <- Mut_data %>% dplyr::ungroup() %>% dplyr::mutate(lam_n = pnew*nT, lam_o = pold*nT) %>%
dplyr::group_by(fnum, mut, reps, TC) %>%
dplyr::summarise(lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n),
n = sum(n), .groups = "keep") %>%
dplyr::ungroup() %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(logit_fn_rep = optim(0.5, mixed_lik, TC = TC, n = n, lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n), method = "L-BFGS-B", lower = lower, upper = upper)$par, nreads =sum(n), .groups = "keep") %>%
dplyr::mutate(logit_fn_rep = ifelse(logit_fn_rep == lower, runif(1, lower-0.2, lower), ifelse(logit_fn_rep == upper, runif(1, upper, upper+0.2), logit_fn_rep))) %>%
dplyr::ungroup()
## Look for numerical instabilities
instab_df <- Mut_data_est %>% dplyr::filter(abs(logit_fn_rep) > upper )
fnum_instab <- instab_df$fnum
mut_instab <- instab_df$mut
reps_instab <- instab_df$reps
instab_est <- dplyr::right_join(Mut_data, instab_df, by = c("fnum", "mut", "reps")) %>%
dplyr::ungroup() %>%
dplyr::mutate(totTC = TC*n, totU = nT*n) %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(tot_mut = sum(totTC), totUs = sum(totU), pnew = mean(pnew), pold = mean(pold)) %>% dplyr::ungroup() %>%
dplyr::mutate(avg_mut = tot_mut/totUs,
Fn_rep_est = (avg_mut - 0.9*pold)/(1.1*pnew - 0.9*pold)) %>%
dplyr::mutate(Fn_rep_est = ifelse(Fn_rep_est > 1, runif(1, min = inv_logit(upper-0.1), max = 1) , ifelse(Fn_rep_est < 0, runif(1, min = 0, max = inv_logit(lower+0.1)), Fn_rep_est ) )) %>%
dplyr::mutate(logit_fn_rep = logit(Fn_rep_est)) %>%
dplyr::select(fnum, mut, reps, logit_fn_rep)
Mut_data_est2 <- dplyr::left_join(Mut_data_est, instab_est, by = c("fnum", "mut", "reps")) %>%
dplyr::mutate(logit_fn_rep = ifelse(abs(logit_fn_rep.x) > upper, logit_fn_rep.y, logit_fn_rep.x)) %>%
dplyr::select(fnum, mut, reps, nreads, logit_fn_rep) %>%
dplyr::mutate(Fn_rep_est = inv_logit(logit_fn_rep))
}
anti_join(Mut_data_est, Mut_data_est2)
hist(Mut_data_est2$logit_fn_rep)
if(!MLE){
# Bayesian Hypothesis Testing Method
Mut_data_est <- Mut_data %>% dplyr::group_by(fnum, mut, reps, TC, nT) %>%
# mutate(avg_mut = TC/nT) %>%
# #mutate(prior_new = ifelse(avg_mut >= (pnew_est - 0.01), 0.99, (avg_mut + 0.01)/pnew_est )) %>%
# mutate(prior_new = 0.9)%>%
dplyr::mutate(New_prob = stats::dbinom(TC, size=nT, prob=pnew)) %>%
dplyr::mutate(Old_prob = stats::dbinom(TC, size = nT, prob = pold)) %>%
dplyr::mutate(News = n*(New_prob/(New_prob + Old_prob))) %>%
dplyr::ungroup() %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(nreads = sum(n), Fn_rep_est = sum(News)/nreads) %>%
dplyr::mutate(logit_fn_rep = ifelse(Fn_rep_est == 1, logit(0.999), ifelse(Fn_rep_est == 0, logit(0.001), logit(Fn_rep_est)))) %>%
dplyr::ungroup()
}else{
# MLE
p_mean <- 0
p_sd <- 10
mixed_lik <- function(lam_n, lam_o, TC, n, logit_fn){
logl <- sum(n*log(inv_logit(logit_fn)*(lam_n^TC)*exp(-lam_n) + (1-inv_logit(logit_fn))*(lam_o^TC)*exp(-lam_o) )) + log(dnorm(logit_fn, mean = p_mean, sd = p_sd))
return(-logl)
}
Mut_data_est <- Mut_data %>% dplyr::ungroup() %>% dplyr::mutate(lam_n = pnew*nT, lam_o = pold*nT) %>%
dplyr::group_by(fnum, mut, reps, TC) %>%
dplyr::summarise(lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n),
n = sum(n), .groups = "keep") %>%
dplyr::ungroup() %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(logit_fn_rep = optim(0.5, mixed_lik, TC = TC, n = n, lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n), method = "L-BFGS-B", lower = lower, upper = upper)$par, nreads =sum(n), .groups = "keep") %>%
dplyr::mutate(logit_fn_rep = ifelse(logit_fn_rep == lower, runif(1, lower-0.2, lower), ifelse(logit_fn_rep == upper, runif(1, upper, upper+0.2), logit_fn_rep))) %>%
dplyr::ungroup()
## Look for numerical instabilities
instab_df <- Mut_data_est %>% dplyr::filter(abs(logit_fn_rep) > upper )
fnum_instab <- instab_df$fnum
mut_instab <- instab_df$mut
reps_instab <- instab_df$reps
instab_est <- dplyr::right_join(Mut_data, instab_df, by = c("fnum", "mut", "reps")) %>%
dplyr::ungroup() %>%
dplyr::mutate(totTC = TC*n, totU = nT*n) %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(tot_mut = sum(totTC), totUs = sum(totU), pnew = mean(pnew), pold = mean(pold)) %>% dplyr::ungroup() %>%
dplyr::mutate(avg_mut = tot_mut/totUs,
Fn_rep_est = (avg_mut - 0.9*pold)/(1.1*pnew - 0.9*pold)) %>%
dplyr::mutate(Fn_rep_est = ifelse(Fn_rep_est > 1, runif(1, min = inv_logit(upper-0.1), max = 1) , ifelse(Fn_rep_est < 0, runif(1, min = 0, max = inv_logit(lower+0.1)), Fn_rep_est ) )) %>%
dplyr::mutate(logit_fn_rep = logit(Fn_rep_est)) %>%
dplyr::select(fnum, mut, reps, logit_fn_rep)
Mut_data_est2 <- dplyr::left_join(Mut_data_est, instab_est, by = c("fnum", "mut", "reps")) %>%
dplyr::mutate(logit_fn_rep = ifelse(abs(logit_fn_rep.x) > upper, logit_fn_rep.y, logit_fn_rep.x)) %>%
dplyr::select(fnum, mut, reps, nreads, logit_fn_rep) %>%
dplyr::mutate(Fn_rep_est = inv_logit(logit_fn_rep))
}
hist(Mut_data_est2$logit_fn_rep)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7)
## Look at Feature 524, R == 2, MT == 2
plot(Fn_rep$Logit_fn[Fn_rep$Feature_ID %in% unique(data_list$sdf$XF)], Fit$Fast_Fit$Fn_Estimates$logit_fn)
## See what actual fns are
Fn_rep <- sim_list$sim_list$Fn_rep_sim
data_list <- Fit$Data_lists$Stan_data
## Look at Feature 524, R == 2, MT == 2
plot(Fn_rep$Logit_fn[Fn_rep$Feature_ID %in% unique(data_list$sdf$XF)], Fit$Fast_Fit$Fn_Estimates$logit_fn)
abline(a = 0, b = 1)
devtools::document()
?fast_analysis
devtools::load_all()
pkgbuild::compile_dll(force = TRUE)
devtools::document()
devtools::document()
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
sim_list <- sim_DynamicSeqData(200, num_kd_DE = c(0, 200),num_conds = 2, p_new = 0.05,
nreps = 3, eff_sd = 0.7, tl = 60, fn_sd = 1)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
fn_se <_ Fit$Fast_Fit$Fn_Estimates$log_kd_se*60
fn_se <- Fit$Fast_Fit$Fn_Estimates$log_kd_se*60
plot(Fit$Fast_Fit$Fn_Estimates$logit_fn/fn_se, Fit$Fast_Fit$Fn_Estimates$log_kdeg/Fit$Fast_Fit$Fn_Estimates$log_kd_se)
hist(fn_se)
fn_se <- Fit$Fast_Fit$Fn_Estimates$log_kd_se*60*exp(Fit$Fast_Fit$Fn_Estimates$log_kdeg)
hist(fn_se)
plot(Fit$Fast_Fit$Fn_Estimates$logit_fn/fn_se, Fit$Fast_Fit$Fn_Estimates$log_kdeg/Fit$Fast_Fit$Fn_Estimates$log_kd_se)
hist(fn_se)
min(fn_se)
devtools::load_all()
Fit <- DynamicSeqFit(DynData)
Fit$Fast_Fit$Fn_Estimates$logit_fn_se
as_tibble(Fit$Fast_Fit$Fn_Estimates)
dplyr::as_tibble(Fit$Fast_Fit$Fn_Estimates)
Fn_est <- Fit$Fast_Fit$Fn_Estimates
logit_fn_se <- Fn_est$logit_fn_se
plot(logit_fn_se, Fn_est$log_kd_se*60*Fn_est$kdeg)
pkgbuild::compile_dll(force = TRUE)
devtools::document()
devtools::document()
devtools::load_all()
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
pkgbuild::compile_dll(force = TRUE)
devtools::document()
devtools::load_all()
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
devtools::load_all()
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
FnPCA(Fit$Hybrid_Fit)
plotVolcano(Fit$Hybrid_Fit)
plotMA(Fit$Hybrid_Fit)
plotMA(Fit$Hybrid_Fit, Fit$Data_lists$Stan_data$Avg_Reads_natural)
fast_df <- Fit$Data_lists$Fast_df
fast_df
devtools::load_all()
Fit <- DynamicSeqFit(DynData, StanRate = TRUE)
as_tibble(Fit$Data_lists$Fast_df)
dplyr::as_tibble(Fit$Data_lists$Fast_df)
devtools::load_all()
Fit <- DynamicSeqFit(DynData, StanRate = TRUE)
devtools::load_all()
Fit <- DynamicSeqFit(DynData, StanRate = TRUE)
devtools::load_all()
Fit <- DynamicSeqFit(DynData, StanRate = TRUE)
Fit$Data_lists$Stan_data$Avg_Reads
Fit$Data_lists$Stan_data$Avg_Reads_natural
Fit$Data_lists$Count_Matrix
Fit$Data_lists$Stan_data$Avg_Reads_natural
Fit$Data_lists$Count_Matrix
nrow(Fit$Data_lists$Count_Matrix)
Fit$Data_lists$Stan_data$NF
rowSums(Fit$Data_lists$Count_Matrix)
cnt_mat <- Fit$Data_lists$Count_Matrix
cnt_mat < 2000
(cnt_mat > 2000) & (cnt_mat < 5000)
Fit$Data_lists$Stan_data$sdf
devtools::load_all()
Fit <- DynamicSeqFit(DynData, StanRateEst = TRUE)
devtools::load_all()
data_list <- DynamicSeq::cBprocess(DynData)
Fit <- DynamicSeqFit(DynData, StanRateEst = TRUE)
Fit <- DynamicSeqFit(DynData, StanRateEst = FALSE)
choose_test <- sample(c(1, 2), size = 3, replace = FALSE)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
sim_list <- sim_DynamicSeqData(200, num_kd_DE = c(0, 200),num_conds = 2, p_new = 0.05,
nreps = 3, eff_sd = 0.7, tl = 60, fn_sd = 1)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE)
Fit <- DynamicSeqFit(Fit, FastRerun = TRUE, StanRateEst = TRUE)
devtools::document()
?fast_analysis
?DynamicSeqFit
devtools::document()
?fast_analysis
?DynamicSeqFit
devtools::document()
devtools::load_all()
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 1)
colnames(Fit$Fast_Fit$Fn_Estimates)
colnames(Fit$Fast_Fit$Regularized_ests)
colnames(Fit$Fast_Fit$Effects_df)
Fit$Fast_Fit$Mut_rates
Fit$Fast_Fit$Mean_Variance_lms
devtool::document
devtools::document()
(5/9)^3
a <- (5/9)^3
b <- (1*8)/(5*4*9)
c <- (2*64)/(4*81) + (1/4)*(1 - 64/81)
d <- (3/4)*((8^3)/(9^3)) + (2/4)*(1 - ((8^3)/(9^3)))
e <- (8^4)/(9^4) + (3/4)*(1 - (8^4)/(9^4))
s <- 1/5
a*(s*b + s*c + s*d + s*e)
a*((s*b + s*c + s*d + s*e)^3)
0.01/((5^3)/(9^3))
(0.01/((5^3)/(9^3)))^1/3
0.01944^2
(0.01/((5^3)/(9^3)))^(1/3)
((0.01/((5^3)/(9^3)))^(1/3))^2
(((0.01/((5^3)/(9^3)))^(1/3))^2)*((5^3)/(9^3))
devtools::load_all()
devtools::document()
