plot(Fit$Stan_Fit$Effects_df$se, Fit$Fast_Fit$Effects_df$se*log2(exp(1)))
abline(0,1)
# FDR
FDs <- sum(Fit$Stan_Fit$Effects_df$padj[as.numeric(Fit$Stan_Fit$Effects_df$XF) <= 50] < 0.05)
Ds <- sum(Fit$Stan_Fit$Effects_df$padj < 0.05)
FDR <- FDs/Ds
FDR
# Power
TDs <- sum(Fit$Stan_Fit$Effects_df$padj[as.numeric(Fit$Stan_Fit$Effects_df$XF) > 50] < 0.05)
Power <- TDs/50
Power
plot(Fit$Stan_Fit$Effects_df$pval, Fit$Fast_Fit$Effects_df$pval)
abline(0,1)
Fit$Fast_Fit$Hyper_Parameters
plot(Fit$Fast_Fit$Effects_df$pval, 2*pnorm(-abs(Fit$Fast_Fit$Effects_df$effect/Fit$Fast_Fit$Effects_df$se)))
abline(0,1)
plot(Fit$Fast_Fit$Effects_df$pval, 2*pt(-abs(Fit$Fast_Fit$Effects_df$effect/Fit$Fast_Fit$Effects_df$se), df = 2 + 2*Fit$Fast_Fit$Hyper_Parameters[1]))
abline(0,1)
# Run Hybrid implementation with Stan options changed
# Use Stan to estimate mutation rates from start
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 2, iter = 3000, warmup = 1000)
# Estimated logit(fraction news)
est_fn <- Fit$Hybrid_Fit$Fn_Estimates$logit_fn
# Estimated L2FC(kdeg)
est_L2FC <- Fit$Hybrid_Fit$Effects_df$L2FC_kdeg
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
# Compare L2FC(kdeg) estimate to truth
plot(true_L2FC, est_L2FC)
abline(0,1, col = "red")
# Make Volcano plot
plotVolcano(Fit$Hybrid_Fit)
# Make MA plot
plotMA(Fit, Model = "Hybrid")
# Make PCA plot
FnPCA(Fit$Hybrid_Fit)
# FDR
FDs <- sum(Fit$Hybrid_Fit$Effects_df$padj[as.numeric(Fit$Hybrid_Fit$Effects_df$XF) <= 50] < 0.05)
Ds <- sum(Fit$Hybrid_Fit$Effects_df$padj < 0.05)
FDR <- FDs/Ds
FDR
# Power
TDs <- sum(Fit$Hybrid_Fit$Effects_df$padj[as.numeric(Fit$Hybrid_Fit$Effects_df$XF) > 50] < 0.05)
Power <- TDs/50
Power
FDs
Ds
library(rstan)
options(mc.cores = parallel::detectCores())
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 2, iter = 3000, warmup = 1000)
detach("package:rstan", unload = TRUE)
#library(rstan)
options(mc.cores = parallel::detectCores())
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 2, iter = 3000, warmup = 1000)
# Estimated logit(fraction news)
est_fn <- Fit$Hybrid_Fit$Fn_Estimates$logit_fn
# Estimated L2FC(kdeg)
est_L2FC <- Fit$Hybrid_Fit$Effects_df$L2FC_kdeg
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
# Compare L2FC(kdeg) estimate to truth
plot(true_L2FC, est_L2FC)
abline(0,1, col = "red")
# Make Volcano plot
plotVolcano(Fit$Hybrid_Fit)
# Make MA plot
plotMA(Fit, Model = "Hybrid")
# Make PCA plot
FnPCA(Fit$Hybrid_Fit)
# Load bakR
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
# Simulate data
sim <- Simulate_bakRData(100, nreps = 2)
# Use Stan to estimate mutation rates from start
Fit <- bakRFit(sim$bakRData, StanRateEst = TRUE, RateEst_size = 5, low_reads = 50, high_reads = 10000)
# Estimated logit(fraction news)
est_fn <- Fit$Fast_Fit$Fn_Estimates$logit_fn
# Estimated L2FC(kdeg)
est_L2FC <- Fit$Fast_Fit$Effects_df$L2FC_kdeg
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
#library(rstan)
options(mc.cores = parallel::detectCores())
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 2, iter = 3000, warmup = 1000)
# Estimated logit(fraction news)
est_fn <- Fit$Hybrid_Fit$Fn_Estimates$logit_fn
# Estimated L2FC(kdeg)
est_L2FC <- Fit$Hybrid_Fit$Effects_df$L2FC_kdeg
# Simulated truth
sim_truth <- sim$sim_list
# Simulated logit(fraction news) from features making it past filtering
true_fn <- sim_truth$Fn_rep_sim$Logit_fn[sim_truth$Fn_rep_sim$Feature_ID %in% XFs]
# Features that made it past filtering
XFs <- unique(Fit$Fast_Fit$Effects_df$XF)
# Simulated truth
sim_truth <- sim$sim_list
# Simulated logit(fraction news) from features making it past filtering
true_fn <- sim_truth$Fn_rep_sim$Logit_fn[sim_truth$Fn_rep_sim$Feature_ID %in% XFs]
# simulated L2FC(kdeg) from features making it past filtering
true_L2FC <- sim_truth$Effect_sim$L2FC_kdeg[sim_truth$Effect_sim$Feature_ID %in% XFs]
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
# Compare L2FC(kdeg) estimate to truth
plot(true_L2FC, est_L2FC)
abline(0,1, col = "red")
# Make Volcano plot
plotVolcano(Fit$Hybrid_Fit)
# Make MA plot
plotMA(Fit, Model = "Hybrid")
# Make PCA plot
FnPCA(Fit$Hybrid_Fit)
# FDR
FDs <- sum(Fit$Hybrid_Fit$Effects_df$padj[as.numeric(Fit$Hybrid_Fit$Effects_df$XF) <= 50] < 0.05)
Ds <- sum(Fit$Hybrid_Fit$Effects_df$padj < 0.05)
FDR <- FDs/Ds
FDR
# Power
TDs <- sum(Fit$Hybrid_Fit$Effects_df$padj[as.numeric(Fit$Hybrid_Fit$Effects_df$XF) > 50] < 0.05)
Power <- TDs/50
Power
devtools::document()
devtools::document()
# Load bakR
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
# Simulate data
sim <- Simulate_bakRData(100, nreps = 2)
# Analyze with MLE implementation
Fit <- bakRFit(sim$bakRData)
# Features that made it past filtering
XFs <- unique(Fit$Fast_Fit$Effects_df$XF)
# Simulated truth
sim_truth <- sim$sim_list
# Simulated logit(fraction news) from features making it past filtering
true_fn <- sim_truth$Fn_rep_sim$Logit_fn[sim_truth$Fn_rep_sim$Feature_ID %in% XFs]
# simulated L2FC(kdeg) from features making it past filtering
true_L2FC <- sim_truth$Effect_sim$L2FC_kdeg[sim_truth$Effect_sim$Feature_ID %in% XFs]
# Estimated logit(fraction news)
est_fn <- Fit$Fast_Fit$Fn_Estimates$logit_fn
# Estimated L2FC(kdeg)
est_L2FC <- Fit$Fast_Fit$Effects_df$L2FC_kdeg
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
# Compare L2FC(kdeg) estimate to truth
plot(true_L2FC, est_L2FC)
abline(0,1, col = "red")
# Make Volcano plot
plotVolcano(Fit$Fast_Fit)
# Make MA plot
plotMA(Fit, Model = "MLE")
# Make PCA plot
FnPCA(Fit$Fast_Fit)
# Make kdeg PCA
FnPCA(Fit$Fast_Fit, log_kdeg =  TRUE)
# Use Stan to estimate mutation rates
Fit <- bakRFit(Fit, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 5, low_reads = 50, high_reads = 10000)
# Estimated logit(fraction news)
est_fn <- Fit$Fast_Fit$Fn_Estimates$logit_fn
# Estimated L2FC(kdeg)
est_L2FC <- Fit$Fast_Fit$Effects_df$L2FC_kdeg
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
# Compare L2FC(kdeg) estimate to truth
plot(true_L2FC, est_L2FC)
abline(0,1, col = "red")
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
# Make Volcano plot
plotVolcano(Fit$Fast_Fit)
# Make MA plot
plotMA(Fit, Model = "MLE")
# Make PCA plot
FnPCA(Fit$Fast_Fit)
# Make kdeg PCA
FnPCA(Fit$Fast_Fit, log_kdeg =  TRUE)
# Use Stan to estimate mutation rates from start
Fit <- bakRFit(sim$bakRData, StanRateEst = TRUE, RateEst_size = 5, low_reads = 50, high_reads = 10000)
# Estimated logit(fraction news)
est_fn <- Fit$Fast_Fit$Fn_Estimates$logit_fn
# Estimated L2FC(kdeg)
est_L2FC <- Fit$Fast_Fit$Effects_df$L2FC_kdeg
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
# Compare L2FC(kdeg) estimate to truth
plot(true_L2FC, est_L2FC)
abline(0,1, col = "red")
# Make Volcano plot
plotVolcano(Fit$Fast_Fit)
# Make MA plot
plotMA(Fit, Model = "MLE")
# Make PCA plot
FnPCA(Fit$Fast_Fit)
# Make kdeg PCA
FnPCA(Fit$Fast_Fit, log_kdeg =  TRUE)
# FDR
FDs <- sum(Fit$Fast_Fit$Effects_df$padj[as.numeric(Fit$Fast_Fit$Effects_df$XF) <= 50] < 0.05)
Ds <- sum(Fit$Fast_Fit$Effects_df$padj < 0.05)
FDR <- FDs/Ds
FDR
# Power
TDs <- sum(Fit$Fast_Fit$Effects_df$padj[as.numeric(Fit$Fast_Fit$Effects_df$XF) > 50] < 0.05)
Power <- TDs/50
Power
# Run Hybrid implementation
# Use Stan to estimate mutation rates from start
Fit <- bakRFit(Fit, HybridFit = TRUE)
# Estimated logit(fraction news)
est_fn <- Fit$Hybrid_Fit$Fn_Estimates$logit_fn
# Estimated L2FC(kdeg)
est_L2FC <- Fit$Hybrid_Fit$Effects_df$L2FC_kdeg
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
# Compare L2FC(kdeg) estimate to truth
plot(true_L2FC, est_L2FC)
abline(0,1, col = "red")
# Make Volcano plot
plotVolcano(Fit$Hybrid_Fit)
# Make MA plot
plotMA(Fit, Model = "Hybrid")
# Make PCA plot
FnPCA(Fit$Hybrid_Fit)
# FDR
FDs <- sum(Fit$Hybrid_Fit$Effects_df$padj[as.numeric(Fit$Hybrid_Fit$Effects_df$XF) <= 50] < 0.05)
Ds <- sum(Fit$Hybrid_Fit$Effects_df$padj < 0.05)
FDR <- FDs/Ds
FDR
# Power
TDs <- sum(Fit$Hybrid_Fit$Effects_df$padj[as.numeric(Fit$Hybrid_Fit$Effects_df$XF) > 50] < 0.05)
Power <- TDs/50
Power
colnames(Fit$Data_lists$Fast_df)
names(Fit$Data_lists$Fast_df)
Fit$Data_lists$Fast_df
# Load bakR
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
# Simulate data
sim <- Simulate_bakRData(100, nreps = 2)
# Analyze with MLE implementation
Fit <- bakRFit(sim$bakRData)
# Features that made it past filtering
XFs <- unique(Fit$Fast_Fit$Effects_df$XF)
# Simulated truth
sim_truth <- sim$sim_list
# Simulated logit(fraction news) from features making it past filtering
true_fn <- sim_truth$Fn_rep_sim$Logit_fn[sim_truth$Fn_rep_sim$Feature_ID %in% XFs]
# simulated L2FC(kdeg) from features making it past filtering
true_L2FC <- sim_truth$Effect_sim$L2FC_kdeg[sim_truth$Effect_sim$Feature_ID %in% XFs]
# Estimated logit(fraction news)
est_fn <- Fit$Fast_Fit$Fn_Estimates$logit_fn
# Estimated L2FC(kdeg)
est_L2FC <- Fit$Fast_Fit$Effects_df$L2FC_kdeg
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
# Load bakR
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
# Simulate data
sim <- Simulate_bakRData(100, nreps = 2)
# Analyze with MLE implementation
Fit <- bakRFit(sim$bakRData)
# Run Hybrid implementation
# Use Stan to estimate mutation rates from start
Fit <- bakRFit(Fit, HybridFit = TRUE)
#library(rstan)
options(mc.cores = parallel::detectCores())
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 2, iter = 3000, warmup = 1000)
devtools::document()
# Load bakR
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
# Simulate data
sim <- Simulate_bakRData(100, nreps = 2)
# Analyze with MLE implementation
Fit <- bakRFit(sim$bakRData)
# Features that made it past filtering
XFs <- unique(Fit$Fast_Fit$Effects_df$XF)
# Simulated truth
sim_truth <- sim$sim_list
# Simulated logit(fraction news) from features making it past filtering
true_fn <- sim_truth$Fn_rep_sim$Logit_fn[sim_truth$Fn_rep_sim$Feature_ID %in% XFs]
# simulated L2FC(kdeg) from features making it past filtering
true_L2FC <- sim_truth$Effect_sim$L2FC_kdeg[sim_truth$Effect_sim$Feature_ID %in% XFs]
# Estimated logit(fraction news)
est_fn <- Fit$Fast_Fit$Fn_Estimates$logit_fn
# Estimated L2FC(kdeg)
est_L2FC <- Fit$Fast_Fit$Effects_df$L2FC_kdeg
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
# Compare L2FC(kdeg) estimate to truth
plot(true_L2FC, est_L2FC)
abline(0,1, col = "red")
# Make Volcano plot
plotVolcano(Fit$Fast_Fit)
# Make MA plot
plotMA(Fit, Model = "MLE")
# Make PCA plot
FnPCA(Fit$Fast_Fit)
# Make kdeg PCA
FnPCA(Fit$Fast_Fit, log_kdeg =  TRUE)
# Use Stan to estimate mutation rates
Fit <- bakRFit(Fit, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 5, low_reads = 50, high_reads = 10000)
# Estimated logit(fraction news)
est_fn <- Fit$Fast_Fit$Fn_Estimates$logit_fn
# Estimated L2FC(kdeg)
est_L2FC <- Fit$Fast_Fit$Effects_df$L2FC_kdeg
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
# Compare L2FC(kdeg) estimate to truth
plot(true_L2FC, est_L2FC)
abline(0,1, col = "red")
# Make Volcano plot
plotVolcano(Fit$Fast_Fit)
# Make MA plot
plotMA(Fit, Model = "MLE")
# Make PCA plot
FnPCA(Fit$Fast_Fit)
# Make kdeg PCA
FnPCA(Fit$Fast_Fit, log_kdeg =  TRUE)
devtools::document()
devtools::document()
# Load bakR
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
# Simulate data
sim <- Simulate_bakRData(100, nreps = 2)
# Simulate data
sim <- Simulate_bakRData(100, nreps = 3)
# Simulate data
sim <- Simulate_bakRData(100, nreps = 2)
# Analyze with MLE implementation
Fit <- bakRFit(sim$bakRData)
# Features that made it past filtering
XFs <- unique(Fit$Fast_Fit$Effects_df$XF)
# Simulated truth
sim_truth <- sim$sim_list
# Simulated logit(fraction news) from features making it past filtering
true_fn <- sim_truth$Fn_rep_sim$Logit_fn[sim_truth$Fn_rep_sim$Feature_ID %in% XFs]
# simulated L2FC(kdeg) from features making it past filtering
true_L2FC <- sim_truth$Effect_sim$L2FC_kdeg[sim_truth$Effect_sim$Feature_ID %in% XFs]
# Estimated logit(fraction news)
est_fn <- Fit$Fast_Fit$Fn_Estimates$logit_fn
# Estimated L2FC(kdeg)
est_L2FC <- Fit$Fast_Fit$Effects_df$L2FC_kdeg
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
class(Fit$Fast_Fit)
# Load bakR
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
# Make Volcano plot
plotVolcano(Fit$Fast_Fit)
# Make MA plot
plotMA(Fit, Model = "MLE")
devtools::document()
devtools::document()
# Load bakR
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
# Simulate data
sim <- Simulate_bakRData(100, nreps = 2)
# Analyze with MLE implementation
Fit <- bakRFit(sim$bakRData)
# Features that made it past filtering
XFs <- unique(Fit$Fast_Fit$Effects_df$XF)
# Simulated truth
sim_truth <- sim$sim_list
# Simulated logit(fraction news) from features making it past filtering
true_fn <- sim_truth$Fn_rep_sim$Logit_fn[sim_truth$Fn_rep_sim$Feature_ID %in% XFs]
# simulated L2FC(kdeg) from features making it past filtering
true_L2FC <- sim_truth$Effect_sim$L2FC_kdeg[sim_truth$Effect_sim$Feature_ID %in% XFs]
# Estimated logit(fraction news)
est_fn <- Fit$Fast_Fit$Fn_Estimates$logit_fn
# Estimated L2FC(kdeg)
est_L2FC <- Fit$Fast_Fit$Effects_df$L2FC_kdeg
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
# Use Stan to estimate mutation rates
Fit <- bakRFit(Fit, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 5, low_reads = 50, high_reads = 10000)
# Use Stan to estimate mutation rates from start
Fit <- bakRFit(sim$bakRData, StanRateEst = TRUE, RateEst_size = 5, low_reads = 50, high_reads = 10000)
# Estimated logit(fraction news)
est_fn <- Fit$Fast_Fit$Fn_Estimates$logit_fn
# Estimated L2FC(kdeg)
est_L2FC <- Fit$Fast_Fit$Effects_df$L2FC_kdeg
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
setwd("G:/Shared drives/Matthew_Simon/IWV/bakR_Paper/Data/Real_Data/DCP2/")
cB <- readRDS("cB_DCP2.rds")
unique(cB$sample)
unique(cB$sample[order(cB$sample, decreasing = TRUE)])
rm(Fit)
rm(sim)
rm(sim_truth)
cB <- cB[order(cB$sample, decreasing = TRUE),]
unique(cB$sample)
row.names(metadf) <- unique(cB$sample)
bakRData <- bakRData(cB, metadf)
Fit <- bakRFit(bakRData)
metadf
metadf <- data.frame(tl = c(0, 2, 2, 0, 2, 2),
Exp_ID = c(1, 1, 1, 2, 2, 2))
row.names(metadf) <- unique(cB$sample)
metadf
bakRData <- bakRData(cB, metadf)
Fit <- bakRFit(bakRData)
XF_subsamp <- sample(Fit$Fast_Fit$Effects_df$XF, size = 10)
cB_small <- cB[cB$XF %in% XF_subsamp,]
nrow(cB_small)
XF_subsamp <- sample(Fit$Fast_Fit$Effects_df$XF, size = 10)
cB_small <- cB[cB$XF %in% XF_subsamp,]
nrow(cB_small)
XF_subsamp <- sample(Fit$Fast_Fit$Effects_df$XF, size = 10)
cB_small <- cB[cB$XF %in% XF_subsamp,]
nrow(cB_small)
XF_subsamp <- sample(Fit$Fast_Fit$Effects_df$XF, size = 10)
cB_small <- cB[cB$XF %in% XF_subsamp,]
nrow(cB_small)
cB_small
cB_small <- cB_small %>%
group_by(sample, nT, XF, TC) %>%
summarise(n = sum(n))
library(magrittr)
cB_small <- cB_small %>%
dplyr::group_by(sample, nT, XF, TC) %>%
dplyr::summarise(n = sum(n))
nrow(cB_small)
getwd()
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
usethis::use_data(cB_small)
usethis::use_data(metadf)
devtools::load_all()
data(cB_small)
data(metadf)
cB_small
metadf
unique(cB_small$sample)
cB_small <- cB_small[order(cB_small$sample, decreasing = TRUE),]
unique(cB_small$sample)
usethis::use_data(cB_small)
devtools::load_all()
data(cB_small)
cB_small$sample
unique(cB_small$sample)
nrow(cB_small)
devtools::check()
setwd("C:/Users/isaac/Documents/Simon_Lab/ppcseq/")
devtools::check()
devtools::check()
?capture.output
?sd
?stats::var
# Load bakR
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
# Simulate data
sim <- Simulate_bakRData(100, nreps = 2)
# Analyze with MLE implementation
Fit <- bakRFit(sim$bakRData)
# Features that made it past filtering
XFs <- unique(Fit$Fast_Fit$Effects_df$XF)
# Simulated truth
sim_truth <- sim$sim_list
# Simulated logit(fraction news) from features making it past filtering
true_fn <- sim_truth$Fn_rep_sim$Logit_fn[sim_truth$Fn_rep_sim$Feature_ID %in% XFs]
# simulated L2FC(kdeg) from features making it past filtering
true_L2FC <- sim_truth$Effect_sim$L2FC_kdeg[sim_truth$Effect_sim$Feature_ID %in% XFs]
# Estimated logit(fraction news)
est_fn <- Fit$Fast_Fit$Fn_Estimates$logit_fn
# Estimated L2FC(kdeg)
est_L2FC <- Fit$Fast_Fit$Effects_df$L2FC_kdeg
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
# Load bakR
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
# Simulate data
sim <- Simulate_bakRData(100, nreps = 2)
# Analyze with MLE implementation
Fit <- bakRFit(sim$bakRData)
# Features that made it past filtering
XFs <- unique(Fit$Fast_Fit$Effects_df$XF)
# Simulated truth
sim_truth <- sim$sim_list
# Simulated logit(fraction news) from features making it past filtering
true_fn <- sim_truth$Fn_rep_sim$Logit_fn[sim_truth$Fn_rep_sim$Feature_ID %in% XFs]
# simulated L2FC(kdeg) from features making it past filtering
true_L2FC <- sim_truth$Effect_sim$L2FC_kdeg[sim_truth$Effect_sim$Feature_ID %in% XFs]
# Estimated logit(fraction news)
est_fn <- Fit$Fast_Fit$Fn_Estimates$logit_fn
# Estimated L2FC(kdeg)
est_L2FC <- Fit$Fast_Fit$Effects_df$L2FC_kdeg
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
bquote(-log[10](p[adj]))
