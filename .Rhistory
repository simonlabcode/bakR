summarise(L2FC = avg_mean[MT == 2] - avg_mean[MT == 1],
se = sqrt(sum(avg_sd^2))) %>% ungroup() %>%
mutate(pval = 2*dnorm(-abs(L2FC/se)),
padj = stats::p.adjust(pval, method = "BH"))
hist(L2FC_kdeg$L2FC)
devtools::load_all()
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
simdat <- Simulate_bakRData(500, nreps = 2)
simdat$bakRData$metadf
metadf <- simdat$bakRData$metadf
metadf[,7] <- c(60, 2)
old_metadf <- simdat$bakRData$metadf
metadf <- data.frame(tl = c(metadf$tl, 60),
Exp_ID = c(metadf$Exp_ID, 2))
metadf
samp_list <- 1:nrow(metadf)
rep_list <- metadf[samp_list,] %>% dplyr::mutate(ctl = ifelse(tl == 0, 0, 1)) %>%
dplyr::group_by(ctl, Exp_ID) %>% dplyr::mutate(r_id = 1:length(tl)) %>% dplyr::ungroup() %>% dplyr::select(r_id)
rep_list
rep_list <- rep_list$r_id
metadf <- metadf[samp_list, ] %>% dplyr::mutate(ctl = ifelse(tl == 0, 0, 1)) %>%
dplyr::group_by(ctl, Exp_ID) %>% dplyr::mutate(r_id = 1:length(tl)) %>% dplyr::ungroup()
metadf
simdat <- Simulate_bakRData(500, nreps = 3)
simdat <- Simulate_bakRData(500, nreps = 3)
simbakR <- simdat$bakRData
simcB <- simbakR$cB
unique(simcB$sample)
simbakR$metadf
row.names(simbakR$metadf)
## Remove sample "1"
simcB <- simcB[simcB$sample != "1",]
simmeta <- simbakR$metadf[2:8,]
simmeta
newbakR <- bakRData(simcB, simmeta)
dataprocess <- cBprocess(newbakR)
dataprocess$Stan_data
c(2, 3)
reps <- c(2, 3)
seq(from = 1, to = c(2, 3), by = 1)
c(sapply(reps, function(x) seq(1, x)))
unlist(sapply(reps, function(x) seq(1, x)))
?sapply
seq(from = 1, to = 2, each = reps)
rep(1:2, times = reps)
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
devtools::load_all()
Fit <- bakRFit(newbakR)
devtools::load_all()
Fit <- bakRFit(newbakR)
plotVolcano(Fit$Fast_Fit)
Fit$Fast_Fit$Regularized_ests
Fit$Fast_Fit$Fn_Estimates
simdat
simdat$sim_list$Fn_rep_sim
Fnsim <- simdat$sim_list$Fn_rep_sim
Fnsim
Fnsim <- Fnsim[!(Fnsim$Exp_ID ==1 & Fnsim$Replicate == 1),]
plot(Fnsim$Logit_fn, Fit$Fast_Fit$Fn_Estimates$logit_fn)
nrow(Fnsim)
nrow(Fit$Fast_Fit$Fn_Estimates)
Fnsim
Fnsim <- Fnsim[Fnsim$Feature_ID %in% Fit$Fast_Fit$Effects_df$XF,]
plot(Fnsim$Logit_fn, Fit$Fast_Fit$Fn_Estimates$logit_fn)
abline(0,1)
## What if I use StanRateEst
Fit <- bakRFit(Fit, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 7)
warnings()
test1 <- data.frame(pnew = c(0.05, 0.05, 0.05, 0.05, 0.05, 0.05), R = rep(1:3, times = 2), E = rep(1:2, each = 3))
test1
test2 <- data.frame(R = c(1, 2, 1, 2, 3), E = c(1, 1, 2, 2, 2))
left_join(test1, test2)
dplyr::left_join(test1, test2)
dplyr::right_join(test1, test2)
## What if I use StanRateEst
Fit <- bakRFit(Fit, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 7)
devtools::load_all()
## What if I use StanRateEst
Fit <- bakRFit(Fit, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 7)
warnings()
devtools::load_all()
## What if I use StanRateEst
Fit <- bakRFit(Fit, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 7)
devtools::load_all()
## What if I use StanRateEst
Fit <- bakRFit(Fit, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 10)
?right_join
devtools::load_all()
## What if I use StanRateEst
Fit <- bakRFit(Fit, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 10)
plot(Fnsim$Logit_fn, Fit$Fast_Fit$Fn_Estimates$logit_fn)
abline(0,1)
### Testing edited Hybrid analysis
Fit <- bakRFit(Fit, HybridFit = TRUE)
plotVolcano(Fit$Hybrid_Fit)
plot(Fit$Fast_Fit$Effects_df$effect/Fit$Fast_Fit$Effects_df$se,
Fit$Hybrid_Fit$Effects_df$effect/Fit$Hybrid_Fit$Effects_df$se)
abline(0,1)
test1 <- data.frame(a = c(1, 2, 3), b = c(1, 1, 2, 2, 2), c = c(1, 2, 1, 2, 3))
test1 <- data.frame(a = c(1, 2, 3, 4, 5), b = c(1, 1, 2, 2, 2), c = c(1, 2, 1, 2, 3))
test1
test1 <- data.frame(a = c(1, 2, 3, 4, 5), b = c(1, 1, 1, 1, 2), c = c(1, 1, 2, 2, 1))
test1
test2 <- data.frame(b = 1, c = 1)
right_join(test1, test2)
dplyr::right_join(test1, test2, by = c("b", "c"))
devtools::load_all()
devtools::load_all()
### Testing edited Hybrid analysis
Fit <- bakRFit(Fit, HybridFit = TRUE)
simdat <- Simulate_bakRData(250, nreps = 3)
simbakR <- simdat$bakRData
simcB <- simbakR$cB
## Remove sample "1"
simcB <- simcB[simcB$sample != "1",]
simmeta <- simbakR$metadf[2:8,]
newbakR <- bakRData(simcB, simmeta)
dataprocess <- cBprocess(newbakR)
dataprocess$Stan_data
Fit <- bakRFit(newbakR)
## What if I use StanRateEst
Fit <- bakRFit(Fit, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 7)
devtools::load_all()
Fit$Data_lists$Stan_data$nrep_vect
### Testing edited Hybrid analysis
Fit <- bakRFit(Fit, HybridFit = TRUE)
plotVolcano(Fit$Hybrid_Fit)
plot(Fit$Fast_Fit$Effects_df$effect/Fit$Fast_Fit$Effects_df$se,
Fit$Hybrid_Fit$Effects_df$effect/Fit$Hybrid_Fit$Effects_df$se)
abline(0,1)
plot(Fit$Fast_Fit$Fn_Estimates$logit_fn, Fit$Hybrid_Fit$Fn_Estimates$logit_fn)
abline(0,1)
### Testing MCMC analysis
Fit <- bakRFit(Fit, StanFit = TRUE)
simdat <- Simulate_bakRData(250, nreps = 3, pnew = 0.02)
simbakR <- simdat$bakRData
simcB <- simbakR$cB
## Remove sample "1"
simcB <- simcB[simcB$sample != "1",]
simmeta <- simbakR$metadf[2:8,]
newbakR <- bakRData(simcB, simmeta)
dataprocess <- cBprocess(newbakR)
dataprocess$Stan_data
Fit <- bakRFit(newbakR)
Fit$Fast_Fit
Fit <- bakRFit(newbakR)
# Check accuracy
Fnsim <- simdat$sim_list$Fn_rep_sim
Fnsim <- Fnsim[!(Fnsim$Exp_ID ==1 & Fnsim$Replicate == 1),]
Fnsim <- Fnsim[Fnsim$Feature_ID %in% Fit$Fast_Fit$Effects_df$XF,]
plot(Fnsim$Logit_fn, Fit$Fast_Fit$Fn_Estimates$logit_fn)
abline(0,1)
newbakR
devtools::load_all()
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
simdat <- Simulate_bakRData(250, nreps = 3, pnew = 0.02)
simbakR <- simdat$bakRData
simdat <- Simulate_bakRData(250, nreps = 3, p_new = 0.02)
simbakR <- simdat$bakRData
simcB <- simbakR$cB
## Remove sample "1"
simcB <- simcB[simcB$sample != "1",]
simmeta <- simbakR$metadf[2:8,]
newbakR <- bakRData(simcB, simmeta)
dataprocess <- cBprocess(newbakR)
Fit <- bakRFit(newbakR)
## What if I use StanRateEst
Fit <- bakRFit(Fit, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 7)
plot(Fnsim$Logit_fn, Fit$Fast_Fit$Fn_Estimates$logit_fn)
abline(0,1)
# Check accuracy
Fnsim <- simdat$sim_list$Fn_rep_sim
Fnsim <- Fnsim[!(Fnsim$Exp_ID ==1 & Fnsim$Replicate == 1),]
Fnsim <- Fnsim[Fnsim$Feature_ID %in% Fit$Fast_Fit$Effects_df$XF,]
plot(Fnsim$Logit_fn, Fit$Fast_Fit$Fn_Estimates$logit_fn)
abline(0,1)
### Testing MCMC analysis
Fit <- bakRFit(Fit, StanFit = TRUE)
plot(Fit$Stan_Fit$Effects_df$effect/Fit$Stan_Fit$Effects_df$se,
Fit$Hybrid_Fit$Effects_df$effect/Fit$Hybrid_Fit$Effects_df$se)
plot(Fit$Fast_Fit$Effects_df$effect/Fit$Fast_Fit$Effects_df$se,
Fit$Stan_Fit$Effects_df$effect/Fit$Stan_Fit$Effects_df$se)
abline(0,1)
plot(Fit$Fast_Fit$Fn_Estimates$logit_fn, Fit$Hybrid_Fit$Fn_Estimates$logit_fn)
abline(0,1)
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
simdat <- Simulate_bakRData(500, nreps = 3)
simdat <- Simulate_bakRData(250, nreps = 3, p_new = 0.02)
Fit <- bakRFit(simdat$bakRData)
Fit <- bakRFit(simdat$bakRData, StanRateEst = TRUE)
Fit <- bakRFit(simdat$bakRData, StanRateEst = TRUE, RateEst_size = 5)
rlang::last_error()
devtools::load_all()
Fit <- bakRFit(simdat$bakRData, StanRateEst = TRUE, RateEst_size = 5)
devtools::load_all()
Fit <- bakRFit(simdat$bakRData, StanRateEst = TRUE, RateEst_size = 5)
truedf
rep_actual
nrep_mut
nMt
nMT
nreps
unlist(sapply(c(3, 3), function(x) seq(1, x)))
unlist(sapply(c(3, 2), function(x) seq(1, x)))
unlist(sapply(c(2, 2), function(x) seq(1, x)))
sapply(c(2, 2), function(x) seq(1, x))
sapply(c(2, 3), function(x) seq(1, x))
lapply(c(2, 2), function(x) seq(1, x))
devtools::load_all()
Fit <- bakRFit(simdat$bakRData, StanRateEst = TRUE, RateEst_size = 5)
devtools::load_all()
Fit <- bakRFit(simdat$bakRData, StanRateEst = TRUE, RateEst_size = 5)
plotVolcano(Fit$Fast_Fit)
devtools::load_all()
simdat <- Simulate_bakRData(250, nreps = 3, p_new = 0.02)
simbakR <- simdat$bakRData
simcB <- simbakR$cB
## Remove sample "1"
simcB <- simcB[simcB$sample != "1",]
simmeta <- simbakR$metadf[2:8,]
newbakR <- bakRData(simcB, simmeta)
dataprocess <- cBprocess(newbakR)
dataprocess$Stan_data
Fit <- bakRFit(newbakR)
# Check accuracy
Fnsim <- simdat$sim_list$Fn_rep_sim
Fnsim <- Fnsim[!(Fnsim$Exp_ID ==1 & Fnsim$Replicate == 1),]
Fnsim <- Fnsim[Fnsim$Feature_ID %in% Fit$Fast_Fit$Effects_df$XF,]
plot(Fnsim$Logit_fn, Fit$Fast_Fit$Fn_Estimates$logit_fn)
abline(0,1)
## What if I use StanRateEst
Fit <- bakRFit(Fit, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 7)
plot(Fnsim$Logit_fn, Fit$Fast_Fit$Fn_Estimates$logit_fn)
abline(0,1)
### Testing edited Hybrid analysis
Fit <- bakRFit(Fit, HybridFit = TRUE)
plotVolcano(Fit$Hybrid_Fit)
plot(Fit$Fast_Fit$Effects_df$effect/Fit$Fast_Fit$Effects_df$se,
Fit$Hybrid_Fit$Effects_df$effect/Fit$Hybrid_Fit$Effects_df$se)
abline(0,1)
plot(Fit$Fast_Fit$Fn_Estimates$logit_fn, Fit$Hybrid_Fit$Fn_Estimates$logit_fn)
abline(0,1)
simdat <- Simulate_bakRData(250, nreps = 3, p_new = 0.02)
Fit <- bakRFit(simdat$bakRData, StanRateEst = TRUE, RateEst_size = 5)
plotVolcano(Fit$Hybrid_Fit)
### Testing edited Hybrid analysis
Fit <- bakRFit(Fit, HybridFit = TRUE)
plotVolcano(Fit$Hybrid_Fit)
plot(Fit$Fast_Fit$Effects_df$effect/Fit$Fast_Fit$Effects_df$se,
Fit$Hybrid_Fit$Effects_df$effect/Fit$Hybrid_Fit$Effects_df$se)
abline(0,1)
plot(Fit$Fast_Fit$Fn_Estimates$logit_fn, Fit$Hybrid_Fit$Fn_Estimates$logit_fn)
abline(0,1)
simdat <- Simulate_bakRData(250, nreps = 3, p_new = 0.02)
simbakR <- simdat$bakRData
Fit_symm <- bakRFit(simbakR)
simcB <- simbakR$cB
## Remove sample "1"
simcB <- simcB[simcB$sample != "1",]
simmeta <- simbakR$metadf[2:8,]
newbakR <- bakRData(simcB, simmeta)
dataprocess <- cBprocess(newbakR)
Fit <- bakRFit(newbakR)
nrow(Fit_symm$Fast_Fit$Effects_df)
nrow(Fit_symm$Fast_Fit$Effects_df)
nrow(Fit$Fast_Fit$Effects_df)
simmeta
plot(Fit$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit$Fast_Fit$Regularized_ests$Exp_ID == 1],
Fit_symm$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit_symm$Fast_Fit$Regularized_ests$Exp_ID == 1])
abline(0,1)
Fit_symm <- bakRFit(Fit_symm, HybridFit = TRUE)
Fit <- bakRFit(Fit, HybridFit = TRUE)
plot(Fit$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit$Fast_Fit$Regularized_ests$Exp_ID == 2],
Fit_symm$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit_symm$Fast_Fit$Regularized_ests$Exp_ID == 2])
abline(0,1)
plot(Fit$Hybrid_Fit$Kdeg_df$kdeg_sd[Fit$Hybrid_Fit$Kdeg_df$Exp_ID == 1],
Fit_symm$Hybrid_Fit$Kdeg_df$kdeg_sd[Fit_symm$Hybrid_Fit$Kdeg_df$Exp_ID == 1])
abline(0,1)
plot(Fit$Hybrid_Fit$Effects_df$L2FC_kd_sd,
Fit_symm$Hybrid_Fit$Effects_df$L2FC_kd_sd)
abline(0,1)
simdat <- Simulate_bakRData(250, nreps = 5, p_new = 0.02)
simbakR <- simdat$bakRData
Fit_symm <- bakRFit(simbakR)
Fit_symm <- bakRFit(Fit_symm, HybridFit = TRUE)
simbakR$metadf
## Remove sample "1"
simcB <- simcB[!(simcB$sample %in% c("1", "2", "3")), ]
simmeta <- simbakR$metadf[4:nrow(simbakR$metadf),]
simmeta
newbakR <- bakRData(simcB, simmeta)
unique(simcB$sample)
simbakR$cB
simcB <- simbakR$cB
unique(simcB$sample)
## Remove sample "1"
simcB <- simcB[simcB$sample != "1" & simcB$sample != "2" & simcB$sample != "3", ]
simcB
unique(simcB$sample)
simmeta <- simbakR$metadf[4:nrow(simbakR$metadf),]
newbakR <- bakRData(simcB, simmeta)
dataprocess <- cBprocess(newbakR)
Fit <- bakRFit(newbakR)
Fit <- bakRFit(Fit, HybridFit = TRUE)
plot(Fit$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit$Fast_Fit$Regularized_ests$Exp_ID == 1],
Fit_symm$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit_symm$Fast_Fit$Regularized_ests$Exp_ID == 1])
?Simulate_bakRData
simdat <- Simulate_bakRData(250, nreps = 5, p_new = 0.02, kslog_c = 1.2)
simbakR <- simdat$bakRData
Fit_symm <- bakRFit(simbakR, totcut = 10)
Fit_symm <- bakRFit(Fit_symm, HybridFit = TRUE)
simcB <- simbakR$cB
## Remove sample "1"
simcB <- simcB[simcB$sample != "1" & simcB$sample != "2" & simcB$sample != "3", ]
simmeta <- simbakR$metadf[4:nrow(simbakR$metadf),]
newbakR <- bakRData(simcB, simmeta)
Fit <- bakRFit(newbakR)
Fit <- bakRFit(Fit, HybridFit = TRUE)
plot(Fit$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit$Fast_Fit$Regularized_ests$Exp_ID == 1],
Fit_symm$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit_symm$Fast_Fit$Regularized_ests$Exp_ID == 1])
abline(0,1)
Fit <- bakRFit(newbakR, totcut = 10)
Fit <- bakRFit(Fit, HybridFit = TRUE)
plot(Fit$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit$Fast_Fit$Regularized_ests$Exp_ID == 1],
Fit_symm$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit_symm$Fast_Fit$Regularized_ests$Exp_ID == 1])
abline(0,1)
plot(Fit$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit$Fast_Fit$Regularized_ests$Exp_ID == 2],
Fit_symm$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit_symm$Fast_Fit$Regularized_ests$Exp_ID == 2])
abline(0,1)
plot(Fit$Hybrid_Fit$Kdeg_df$kdeg_sd[Fit$Hybrid_Fit$Kdeg_df$Exp_ID == 1],
Fit_symm$Hybrid_Fit$Kdeg_df$kdeg_sd[Fit_symm$Hybrid_Fit$Kdeg_df$Exp_ID == 1])
abline(0,1)
plot(Fit$Hybrid_Fit$Effects_df$L2FC_kd_sd,
Fit_symm$Hybrid_Fit$Effects_df$L2FC_kd_sd)
abline(0,1)
plot(Fit$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit$Fast_Fit$Regularized_ests$Exp_ID == 1],
Fit_symm$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit_symm$Fast_Fit$Regularized_ests$Exp_ID == 1])
abline(0,1)
devtools::load_all()
devtools::load_all()
?Simulate_bakRdata
devtools::load_all()
devtools::document()
?Simulate_bakRdata
?bakRFit
?bakRData
?Simulate_bakRData
devtools::document()
devtools::document()
?fast_analysis
devtools::document()
?bakRFit
?fast_analysis
?TL_stan
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
simdat <- Simulate_bakRData(500, nreps = 3)
simdat <- Simulate_bakRData(250, nreps = 3, p_new = 0.02)
simdat <- Simulate_bakRData(250, nreps = 5, p_new = 0.02, kslog_c = 1.2)
simbakR <- simdat$bakRData
simcB <- simbakR$cB
## Remove sample "1"
simcB <- simcB[simcB$sample != "1" & simcB$sample != "2" & simcB$sample != "3", ]
simmeta <- simbakR$metadf[4:nrow(simbakR$metadf),]
newbakR <- bakRData(simcB, simmeta)
Fit <- bakRFit(newbakR, totcut = 10)
Fit <- bakRFit(Fit, HybridFit = TRUE)
simmeta
## Remove sample "1"
simcB <- simcB[simcB$sample != "8" & simcB$sample != "9" & simcB$sample != "10", ]
simbakR$metadf
simmeta <- simbakR$metadf[c(4:7, 11:12),]
simmmeta
simmeta
newbakR <- bakRData(simcB, simmeta)
Fit2 <- bakRFit(newbakR, totcut = 10)
Fit2 <- bakRFit(Fit, HybridFit = TRUE)
XF_both <- intersect(Fit$Fast_Fit$Effects_df$XF, Fit2$Fast_Fit$Effects_df$XF)
length(XF_Both)
length(XF_both)
plot(Fit$Hybrid_Fit$Kdeg_df$kdeg_sd[Fit$Hybrid_Fit$Kdeg_df$Exp_ID == 1],
Fit2$Hybrid_Fit$Kdeg_df$kdeg_sd[Fit$Hybrid_Fit$Kdeg_df$Exp_ID == 1])
abline(0,1)
devtools::install()
test <- data.frame(test1 = c(1, 2, 3))
head(test)
?pt
devtools::install()
?as_tibble
?sd
devtools::document()
?NSSHeat
?as.data.frame
?pheatmap::pheatmap
devtools::load_all()
library(tidyverse)
library(DESeq2)
sim_data <- Simulate_bakRData(1000,
num_kd_DE = c(0, 200),
num_ks_DE = c(0, 200))
sim_data <- Simulate_bakRData(1000,
num_kd_DE = c(0, 200),
num_ks_DE = c(0, 200))
bakRData <- sim_data$bakRData
Fit <- bakRFit(bakRData, pnew = rep(0.05, times = 6), pold = 0.001, NSS = TRUE)
Counts <- Fit$Data_lists$Count_Matrix
conditions_s4U <- as.factor(rep(c("ref", "exp"), each = 3))
conditions_ctl <- as.factor(c("ref", "exp"))
conditions <- c(conditions_s4U, conditions_ctl)
colData <- data.frame(conditions = conditions)
library(bakR)
# Packages that are NOT automatically installed when bakR is installed
library(DESeq2)
library(pheatmap)
# Packages which are installed when bakR is installed
library(dplyr)
library(magrittr)
library(ggplot2)
library(stats)
# Set the seed for reproducibility
set.seed(123)
rownames(colData) <- colnames(Counts)
rownames(colData) <- colnames(Counts)
dds <- DESeqDataSetFromMatrix(countData = Counts,
colData = colData,
design = ~conditions)
ddso <- DESeq(dds)
ddso <- DESeq(dds)
reso <- results(ddso, contrast = c("conditions", "exp", "ref"))
reso <- as.data.frame(reso)
DE_df <- data.frame(XF = row.names(reso),
log2FoldChange = reso$log2FoldChange,
stat = reso$stat,
padj = reso$padj)
DE_df$XF
as_tibble(DE_df)
NSSheatmap <- NSSHeat(Fit, DE_df)
devtools::load_all()
NSSheatmap <- NSSHeat(Fit, DE_df)
NSS_eff_DE
DE_XF
sum(DE_df$padj < 0.05)
DE_df
DE_reso
DE_df
devtools::install()
devtools::load_all()
devtools::load_all()
devtools::install()
devtools::load_all()
library(tidyverse)
library(DESeq2)
# Simulate a nucleotide recoding dataset
sim_data <- Simulate_bakRData(1000,
num_kd_DE = c(0, 200),
num_ks_DE = c(0, 200))
# This will simulate 1000 features, 2 experimental conditions
# and 3 replicates for each experimental condition.
# See ?Simulate_bakRData for details regarding tunable parameters
# Extract simulated bakRData object
bakRData <- sim_data$bakRData
# Extract simualted ground truths
sim_truth <- sim_data$sim_list
## Run the efficient model
# We'll tell it what the mutation rates are just for efficiency's sake
# Major change: NSS is set to TRUE
Fit <- bakRFit(bakRData, pnew = rep(0.05, times = 6), pold = 0.001, NSS = TRUE)
# Get the count matrix from bakR
Counts <- Fit$Data_lists$Count_Matrix
# Experimental conditions for each sample
# There are 6 s4U treated samples (3 replicates of each condition)
# In addition, there are 2 -s4U control samples (1 for each condition)
## s4U conditions
# 1st three samples are reference (ref) samples
# Next three samples are experimental (exp) samples
conditions_s4U <- as.factor(rep(c("ref", "exp"), each = 3))
## -s4U control conditions
# 1st sample is reference, next is experimental
conditions_ctl <- as.factor(c("ref", "exp"))
# Combined s4U and -s4U control conditions
conditions <- c(conditions_s4U, conditions_ctl)
# Make the colData input for DESeq2
colData <- data.frame(conditions = conditions)
rownames(colData) <- colnames(Counts)
# Make DESeq2 data object
dds <- DESeqDataSetFromMatrix(countData = Counts,
colData = colData,
design = ~conditions)
# Fit DESeq2 model
ddso <- DESeq(dds)
# Extract results of experimental vs. reference comparison
reso <- results(ddso, contrast = c("conditions", "exp", "ref"))
# Convert to data frame
reso <- as.data.frame(reso)
# Make data frame
DE_df <- data.frame(XF = row.names(reso),
log2FoldChange = reso$log2FoldChange,
stat = reso$stat,
padj = reso$padj)
type(Fit$Fast_Fit$Effects_df$XF)
devtools::load_all()
NSSheatmap <- NSSHeat(Fit, DE_df)
pheatmap::pheatmap(NSSheatmap)
pheatmap::pheatmap(NSSheatmap, cluster_cols = FALSE, show_rownames = FALSE)
devtools::install()
devtools::load_all()
devtools::install()
devtools::check()
