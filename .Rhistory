Fit_symm$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit_symm$Fast_Fit$Regularized_ests$Exp_ID == 1])
abline(0,1)
Fit_symm <- bakRFit(Fit_symm, HybridFit = TRUE)
Fit <- bakRFit(Fit, HybridFit = TRUE)
plot(Fit$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit$Fast_Fit$Regularized_ests$Exp_ID == 2],
Fit_symm$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit_symm$Fast_Fit$Regularized_ests$Exp_ID == 2])
abline(0,1)
plot(Fit$Hybrid_Fit$Kdeg_df$kdeg_sd[Fit$Hybrid_Fit$Kdeg_df$Exp_ID == 1],
Fit_symm$Hybrid_Fit$Kdeg_df$kdeg_sd[Fit_symm$Hybrid_Fit$Kdeg_df$Exp_ID == 1])
abline(0,1)
plot(Fit$Hybrid_Fit$Effects_df$L2FC_kd_sd,
Fit_symm$Hybrid_Fit$Effects_df$L2FC_kd_sd)
abline(0,1)
simdat <- Simulate_bakRData(250, nreps = 5, p_new = 0.02)
simbakR <- simdat$bakRData
Fit_symm <- bakRFit(simbakR)
Fit_symm <- bakRFit(Fit_symm, HybridFit = TRUE)
simbakR$metadf
## Remove sample "1"
simcB <- simcB[!(simcB$sample %in% c("1", "2", "3")), ]
simmeta <- simbakR$metadf[4:nrow(simbakR$metadf),]
simmeta
newbakR <- bakRData(simcB, simmeta)
unique(simcB$sample)
simbakR$cB
simcB <- simbakR$cB
unique(simcB$sample)
## Remove sample "1"
simcB <- simcB[simcB$sample != "1" & simcB$sample != "2" & simcB$sample != "3", ]
simcB
unique(simcB$sample)
simmeta <- simbakR$metadf[4:nrow(simbakR$metadf),]
newbakR <- bakRData(simcB, simmeta)
dataprocess <- cBprocess(newbakR)
Fit <- bakRFit(newbakR)
Fit <- bakRFit(Fit, HybridFit = TRUE)
plot(Fit$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit$Fast_Fit$Regularized_ests$Exp_ID == 1],
Fit_symm$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit_symm$Fast_Fit$Regularized_ests$Exp_ID == 1])
?Simulate_bakRData
simdat <- Simulate_bakRData(250, nreps = 5, p_new = 0.02, kslog_c = 1.2)
simbakR <- simdat$bakRData
Fit_symm <- bakRFit(simbakR, totcut = 10)
Fit_symm <- bakRFit(Fit_symm, HybridFit = TRUE)
simcB <- simbakR$cB
## Remove sample "1"
simcB <- simcB[simcB$sample != "1" & simcB$sample != "2" & simcB$sample != "3", ]
simmeta <- simbakR$metadf[4:nrow(simbakR$metadf),]
newbakR <- bakRData(simcB, simmeta)
Fit <- bakRFit(newbakR)
Fit <- bakRFit(Fit, HybridFit = TRUE)
plot(Fit$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit$Fast_Fit$Regularized_ests$Exp_ID == 1],
Fit_symm$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit_symm$Fast_Fit$Regularized_ests$Exp_ID == 1])
abline(0,1)
Fit <- bakRFit(newbakR, totcut = 10)
Fit <- bakRFit(Fit, HybridFit = TRUE)
plot(Fit$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit$Fast_Fit$Regularized_ests$Exp_ID == 1],
Fit_symm$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit_symm$Fast_Fit$Regularized_ests$Exp_ID == 1])
abline(0,1)
plot(Fit$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit$Fast_Fit$Regularized_ests$Exp_ID == 2],
Fit_symm$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit_symm$Fast_Fit$Regularized_ests$Exp_ID == 2])
abline(0,1)
plot(Fit$Hybrid_Fit$Kdeg_df$kdeg_sd[Fit$Hybrid_Fit$Kdeg_df$Exp_ID == 1],
Fit_symm$Hybrid_Fit$Kdeg_df$kdeg_sd[Fit_symm$Hybrid_Fit$Kdeg_df$Exp_ID == 1])
abline(0,1)
plot(Fit$Hybrid_Fit$Effects_df$L2FC_kd_sd,
Fit_symm$Hybrid_Fit$Effects_df$L2FC_kd_sd)
abline(0,1)
plot(Fit$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit$Fast_Fit$Regularized_ests$Exp_ID == 1],
Fit_symm$Fast_Fit$Regularized_ests$sd_log_kdeg[Fit_symm$Fast_Fit$Regularized_ests$Exp_ID == 1])
abline(0,1)
devtools::load_all()
devtools::load_all()
?Simulate_bakRdata
devtools::load_all()
devtools::document()
?Simulate_bakRdata
?bakRFit
?bakRData
?Simulate_bakRData
devtools::document()
devtools::document()
?fast_analysis
devtools::document()
?bakRFit
?fast_analysis
?TL_stan
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
simdat <- Simulate_bakRData(500, nreps = 3)
simdat <- Simulate_bakRData(250, nreps = 3, p_new = 0.02)
simdat <- Simulate_bakRData(250, nreps = 5, p_new = 0.02, kslog_c = 1.2)
simbakR <- simdat$bakRData
simcB <- simbakR$cB
## Remove sample "1"
simcB <- simcB[simcB$sample != "1" & simcB$sample != "2" & simcB$sample != "3", ]
simmeta <- simbakR$metadf[4:nrow(simbakR$metadf),]
newbakR <- bakRData(simcB, simmeta)
Fit <- bakRFit(newbakR, totcut = 10)
Fit <- bakRFit(Fit, HybridFit = TRUE)
simmeta
## Remove sample "1"
simcB <- simcB[simcB$sample != "8" & simcB$sample != "9" & simcB$sample != "10", ]
simbakR$metadf
simmeta <- simbakR$metadf[c(4:7, 11:12),]
simmmeta
simmeta
newbakR <- bakRData(simcB, simmeta)
Fit2 <- bakRFit(newbakR, totcut = 10)
Fit2 <- bakRFit(Fit, HybridFit = TRUE)
XF_both <- intersect(Fit$Fast_Fit$Effects_df$XF, Fit2$Fast_Fit$Effects_df$XF)
length(XF_Both)
length(XF_both)
plot(Fit$Hybrid_Fit$Kdeg_df$kdeg_sd[Fit$Hybrid_Fit$Kdeg_df$Exp_ID == 1],
Fit2$Hybrid_Fit$Kdeg_df$kdeg_sd[Fit$Hybrid_Fit$Kdeg_df$Exp_ID == 1])
abline(0,1)
devtools::install()
test <- data.frame(test1 = c(1, 2, 3))
head(test)
?pt
devtools::install()
?as_tibble
?sd
devtools::document()
?NSSHeat
?as.data.frame
?pheatmap::pheatmap
devtools::load_all()
library(tidyverse)
library(DESeq2)
sim_data <- Simulate_bakRData(1000,
num_kd_DE = c(0, 200),
num_ks_DE = c(0, 200))
sim_data <- Simulate_bakRData(1000,
num_kd_DE = c(0, 200),
num_ks_DE = c(0, 200))
bakRData <- sim_data$bakRData
Fit <- bakRFit(bakRData, pnew = rep(0.05, times = 6), pold = 0.001, NSS = TRUE)
Counts <- Fit$Data_lists$Count_Matrix
conditions_s4U <- as.factor(rep(c("ref", "exp"), each = 3))
conditions_ctl <- as.factor(c("ref", "exp"))
conditions <- c(conditions_s4U, conditions_ctl)
colData <- data.frame(conditions = conditions)
library(bakR)
# Packages that are NOT automatically installed when bakR is installed
library(DESeq2)
library(pheatmap)
# Packages which are installed when bakR is installed
library(dplyr)
library(magrittr)
library(ggplot2)
library(stats)
# Set the seed for reproducibility
set.seed(123)
rownames(colData) <- colnames(Counts)
rownames(colData) <- colnames(Counts)
dds <- DESeqDataSetFromMatrix(countData = Counts,
colData = colData,
design = ~conditions)
ddso <- DESeq(dds)
ddso <- DESeq(dds)
reso <- results(ddso, contrast = c("conditions", "exp", "ref"))
reso <- as.data.frame(reso)
DE_df <- data.frame(XF = row.names(reso),
log2FoldChange = reso$log2FoldChange,
stat = reso$stat,
padj = reso$padj)
DE_df$XF
as_tibble(DE_df)
NSSheatmap <- NSSHeat(Fit, DE_df)
devtools::load_all()
NSSheatmap <- NSSHeat(Fit, DE_df)
NSS_eff_DE
DE_XF
sum(DE_df$padj < 0.05)
DE_df
DE_reso
DE_df
devtools::install()
devtools::load_all()
devtools::load_all()
devtools::install()
devtools::load_all()
library(tidyverse)
library(DESeq2)
# Simulate a nucleotide recoding dataset
sim_data <- Simulate_bakRData(1000,
num_kd_DE = c(0, 200),
num_ks_DE = c(0, 200))
# This will simulate 1000 features, 2 experimental conditions
# and 3 replicates for each experimental condition.
# See ?Simulate_bakRData for details regarding tunable parameters
# Extract simulated bakRData object
bakRData <- sim_data$bakRData
# Extract simualted ground truths
sim_truth <- sim_data$sim_list
## Run the efficient model
# We'll tell it what the mutation rates are just for efficiency's sake
# Major change: NSS is set to TRUE
Fit <- bakRFit(bakRData, pnew = rep(0.05, times = 6), pold = 0.001, NSS = TRUE)
# Get the count matrix from bakR
Counts <- Fit$Data_lists$Count_Matrix
# Experimental conditions for each sample
# There are 6 s4U treated samples (3 replicates of each condition)
# In addition, there are 2 -s4U control samples (1 for each condition)
## s4U conditions
# 1st three samples are reference (ref) samples
# Next three samples are experimental (exp) samples
conditions_s4U <- as.factor(rep(c("ref", "exp"), each = 3))
## -s4U control conditions
# 1st sample is reference, next is experimental
conditions_ctl <- as.factor(c("ref", "exp"))
# Combined s4U and -s4U control conditions
conditions <- c(conditions_s4U, conditions_ctl)
# Make the colData input for DESeq2
colData <- data.frame(conditions = conditions)
rownames(colData) <- colnames(Counts)
# Make DESeq2 data object
dds <- DESeqDataSetFromMatrix(countData = Counts,
colData = colData,
design = ~conditions)
# Fit DESeq2 model
ddso <- DESeq(dds)
# Extract results of experimental vs. reference comparison
reso <- results(ddso, contrast = c("conditions", "exp", "ref"))
# Convert to data frame
reso <- as.data.frame(reso)
# Make data frame
DE_df <- data.frame(XF = row.names(reso),
log2FoldChange = reso$log2FoldChange,
stat = reso$stat,
padj = reso$padj)
type(Fit$Fast_Fit$Effects_df$XF)
devtools::load_all()
NSSheatmap <- NSSHeat(Fit, DE_df)
pheatmap::pheatmap(NSSheatmap)
pheatmap::pheatmap(NSSheatmap, cluster_cols = FALSE, show_rownames = FALSE)
devtools::install()
devtools::load_all()
devtools::install()
devtools::check()
?rstan::sampling
devtools::load_all()
devtools::document()
?TL_stan
devtools::document()
sim <- Simulate_bakRData(100, nreps = 2)
Fit <- bakRFit(sim$bakRData)
devtools::load_all()
devtools::load_all()
Fit <- bakRFit(Fit, HybridFit = TRUE)
plotVolcano(Fit$Hybrid_Fit)
devtools::document()
devtools::document()
devtools::load_all()
Fit <- bakRFit(Fit, HybridFit = TRUE)
devtools::document()
?cBprocess
devtools::document()
?TL_stan
# Load bakR
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
# Simulate data
sim <- Simulate_bakRData(100, nreps = 2)
# Analyze with MLE implementation
Fit <- bakRFit(sim$bakRData)
# Simulated truth
sim_truth <- sim$sim_list
# Features that made it past filtering
XFs <- unique(Fit$Fast_Fit$Effects_df$XF)
# Simulated logit(fraction news) from features making it past filtering
true_fn <- sim_truth$Fn_rep_sim$Logit_fn[sim_truth$Fn_rep_sim$Feature_ID %in% XFs]
# Estimated logit(fraction news)
est_fn <- Fit$Fast_Fit$Fn_Estimates$logit_fn
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
# Make Volcano plot
plotVolcano(Fit$Fast_Fit)
# Make MA plot
plotMA(Fit, Model = "MLE")
# Make PCA plot
FnPCA(Fit$Fast_Fit)
# Make kdeg PCA
FnPCA(Fit, log_kdeg =  TRUE)
# Make kdeg PCA
FnPCA(Fit$Fast_Fit, log_kdeg =  TRUE)
# Use Stan to estimate mutation rates
Fit <- bakRFit(Fit, FastRerun = TRUE, StanRateEst = TRUE)
Fit
# Use Stan to estimate mutation rates
Fit <- bakRFit(Fit, FastRerun = TRUE, StanRateEst = TRUE)
# Use Stan to estimate mutation rates
Fit <- bakRFit(Fit, FastRerun = TRUE, StanRateEst = TRUE, StanRateEst = 5, low_reads = 50, high_reads = 10000)
# Use Stan to estimate mutation rates
Fit <- bakRFit(Fit, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 5, low_reads = 50, high_reads = 10000)
# Estimated logit(fraction news)
est_fn <- Fit$Fast_Fit$Fn_Estimates$logit_fn
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
# Make Volcano plot
plotVolcano(Fit$Fast_Fit)
# Make MA plot
plotMA(Fit, Model = "MLE")
# Make PCA plot
FnPCA(Fit$Fast_Fit)
# Make kdeg PCA
FnPCA(Fit$Fast_Fit, log_kdeg =  TRUE)
# Use Stan to estimate mutation rates from start
Fit <- bakRFit(sim$bakRData, StanRateEst = TRUE, RateEst_size = 5, low_reads = 50, high_reads = 10000)
# Estimated logit(fraction news)
est_fn <- Fit$Fast_Fit$Fn_Estimates$logit_fn
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
# Make Volcano plot
plotVolcano(Fit$Fast_Fit)
# Make MA plot
plotMA(Fit, Model = "MLE")
# Make PCA plot
FnPCA(Fit$Fast_Fit)
# Make kdeg PCA
FnPCA(Fit$Fast_Fit, log_kdeg =  TRUE)
# Run Hybrid implementation
# Use Stan to estimate mutation rates from start
Fit <- bakRFit(sim$bakRData, HybridFit = TRUE)
# Use Stan to estimate mutation rates from start
Fit <- bakRFit(sim$bakRData, StanRateEst = TRUE, RateEst_size = 5, low_reads = 50, high_reads = 10000)
# Run Hybrid implementation
# Use Stan to estimate mutation rates from start
Fit <- bakRFit(Fit, HybridFit = TRUE)
# Estimated logit(fraction news)
est_fn <- Fit$Fast_Fit$Fn_Estimates$logit_fn
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
# Make Volcano plot
plotVolcano(Fit$Fast_Fit)
# Make MA plot
plotMA(Fit, Model = "MLE")
# Make PCA plot
FnPCA(Fit$Fast_Fit)
# Make kdeg PCA
FnPCA(Fit$Fast_Fit, log_kdeg =  TRUE)
# Estimated logit(fraction news)
est_fn <- Fit$Hybrid_Fit$Fn_Estimates
# Estimated logit(fraction news)
est_fn <- Fit$Hybrid_Fit$Fn_Estimates$logit_fn
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
# Make Volcano plot
plotVolcano(Fit$Hybrid_Fit)
# Make MA plot
plotMA(Fit, Model = "Hyrid")
# Make MA plot
plotMA(Fit, Model = "Hybrid")
# Make PCA plot
FnPCA(Fit$Fast_Fit)
# Make PCA plot
FnPCA(Fit$Hybrid_Fit)
# Make kdeg PCA
FnPCA(Fit$Hybrid_Fit, log_kdeg =  TRUE)
# Run Hybrid implementation
# Use Stan to estimate mutation rates from start
Fit <- bakRFit(Fit, StanFit = TRUE)
# Estimated logit(fraction news)
est_fn <- Fit$Stan_Fit$Fn_Estimates$logit_fn
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
# Make Volcano plot
plotVolcano(Fit$Stan_Fit)
# Make MA plot
plotMA(Fit, Model = "MCMC")
# Make PCA plot
FnPCA(Fit$Stan_Fit)
## Make kdeg PCA
FnPCA(Fit$Hybrid_Fit, log_kdeg =  TRUE)
# simulated L2FC(kdeg) from features making it past filtering
true_L2FC <- sim_truth$Effect_sim$L2FC_kdeg[sim_truth$Effect_sim$Feature_ID %in% XFs]
# Estimated L2FC(kdeg)
est_L2FC <- Fit$Fast_Fit$Effects_df$L2FC_kdeg
plot(true_L2FC, est_L2FC)
plot(true_L2FC, est_L2FC)
abline(0,1, col = "red")
# Estimated L2FC(kdeg)
est_L2FC <- Fit$Hybrid_Fit$Effects_df$L2FC_kdeg
# Compare L2FC(kdeg) estimate to truth
plot(true_L2FC, est_L2FC)
abline(0,1, col = "red")
# Estimated L2FC(kdeg)
est_L2FC <- Fit$Stan_Fit$Effects_df$L2FC_kdeg
# Compare L2FC(kdeg) estimate to truth
plot(true_L2FC, est_L2FC)
abline(0,1, col = "red")
# FDR
FDs <- sum(Fit$Hybrid_Fit$Effects_df$padj[as.numeric(Fit$Hybrid_Fit$Effects_df$XF) < 500] < 0.05)
Ds <- sum(Fit$Hybrid_Fit$Effects_df$padj < 0.05)
FDR <- FDs/Ds
FDR
# FDR
FDs <- sum(Fit$Hybrid_Fit$Effects_df$padj[as.numeric(Fit$Hybrid_Fit$Effects_df$XF) < 50] < 0.05)
Ds <- sum(Fit$Hybrid_Fit$Effects_df$padj < 0.05)
FDR <- FDs/Ds
FDR
# FDR
FDs <- sum(Fit$Hybrid_Fit$Effects_df$padj[as.numeric(Fit$Hybrid_Fit$Effects_df$XF) <= 50] < 0.05)
Ds <- sum(Fit$Hybrid_Fit$Effects_df$padj < 0.05)
FDR <- FDs/Ds
FDR
# Power
TDs <- sum(Fit$Hybrid_Fit$Effects_df$padj[as.numeric(Fit$Hybrid_Fit$Effects_df$XF) > 50] < 0.05)
Power <- TDs/50
Power
# FDR
FDs <- sum(Fit$Stan_Fit$Effects_df$padj[as.numeric(Fit$Stan_Fit$Effects_df$XF) <= 50] < 0.05)
Ds <- sum(Fit$Stan_Fit$Effects_df$padj < 0.05)
FDR <- FDs/Ds
FDR
# Power
TDs <- sum(Fit$Stan_Fit$Effects_df$padj[as.numeric(Fit$Stan_Fit$Effects_df$XF) > 50] < 0.05)
Power <- TDs/50
Power
# FDR
FDs <- sum(Fit$Hybrid_Fit$Effects_df$padj[as.numeric(Fit$Hybrid_Fit$Effects_df$XF) <= 50] < 0.05)
Ds <- sum(Fit$Hybrid_Fit$Effects_df$padj < 0.05)
# FDR
FDs <- sum(Fit$Fast_Fit$Effects_df$padj[as.numeric(Fit$Fast_Fit$Effects_df$XF) <= 50] < 0.05)
Ds <- sum(Fit$Fast_Fit$Effects_df$padj < 0.05)
FDR <- FDs/Ds
FDR
# Power
TDs <- sum(Fit$Fast_Fit$Effects_df$padj[as.numeric(Fit$Fast_Fit$Effects_df$XF) > 50] < 0.05)
Power <- TDs/50
Power
plot(Fit$Stan_Fit$Effects_df$L2FC_kdeg, Fit$Fast_Fit$Effects_df$L2FC_kdeg)
abline(0,1)
plot(Fit$Stan_Fit$Effects_df$se, Fit$Fast_Fit$Effects_df$se)
abline(0,1)
plot(Fit$Stan_Fit$Effects_df$se, Fit$Fast_Fit$Effects_df$se*log2(exp(1)))
abline(0,1)
# FDR
FDs <- sum(Fit$Stan_Fit$Effects_df$padj[as.numeric(Fit$Stan_Fit$Effects_df$XF) <= 50] < 0.05)
Ds <- sum(Fit$Stan_Fit$Effects_df$padj < 0.05)
FDR <- FDs/Ds
FDR
# Power
TDs <- sum(Fit$Stan_Fit$Effects_df$padj[as.numeric(Fit$Stan_Fit$Effects_df$XF) > 50] < 0.05)
Power <- TDs/50
Power
plot(Fit$Stan_Fit$Effects_df$pval, Fit$Fast_Fit$Effects_df$pval)
abline(0,1)
Fit$Fast_Fit$Hyper_Parameters
plot(Fit$Fast_Fit$Effects_df$pval, 2*pnorm(-abs(Fit$Fast_Fit$Effects_df$effect/Fit$Fast_Fit$Effects_df$se)))
abline(0,1)
plot(Fit$Fast_Fit$Effects_df$pval, 2*pt(-abs(Fit$Fast_Fit$Effects_df$effect/Fit$Fast_Fit$Effects_df$se), df = 2 + 2*Fit$Fast_Fit$Hyper_Parameters[1]))
abline(0,1)
# Run Hybrid implementation with Stan options changed
# Use Stan to estimate mutation rates from start
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 2, iter = 3000, warmup = 1000)
# Estimated logit(fraction news)
est_fn <- Fit$Hybrid_Fit$Fn_Estimates$logit_fn
# Estimated L2FC(kdeg)
est_L2FC <- Fit$Hybrid_Fit$Effects_df$L2FC_kdeg
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
# Compare L2FC(kdeg) estimate to truth
plot(true_L2FC, est_L2FC)
abline(0,1, col = "red")
# Make Volcano plot
plotVolcano(Fit$Hybrid_Fit)
# Make MA plot
plotMA(Fit, Model = "Hybrid")
# Make PCA plot
FnPCA(Fit$Hybrid_Fit)
# FDR
FDs <- sum(Fit$Hybrid_Fit$Effects_df$padj[as.numeric(Fit$Hybrid_Fit$Effects_df$XF) <= 50] < 0.05)
Ds <- sum(Fit$Hybrid_Fit$Effects_df$padj < 0.05)
FDR <- FDs/Ds
FDR
# Power
TDs <- sum(Fit$Hybrid_Fit$Effects_df$padj[as.numeric(Fit$Hybrid_Fit$Effects_df$XF) > 50] < 0.05)
Power <- TDs/50
Power
FDs
Ds
library(rstan)
options(mc.cores = parallel::detectCores())
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 2, iter = 3000, warmup = 1000)
detach("package:rstan", unload = TRUE)
#library(rstan)
options(mc.cores = parallel::detectCores())
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 2, iter = 3000, warmup = 1000)
# Estimated logit(fraction news)
est_fn <- Fit$Hybrid_Fit$Fn_Estimates$logit_fn
# Estimated L2FC(kdeg)
est_L2FC <- Fit$Hybrid_Fit$Effects_df$L2FC_kdeg
# Compare estimate to truth
plot(true_fn, est_fn, xlab = "True logit(fn)", ylab = "Estimated logit(fn)")
abline(0, 1, col = "red")
# Compare L2FC(kdeg) estimate to truth
plot(true_L2FC, est_L2FC)
abline(0,1, col = "red")
# Make Volcano plot
plotVolcano(Fit$Hybrid_Fit)
# Make MA plot
plotMA(Fit, Model = "Hybrid")
# Make PCA plot
FnPCA(Fit$Hybrid_Fit)
