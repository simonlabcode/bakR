ctl = c(rep(1, times=nreps*num_conds), rep(0, times=num_conds)),   # cntl = 0 is no feed, cntl = 1 is feed
mt = c(rep(1:num_conds, each=nreps),seq(from=1,to=num_conds,by=1)),
replicate = c(rep(seq(from=1, to=nreps), times=num_conds), rep(1, times=num_conds))
#Could just generalize this, which is what next line does, repeating 1 for all but the last sample
#ctl = c(rep(1, times = nsamp-1),0) #assumes nsamp is odd, think it has to be
){
# mir_pnew_logit_tc <- rnorm(nmir, mean = logit(p_new_real_tc), sd = 0.2)  # Calculates an s4U mutation probability within given range
# mir_pnew_tc <- inv_logit(mir_pnew_logit_tc)   # figure out what the probability values actual are (unlogit the logit)
#
#
# mir_pold_logit_tc <- rnorm(nmir, mean = logit(p_old_real_tc), sd = 0.2)  # Calculates a background mutation probability within a given range
# mir_pold_tc <- inv_logit(mir_pold_logit_tc)  #unlogit the logit
# Start generating a vector with data
sample_data <- vector('list', length = nsamp)
for (s in 1:nsamp){
mir_data <- vector('list', length = nmir)
for (mir in 1:nmir){ #mir is feature number index, should change to gene or something
r <- replicate[s] #Replicate number index
MT <- mt[s]       #Experimental sample index
readsize = read_length[mt[s]]
mir_pold_tc <- p_old[mt[s]]
mir_pnew_tc <- p_new[mt[s]]
#Simulate which reads are labeled
newreads_tc <- rbernoulli(nreads[mir, MT, r], p = fn_s4U[mir, MT, r])# vector of reads, T/F is s4U labeled
#Simulate the nubmer of Us in each read
nu <- rbinom(n = nreads[mir,MT,r], size = readsize, prob = 0.25)
#Number of reads that are new
newreads_tc <- sum(newreads_tc)
#Generate number of mutations for new and old reads
if (!ctl[s]){ #If no s4U added, only old
nmut_tc <- rbinom(n = nreads[mir,MT,r], size=nu, prob = mir_pold_tc)
}else {
nmut_tc_new <- rbinom(n=newreads_tc, size=nu[1:newreads_tc], prob=mir_pnew_tc)
nmut_tc_old <- rbinom(n=(nreads[mir, MT, r]-newreads_tc), size = nu[(newreads_tc+1):nreads[mir, MT, r]], prob=mir_pold_tc)
nmut_tc <- c(nmut_tc_new, nmut_tc_old)
}
#Now make it look kind of like a cB file
# use mirMut for each gene, cntl is if cntl or not, x is # of new reads
df <- tibble(S = rep(s, times = nreads[mir, MT, r]),  #starting to generate something that looks like a cB file
TP = rep(ctl[s], times = nreads[mir, MT, r]),
R = rep(r, times=nreads[mir, MT, r]),
MIR = rep(mir, times = nreads[mir, MT, r]), # same as XF or fnum, so just feature number
TC = nmut_tc,
MT = rep(mt[s], times=nreads[mir, MT, r]),
num_us = nu)
#rep_data[[r]] <- df
#rep_data <- bind_rows(rep_data)
mir_data[[mir]] <- df
}
mir_data <- bind_rows(mir_data)
sample_data[[s]] <- mir_data
}
sample_data <- bind_rows(sample_data)
sim_df <- list(nmir = nmir,
fn_s4U = fn_s4U,
p_new_real_tc = p_new_real_tc,
p_old_real_tc = p_old_real_tc,
nreads = nreads, # per miR per sample
nsamp = nsamp,
ctl = ctl,
mir_pnew_tc = mir_pnew_tc,
mir_pold_tc = mir_pold_tc,
sample_data = sample_data
)
return(sim_df)   # return a list of all the things we should know.
}
sim_df_1 <- simulateData()
# Extract simulated cB and summarise data
cB_sim_1 <- data.table::setDT(sim_df_1$sample_data)
devtools::install(build_vignettes = TRUE)
library(changer)
library(available)
suggest(text = "Hierarchical analysis of differential RNA metabolic kinetics")
suggest(text = "Analysis of differential RNA metabolic kinetics")
available("hakR")
available("hypeR")
available("DynaSeq")
available("DynamSeq")
suggest(text = "Analysis of differential RNA metabolic kinetics")
devtools::load_all()
set.seed(123)
sim_list <- sim_DynamicSeqData(200, num_kd_DE = c(0, 200),num_conds = 2, p_new = 0.05,
nreps = 3, eff_sd = 0.7, tl = 60, fn_sd = 1)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, totcut = 10,  StanRateEst = TRUE, RateEst_size = 1)
Fit$Fast_Fit$Effects_df
Fit$Fast_Fit$Regularized_ests
Fit$Fast_Fit$Fn_Estimates
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 1)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE)
Fit$Hybrid_Fit$Effects_df
Fit$Hybrid_Fit$Kdeg_df
Fit$Hybrid_Fit$Fn_Estimates
Fit$Hybrid_Fit$Fit_Summary
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE)
Fit$Hybrid_Fit$Fit_Summary
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
sim_list <- sim_DynamicSeqData(200, num_kd_DE = c(0, 200),num_conds = 2, p_new = 0.05,
nreps = 3, eff_sd = 0.7, tl = 60, fn_sd = 1)
DynData <- sim_list$DynData
DynData
log2(exp(1))
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
devtools::load_all()
?fast_analysis
?DynamicSeqFit
library(devtools)
library(tidyverse)
library(rstan)
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
set.seed(123)
sim_list <- sim_DynamicSeqData(200, num_kd_DE = c(0, 200),num_conds = 2, p_new = 0.05,
nreps = 3, eff_sd = 0.7, tl = 60, fn_sd = 1)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, totcut = 10,  StanRateEst = TRUE, RateEst_size = 10)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE)
Fit$Hybrid_Fit$Mutation_Rates
devtools::load_all()
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE)
Fit$Hybrid_Fit$Mutation_Rates
sim_list <- sim_DynamicSeqData(10, num_kd_DE = c(0, 200),num_conds = 2, p_new = 0.05,
nreps = 3, eff_sd = 0.7, tl = 60, fn_sd = 1)
sim_list <- sim_DynamicSeqData(10, num_kd_DE = c(0, 10),num_conds = 2, p_new = 0.05,
nreps = 3, eff_sd = 0.7, tl = 60, fn_sd = 1)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, totcut = 10,  StanRateEst = TRUE, RateEst_size = 10)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, totcut = 10,  StanRateEst = FALSE, RateEst_size = 10)
Fit <- DynamicSeqFit(Fit, StanFit = TRUE)
Fit$Full_Fit$Mutation_Rates
Fit$Stan_Fit$Mutation_Rates
Fit$Stan_Fit$Fit_Summary[order(Fit$Stan_Fit$Fit_Summary$n_eff),]
library(devtools)
library(tidyverse)
library(rstan)
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
set.seed(123)
sim_list <- sim_DynamicSeqData(10, num_kd_DE = c(0, 10),num_conds = 2, p_new = 0.05,
nreps = 3, eff_sd = 0.7, tl = 60, fn_sd = 1)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, totcut = 10,  StanRateEst = FALSE, RateEst_size = 10)
?fast_analysis
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, totcut = 10,  StanRateEst = FALSE, RateEst_size = 10, pnew = rep(0.05, times = 6), pold = 0.001)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE)
Fit$Hybrid_Fit$Mutation_Rates
Fit <- DynamicSeqFit(Fit, StanFit = TRUE)
Fit$Stan_Fit$Mutation_Rates
Fit$Stan_Fit$Fit_Summary
Fit <- DynamicSeqFit(Fit, StanFit = TRUE, keep_fit = TRUE)
Fit$Stan_Fit$Mutation_Rates
Fit$Hybrid_Fit$Fit_Summary
Fit$Stan_Fit$Fn_Estimates
devtools::install("DynamicSeq", build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
?DynamicSeqFit
sim_truth <- sim_DynamicSeqData(500)$sim_list
sim_truth <- DynamicSeq::sim_DynamicSeqData(500)$sim_list
sim_truth
sim_truth$Fn_rep_sim
devtools::load_all()
sim_list <- sim_DynamicSeqData(500)
DynData <- sim_list$DynData
sim_truth <- sim_list$sim_list
Fit <- DynamicSeqFit(DynData, pnew = rep(0.05, times = 6), pold = 0.001)
est_fn <- Fit$Fast_Fit$Fn_Estimates$logit_fn
Fit$Fast_Fit
Fit$Fast_Fit$Fn_Estimates
plotVolcano(Fit$Fast_Fit)
devtools::load_all()
plotVolcano(Fit$Fast_Fit)
devtools::load_all()
plotVolcano(Fit$Fast_Fit)
plotMA(Fit$Fast_Fit, Fit$Data_lists$Stan_data$Avg_Reads_natural)
devtools::load_all()
plotMA(Fit$Fast_Fit, Fit$Data_lists$Stan_data$Avg_Reads_natural)
plotVolcano(Fit$Fast_Fit)
plotVolcano(Fit$Fast_Fit) +
labs(x = expression(L2FC(k["deg"])))
plotVolcano(Fit$Fast_Fit) + ggplot2::labs(x = expression(L2FC(k["deg"])))
devtools::load_all()
plotVolcano(Fit$Fast_Fit) + ggplot2::labs(x = expression(L2FC(k["deg"])))
devtools::load_all()
plotVolcano(Fit$Fast_Fit) + ggplot2::labs(x = expression(L2FC(k["deg"])))
plotVolcano(Fit$Fast_Fit) + ggplot2::labs(x = expression(L2FC(k["deg"])))
plotVolcano(Fit$Fast_Fit) + ggplot2::labs(x = expression(L2FC(k["deg"])))
devtools::load_all()
plotVolcano(Fit$Fast_Fit)
expression(log["10"])
bquote(log[10](p[adj]))
bquote(L2FC(k[deg]))
devtools::load_all()
plotVolcano(Fit$Fast_Fit)
devtools::load_all()
bquote(log[10](Avg. read count.fields()))
bquote(log[10](Avg. read count))
bquote(log[10](Avg read count))
devtools::load_all()
plotMA(Fit$Fast_Fit, Fit$Data_lists$Stan_data$Avg_Reads_natural)
plotVolcano(Fit$Fast_Fit)
plot(density(rbeta(10000, 15, 45)))
plot(density(rbeta(10000, 25, 75)))
min(rbeta(10000, 25, 75))
devtools::load_all()
devtools::document()
?rbeta
devtools::load_all()
simdata <- sim_DynamicSeqData(100)
simdata <- sim_DynamicSeqData(100, alpha = 0.5)
simdata <- sim_DynamicSeqData(100, alpha = 1)
simdata <- sim_DynamicSeqData(100, alpha = 2)
simdata <- sim_DynamicSeqData(100, alpha = 200)
200/(200 + 75)
simdata <- sim_DynamicSeqData(100, alpha = 400)
library(devtools)
library(tidyverse)
library(rstan)
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
set.seed(123)
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.05,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 5)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 25)
stan_look <- Fit$Data_lists$Stan_data
stan_look
stan_look$U_cont
devtools::load_all()
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 5)
hist(rpois(10000, 1))
hist(rpois(10000, 0.5))
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.05,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.05,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
warnings()
rbinom(100, 0, 0.1)
rbinom(100, -1, 0.1)
devtools::load_all()
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.05,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 5)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 10)
## See what actual fns are
Fn_rep <- sim_list$sim_list$Fn_rep_sim
kd_rep <- -log(1 - Fn_rep$fn)/60
data_list <- Fit$Data_lists$Stan_data
## Look at Feature 524, R == 2, MT == 2
plot(log(kd_rep[Fn_rep$Feature_ID %in% unique(data_list$sdf$XF)]), Fit$Fast_Fit$Fn_Estimates$log_kdeg )
abline(a = 0, b = 1)
## See what actual fns are
Fn_rep <- sim_list$sim_list$Fn_rep_sim
kd_rep <- -log(1 - Fn_rep$fn)/1
data_list <- Fit$Data_lists$Stan_data
## Look at Feature 524, R == 2, MT == 2
plot(log(kd_rep[Fn_rep$Feature_ID %in% unique(data_list$sdf$XF)]), Fit$Fast_Fit$Fn_Estimates$log_kdeg )
abline(a = 0, b = 1)
plotVolcano(Fit$Fast_Fit)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 30)
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 10)
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = FALSE)
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 10)
## See what actual fns are
Fn_rep <- sim_list$sim_list$Fn_rep_sim
kd_rep <- -log(1 - Fn_rep$fn)/1
data_list <- Fit$Data_lists$Stan_data
## Look at Feature 524, R == 2, MT == 2
plot(log(kd_rep[Fn_rep$Feature_ID %in% unique(data_list$sdf$XF)]), Fit$Fast_Fit$Fn_Estimates$log_kdeg )
abline(a = 0, b = 1)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 10)
library(devtools)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
set.seed(123)
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 10)
Fit <- DynamicSeqFit(DynData, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 15)
Fit <- DynamicSeqFit(DynData, FastRerun = TRUE, StanRateEst = FALSE, pnew = rep(0.1, times = 4), pold = 0.001)
?sampling
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
?is.numerical
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
set.seed(123)
sim_list <- sim_DynamicSeqData(100, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 10)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 10)
Fit <- DynamicSeqFit(DynData, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 15)
Fit <- DynamicSeqFit(DynData, FastRerun = TRUE, StanRateEst = FALSE, pnew = rep(0.1, times = 4), pold = 0.001)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
Fit
Fit$Fast_Fit$Effects_df$Feature_ID
sim_list <- sim_DynamicSeqData(100, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 5)
sim_list <- sim_DynamicSeqData(200, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 5)
Fit$Fast_Fit
Fit$Fast_Fit$Effects_df$Feature_ID
Fit$Fast_Fit$Mut_rates
Fit <- DynamicSeqFit(DynData, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 15)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
Fit <- DynamicSeqFit(Fit, StanFit = TRUE, chains = 2, keep_fit = FALSE)
rcmdcheck::rcmdcheck()
?dnorm
devtools::build_manual()
?devtools::build_manual
getwd()
devtools::build_manual(pkd = "C:/Users/isaac/Documents/Simon_Lab/DynamicSeq")
devtools::build_manual(pkg = "C:/Users/isaac/Documents/Simon_Lab/DynamicSeq")
devtools::build_manual(pkg = "C:/Users/isaac/Documents/Simon_Lab/DynamicSeq")
getwd()
setwd("C:/Users/isaac/Documents/Simon_Lab/")
R CMD Rd2pdf "DynamicSeq"
?Rd2pdf
R CMD Rd2pdf "C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/"
library(rcmdcheck)
R CMD Rd2pdf "C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/"
rcmdcheck::rcmdcheck()
getwd()
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
rcmdcheck::rcmdcheck()
tools::texi2dvi()
tools::texi2dvi
library(help = "tools")
devtools::document
devtools::document()
rcmdcheck::rcmdcheck()
?changer::changer
getwd()
changer::changer(path = "C:/Users/isaac/Documents/Simon_Lab/DynamicSeq", new_name = "bakR")
devtools::document()
devtools::document()
pkgbuild::compile_dll(force=TRUE)
devtools::document()
library(devtools)
library(tidyverse)
library(rstan)
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
set.seed(123)
sim_list <- sim_bakRData(200, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$bakRData
Fit <- bakRFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 5)
Fit <- bakRFit(DynData, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 15)
Fit <- bakRFit(DynData, FastRerun = TRUE, StanRateEst = FALSE, pnew = rep(0.1, times = 4), pold = 0.001)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 2)
Fit <- bakRFit(Fit, StanFit = TRUE, chains = 2, keep_fit = FALSE)
stanmodels$MCMC_Model
getwd()
devtools::document()
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 2)
stanmodels$Hybrid
rstan::sampling(stanmodels$MCMC_Model, data = Fit$Data_lists$Stan_data, chains = chains, ...)
rstan::sampling(stanmodels$MCMC_Model, data = Fit$Data_lists$Stan_data, chains = 1)
rstan::sampling(stanmodels$MCMC_Model, data = Fit$Data_lists$Stan_data, chains = 2)
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 1)
Fit <- bakRFit(Fit, StanFit = TRUE, chains = 1, keep_fit = FALSE)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 2)
library(devtools)
library(rstan)
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
set.seed(123)
sim_list <- sim_bakRData(200, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$bakRData
Fit <- bakRFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 5)
Fit <- bakRFit(DynData, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 15)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 2)
pkgbuild::compile_dll(force = TRUE)
devtools::document
devtools::document()
library(devtools)
library(tidyverse)
library(rstan)
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
set.seed(123)
sim_list <- sim_bakRData(200, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$bakRData
Fit <- bakRFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 5)
Fit <- bakRFit(DynData, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 15)
Fit <- bakRFit(DynData, FastRerun = TRUE, StanRateEst = FALSE, pnew = rep(0.1, times = 4), pold = 0.001)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 2)
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 1)
## See what actual fns are
Fn_rep <- sim_list$sim_list$Fn_rep_sim
kd_rep <- -log(1 - Fn_rep$fn)/1
data_list <- Fit$Data_lists$Stan_data
## Look at Feature 524, R == 2, MT == 2
plot(log(kd_rep[Fn_rep$Feature_ID %in% unique(data_list$sdf$XF)]), Fit$Fast_Fit$Fn_Estimates$log_kdeg )
abline(a = 0, b = 1)
plot(log(kd_rep[Fn_rep$Feature_ID %in% unique(data_list$sdf$XF)]), log(Fit$Hybrid_Fit$Kdeg_df$kdeg ))
Fit$Hybrid_Fit$Kdeg_df$kdeg
Fit$Fast_Fit$Fn_Estimates$log_kdeg
logit_fnrep <- pracma::logit(Fn_rep)
logit_fnrep <- Fn_rep$Logit_fn
plot( logit_fnrep[Fn_rep$Feature_ID %in% unique(data_list$sdf$XF)], Fit$Hybrid_Fit$Fn_Estimates$logit_fn)
abline(a = 0, b = 1)
sim_list <- sim_bakRData(400, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$bakRData
Fit <- bakRFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 5)
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 1)
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
