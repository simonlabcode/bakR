rep_list <- c(rep(c(1,2), times=2), 1, 1)
data_list <- cB_to_Stan(cB_test, c_list, type_list, mut_list, rep_list, 2, 2, keep_input = c(0.2, 1000))
devtools::load_all()
getwd()
setwd("C:/Users/isaac/Documents/Simon_Lab/trystan/")
devtools::load_all()
data_list <- cB_to_Stan(cB_test, c_list, type_list, mut_list, rep_list, 2, 2, keep_input = c(0.2, 1000))
devtools::document()
devtools::load_all()
getwd()
data_list <- cB_to_Stan(cB_test, c_list, type_list, mut_list, rep_list, 2, 2, keep_input = c(0.2, 1000))
devtools::document()
devtools::load_all()
data_list <- cB_to_Stan(cB_test, c_list, type_list, mut_list, rep_list, 2, 2, keep_input = c(0.2, 1000))
data_list <- trystan::cB_to_Stan(cB_test, c_list, type_list, mut_list, rep_list, 2, 2, keep_input = c(0.2, 1000))
devtools::document()
devtools::load_all()
data_list <- trystan::cB_to_Stan(cB_test, c_list, type_list, mut_list, rep_list, 2, 2, keep_input = c(0.2, 1000))
getwd()
devtools::load_all()
getwd()
setwd("C:/Users/isaac/Documents/Simon_Lab/TimeLapse_Paper/Real_Data/")
require(devtools)
library(tidvy)
library(tidyverse)
library(roxygen2)
devtools::document()
devtools::load_all()
getwd()
setwd("C:/Users/isaac/Documents/Simon_Lab/TimeLapse_Paper/Real_Data/")
cB_test <- readRDS("cB.rds")
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq")
c_list <- c('JS181113', 'JS181114')
type_list <- c(1, 1, 1, 1, 0, 0)
mut_list <- c(1, 1, 2, 2, 1 ,2)
rep_list <- c(rep(c(1,2), times=2), 1, 1)
data_list <- cBtoStan(cB_test, c_list, type_list, mut_list, rep_list, 2, 2, c(0.2, 5000))
fit <- TL_stan(data_list, iter=1000, warmup=500, chains=1)
data_list <- cBtofast(cB_test, c_list, type_list, mut_list, rep_list, 2, 2, c(0.2, 5000))
data_list <- cBtofast(cB_test, c_list, type_list, mut_list, rep_list, 2, 2, c(0.2, 500))
fn_df <- fast_analysis(df=data_list)
fn_df
nrow(fn_df)
fn_df <- DynamicSeq::fast_analysis(df=data_list)
data_list
fn_df <- DynamicSeq::fast_analysis(df=data_list, boot_iter = 100)
?mean()
as.data.frame(data_list)
data_df <- as.data.frame(data_list)
fn_df <- DynamicSeq::fast_analysis(df=data_df, boot_iter = 50)
fn_df
view(fn_df)
devtools::load_all()
devtools::load_all()
devtools::document()
library(roxygen2)
getwd()
setwd("C:/Users/isaac/Documents/Simon_Lab/TimeLapse_Paper/Real_Data/")
cB <- readRDS("cB.rds")
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq")
c_list <- c('JS181113', 'JS181114')
type_list <- c(1, 1, 1, 1, 0, 0)
mut_list <- c(1, 1, 2, 2, 1 ,2)
rep_list <- c(rep(c(1,2), times=2), 1, 1)
cBtofast(cB, c_list, type_list, mut_list, rep_list, 2, 2, c(0.2, 500))
fast_df <- cBtofast(cB, c_list, type_list, mut_list, rep_list, 2, 2, c(0.2, 500))
fn_df <- fast_analysis(fast_df)
df <- fast_df
#Old mutation rate estimation
Mut_data <- df[,1:9]
colnames(Mut_data) <- c("sample", "XF", "TC", "nT", "n", "fnum", "type", "mut", "reps")
Old_data <- Mut_data[Mut_data$type == 0, ]
Old_data$avg_mut <- Old_data$TC/Old_data$nT
Old_data$avg_mut[is.na(Old_data$avg_mut)] <- 0
Old_data$weight_mut <- Old_data$avg_mut*Old_data$n
Old_data_summary <- Old_data %>%
dplyr::group_by(reps, mut, fnum) %>%
dplyr::do(purrr::invoke_map_dfc(list(map_df),
list(list(dplyr::select(., weight_mut), sum),
list(dplyr::select(., n), sum))
)
)
?invoke_map_dfc()
library(tidyverse)
Old_data_summary <- Old_data %>%
dplyr::group_by(reps, mut, fnum) %>%
dplyr::do(purrr::invoke_map_dfc(list(map_df),
list(list(dplyr::select(., weight_mut), sum),
list(dplyr::select(., n), sum))
)
)
fn_df <- fast_analysis(fast_df)
?rbernoulli
devtools::load_all()
fn_df <- fast_analysis(fast_df)
fn_df
data_list
data_list <- cBtoStan(cB, c_list, type_list, mut_list, rep_list, 2, 2, c(0.2, 500))
library(rstan)
# Load stan
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
fit <- TL_stan(data_list, iter=2000, refresh=500)
fit <- TL_stan(data_list, iter=2000, chains=1)
devtools::load_all()
library(rstan)
delta <- 0.5/0.25
pnorm(1 + delta, lower.tail = FALSE)
pnorm(1 - delta, lower.tail = FALSE)
mean <- 0.25
sd <- 0.25
mu <- 0.5
tstat <- mean/sd
delta <- mu/sd
test <- pnorm(tstat + delta, lower.tail=ifelse(mean >0, FALSE, TRUE)) + pnorm(tstat - delta, lower.tail=ifelse(mean >0, FALSE, TRUE))
test
delta <- -mu/sd
test <- pnorm(tstat + delta, lower.tail=ifelse(mean >0, FALSE, TRUE)) + pnorm(tstat - delta, lower.tail=ifelse(mean >0, FALSE, TRUE))
test
mean <- 0.25
sd <- 0.05
mu <- 0.5
tstat <- mean/sd
delta <- -mu/sd
test <- pnorm(tstat + delta, lower.tail=ifelse(mean >0, FALSE, TRUE)) + pnorm(tstat - delta, lower.tail=ifelse(mean >0, FALSE, TRUE))
test
delta <- mu/sd
test <- pnorm(tstat + delta, lower.tail=ifelse(mean >0, FALSE, TRUE)) + pnorm(tstat - delta, lower.tail=ifelse(mean >0, FALSE, TRUE))
test
mean <- -0.25
sd <- 0.05
mu <- 0.5
tstat <- mean/sd
delta <- mu/sd
test <- pnorm(tstat + delta, lower.tail=ifelse(mean >0, FALSE, TRUE)) + pnorm(tstat - delta, lower.tail=ifelse(mean >0, FALSE, TRUE))
test
mean <- -0.45
sd <- 0.05
mu <- 0.5
tstat <- mean/sd
delta <- mu/sd
test <- pnorm(tstat + delta, lower.tail=ifelse(mean >0, FALSE, TRUE)) + pnorm(tstat - delta, lower.tail=ifelse(mean >0, FALSE, TRUE))
test
mean <- -0.49
sd <- 0.05
mu <- 0.5
tstat <- mean/sd
delta <- mu/sd
test <- pnorm(tstat + delta, lower.tail=ifelse(mean >0, FALSE, TRUE)) + pnorm(tstat - delta, lower.tail=ifelse(mean >0, FALSE, TRUE))
test
mean <- -0.5
sd <- 0.05
mu <- 0.5
tstat <- mean/sd
delta <- mu/sd
test <- pnorm(tstat + delta, lower.tail=ifelse(mean >0, FALSE, TRUE)) + pnorm(tstat - delta, lower.tail=ifelse(mean >0, FALSE, TRUE))
test
mean
print
require(tidyverse)
library(rstan)
library(loo)
require(extrafont)
library(bayesplot)
require(EnvStats)
library(devtools)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
setwd("C:/Users/isaac/Documents/Simon_Lab/TimeLapse_Paper/Real_Data/")
#Load cB
cB <- readRDS("cB.rds")
# Define experimental design:
samp_list <- c('JS181101', 'JS181102','JS181107', 'JS181108',
'JS181113', 'JS181114')
type_list <- c(1, 1, 1, 1, 0, 0)
mut_list <- c(1, 1, 2, 2, 1 ,2)
rep_list <- c(rep(c(1,2), times=2), 1, 1)
tl <- 2 #label time
keep_params <- c(0.2, 50) #1st entry is mut rate cutoff for control sample; second is read count cutoff
#Process cB for fast analysis
df_fast <- cB_to_fast(cB,
samp_list,
type_list,
mut_list,
rep_list,
tl)
#Process cB for fast analysis
df_fast <- cBtofast(cB,
samp_list,
type_list,
mut_list,
rep_list,
tl)
#Analyze data with fast analysis
df_fn <- fast_analysis(df_fast, pnew = 0.11783, pold = 0.00196)
fn_list <- df_fn
df_fn <- fn_list[[1]]
#Look for heteroskedasticity
library(data.table)
#Convert to data.table
dt_fn <- setDT(df_fn)
#Take an even number of genes in each condition
subsection <- 9000
ans <- dt_fn[Gene_ID < subsection, .(sd_fn = sd(logit_fn), mean_fn = mean(logit_fn)), by=.(Condition, Gene_ID)
][order(mean_fn)]
#Extract mean logit(fraction new) and standard deviation of logit(fn)
avg_fn <- ans[,mean_fn]
sd_fn <- ans[,sd_fn]
#Defining binning parameters for binned averaging analysis
bins <- 1000
bin_size <- (2*subsection)/bins
mean_bin_fn <- rep(0, times=bins)
sd_bin_fn <- rep(0, times=bins)
#Bin data and find average logit(fn) and sd(logit(fn))
for(i in 1:bins){
low_index <- (i - 1)*bin_size + 1
high_index <- i*bin_size
mean_bin_fn[i] <- mean(avg_fn[low_index:high_index])
sd_bin_fn[i] <- mean(sd_fn[low_index:high_index])
}
#Plot results
plot(mean_bin_fn, sd_bin_fn)
plot(avg_fn, sd_fn)
#Plot results
plot(mean_bin_fn, sd_bin_fn)
#Defining binning parameters for binned averaging analysis
bins <- 500
bin_size <- (2*subsection)/bins
mean_bin_fn <- rep(0, times=bins)
sd_bin_fn <- rep(0, times=bins)
#Bin data and find average logit(fn) and sd(logit(fn))
for(i in 1:bins){
low_index <- (i - 1)*bin_size + 1
high_index <- i*bin_size
mean_bin_fn[i] <- mean(avg_fn[low_index:high_index])
sd_bin_fn[i] <- mean(sd_fn[low_index:high_index])
}
#Plot results
plot(mean_bin_fn, sd_bin_fn)
#Defining binning parameters for binned averaging analysis
bins <- 200
bin_size <- (2*subsection)/bins
mean_bin_fn <- rep(0, times=bins)
sd_bin_fn <- rep(0, times=bins)
#Bin data and find average logit(fn) and sd(logit(fn))
for(i in 1:bins){
low_index <- (i - 1)*bin_size + 1
high_index <- i*bin_size
mean_bin_fn[i] <- mean(avg_fn[low_index:high_index])
sd_bin_fn[i] <- mean(sd_fn[low_index:high_index])
}
#Plot results
plot(mean_bin_fn, sd_bin_fn)
#Defining binning parameters for binned averaging analysis
bins <- 100
bin_size <- (2*subsection)/bins
mean_bin_fn <- rep(0, times=bins)
sd_bin_fn <- rep(0, times=bins)
#Bin data and find average logit(fn) and sd(logit(fn))
for(i in 1:bins){
low_index <- (i - 1)*bin_size + 1
high_index <- i*bin_size
mean_bin_fn[i] <- mean(avg_fn[low_index:high_index])
sd_bin_fn[i] <- mean(sd_fn[low_index:high_index])
}
#Plot results
plot(mean_bin_fn, sd_bin_fn)
nrow(ans)
#Defining binning parameters for binned averaging analysis
bins <- 50
bin_size <- (2*subsection)/bins
mean_bin_fn <- rep(0, times=bins)
sd_bin_fn <- rep(0, times=bins)
#Bin data and find average logit(fn) and sd(logit(fn))
for(i in 1:bins){
low_index <- (i - 1)*bin_size + 1
high_index <- i*bin_size
mean_bin_fn[i] <- mean(avg_fn[low_index:high_index])
sd_bin_fn[i] <- mean(sd_fn[low_index:high_index])
}
#Plot results
plot(mean_bin_fn, sd_bin_fn)
getwd()
library(devtools)
devtools::document()
devtools::load_all()
###HETEROSKEDASTICITY???###
require(tidyverse)
library(rstan)
library(loo)
require(extrafont)
library(bayesplot)
require(EnvStats)
library(devtools)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
setwd("C:/Users/isaac/Documents/Simon_Lab/TimeLapse_Paper/Real_Data/")
#Load cB
cB <- readRDS("cB.rds")
# Define experimental design:
samp_list <- c('JS181101', 'JS181102','JS181107', 'JS181108',
'JS181113', 'JS181114')
type_list <- c(1, 1, 1, 1, 0, 0)
mut_list <- c(1, 1, 2, 2, 1 ,2)
rep_list <- c(rep(c(1,2), times=2), 1, 1)
tl <- 2 #label time
keep_params <- c(0.2, 50) #1st entry is mut rate cutoff for control sample; second is read count cutoff
#Process cB for fast analysis
df_fast <- cBtofast(cB,
samp_list,
type_list,
mut_list,
rep_list,
tl)
?invoke_map_dfc
## Testing mut rate estimation
Mut_data <- df_fast[,1:9]
colnames(Mut_data) <- c("sample", "XF", "TC", "nT", "n", "fnum", "type", "mut", "reps")
##New Mutation rate Estimation
# Extract only s4U labeled data to estimate s4U mut rate
New_data <- Mut_data[Mut_data$type == 1, ]
# Calculate avg. mut rate at each row
New_data$avg_mut <- New_data$TC/New_data$nT
# Remove rows with NAs
New_data[!is.na(New_data$avg_mut),]
# weight, which is avg. mut rate multiplied by number of reads
# used to estimate the avg. mut rate
New_data$weight_mut <- New_data$avg_mut*New_data$n
New_data$weight_mut
New_data
# This part is super slow and I am not sure what it does,
# but I know it is important
New_data_summary <- New_data %>%
dplyr::group_by(reps, mut, fnum) %>% # group by gene, replicate ID, and experiment ID
dplyr::do(purrr::invoke_map_dfc(list(purrr::map_df), #
list(list(dplyr::select(., weight_mut), sum),
list(dplyr::select(., n), sum))
)
)
New_data_summary
New_data_summary$avg_mut <- New_data_summary$weight_mut/New_data_summary$n
New_data_ordered <- New_data_summary[order(New_data_summary$avg_mut, decreasing=TRUE), ]
New_data_cutoff <- New_data_ordered[New_data_ordered$n > 100,]
New_data_ordered
?summarise
New_data_ordered %>% group_by(mut, reps) %>%
summarise(pnew = mean(avg_mut[1:30]))
pnew <- mean(New_data_cutoff$avg_mut[1:30])
pnew
New_data_ordered <- New_data_summary[order(New_data_summary$avg_mut, mut, reps, decreasing=TRUE), ]
New_data_ordered <- New_data_summary[order(New_data_summary$avg_mut, New_data_summary$mut, New_data_summary$reps, decreasing=TRUE), ]
New_data_ordered
New_data_ordered <- New_data_summary[order(New_data_summary$mut, New_data_summary$reps, New_data_summary$avg_mut, decreasing=TRUE), ]
New_data_ordered
## This part has some magic numbers I should get rid of
## or move to user input
New_data_cutoff <- New_data_ordered[New_data_ordered$n > 50,]
New_data_cutoff
New_data_ordered %>% group_by(mut, reps) %>%
summarise(pnew = mean(avg_mut[1:10]))
pnew <- mean(New_data_cutoff$avg_mut[1:30])
pnew
pnew <- mean(New_data_cutoff$avg_mut[1:10])
pnew
New_data_cutoff[1:10,]
avg_mut[1:10]
mean(New_data_cutoff$avg_mut[1:10])
New_data_cutoff %>% group_by(mut, reps) %>%
summarise(pnew = mean(avg_mut[1:10]))
pnew <- mean(New_data_cutoff$avg_mut[1:10])
pnew
New_data_estimate <- New_data_cutoff %>% group_by(mut, reps) %>%
summarise(pnew = mean(avg_mut[1:10]))
pnew <- New_data_estimate$pnew
pnew
test <- c(10, 15, 20, 25, 30, 40, 45, 50, 55, 60)
test[1:5]
test[1:5]
quantile(test, p=0.9)
quantile(test, p=0.8)
quantile(test, p=0.1)
quantile(test, p=0.01)
test <- c(5, 10, 15, 20, 25, 30, 40, 45, 50, 55, 60, 65)
quantile(test, p=0.1)
quantile(New_data_ordered$n, prob = (1 - 30/max(New_data_ordered$fnum))
)
New_data_ordered <- New_data_summary[order(New_data_summary$mut, New_data_summary$reps, New_data_summary$avg_mut, n, decreasing=TRUE), ]
New_data_ordered <- New_data_summary[order(New_data_summary$mut, New_data_summary$reps, New_data_summary$avg_mut, New_data_summary$n, decreasing=TRUE), ]
New_data_ordered
New_data_ordered <- New_data_summary[order(New_data_summary$mut, New_data_summary$reps, New_data_summary$avg_mut, decreasing=TRUE), ]
New_data_ordered
check <- New_data_cutoff %>% group_by(mut, reps) %>%
table()
check <- New_data_cutoff %<% count(mut, reps, sort = TRUE)
check <- New_data_cutoff %>% count(mut, reps, sort = TRUE)
check
New_data_cutoff %>% count(mut, reps, sort = TRUE)
New_data_cutoff %>% ungroup() %>%
count(mut, reps, sort = TRUE)
check <- New_data_cutoff %>% ungroup() %>%
count(mut, reps, sort = TRUE)
if(sum(check$n > 50) > 0)
if(sum(check$n > 50) > 0){
print("Damn")
}
if(sum(check$n < 50) > 0){
print("Damn")
}
test <- c(1, 2, 3)
message(test)
message("test is " test)
message(paste("Test is", test, sep=": "))
?rbind
rep(seq(from = 1, to = 2), each = 3)
devtools::document()
getwd()
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::document()
devtools::load_all()
devtools::load_all()
#Analyze data with fast analysis
df_fn <- fast_analysis(df_fast)
New_data_estimate
df_fast_slim <-  df_fast[df_fast$fnum < 100, ]
df_fn <- fast_analysis(df_fast, pnew = pnews, pold = 0.00207)
#Analyze data with fast analysis
pnews <- c(0.125, 0.127, 0.088, 0.083)
df_fn <- fast_analysis(df_fast, pnew = pnews, pold = 0.00207)
devtools::load_all()
df_fn <- fast_analysis(df_fast, pnew = pnews, pold = 0.00207)
devtools::load_all()
df_fn <- fast_analysis(df_fast, pnew = pnews, pold = 0.00207)
df_fn <- fast_analysis(df_fast_slim, pnew = pnews, pold = 0.00207)
devtools::load_all()
df_fn <- fast_analysis(df_fast_slim, pnew = pnews, pold = 0.00207)
df_fn
fn_list <- df_fn
df_fn <- fn_list[[1]]
### Testing out Bayesian regularization at end of fast_analysis
nreps <- max(df_fn$Replicate)
#Average over replicates
avg_df_fn <- df_fn %>% dplyr::group_by(Gene_ID, Condition) %>%
summarize(avg_logit_fn = mean(logit_fn),
sd_boot = mean(logit_fn_sd),
sd_logit_fn = sd(logit_fn))
avg_df_fn
df_fn
nrow(df_fn)
max(df_fast_slim$fnum)
fn_list[[3]]
fn_list[[3]][[1]]$pnew[(fn_list[[3]][[1]]$mut == 2) && (fn_list[[3]][[1]]$reps == 1)]
fn_list[[3]][[1]]$pnew
fn_list[[3]][[1]]$pnew[(fn_list[[3]][[1]]$mut == 2) & (fn_list[[3]][[1]]$reps == 1)]
df_fn <- fast_analysis(df_fast_slim, pnew = pnews, pold = 0.00207)
fn_list <- df_fn
df_fn <- fn_list[[1]]
fn_list
devtools::load_all()
fn_list <- fast_analysis(df_fast_slim, pnew = pnews, pold = 0.00207)
fn_list
###HETEROSKEDASTICITY???###
require(tidyverse)
library(rstan)
library(loo)
require(extrafont)
library(bayesplot)
require(EnvStats)
library(devtools)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
setwd("C:/Users/isaac/Documents/Simon_Lab/TimeLapse_Paper/Real_Data/")
#Load cB
cB <- readRDS("cB.rds")
# Define experimental design:
samp_list <- c('JS181101', 'JS181102','JS181107', 'JS181108',
'JS181113', 'JS181114')
type_list <- c(1, 1, 1, 1, 0, 0)
mut_list <- c(1, 1, 2, 2, 1 ,2)
rep_list <- c(rep(c(1,2), times=2), 1, 1)
tl <- 2 #label time
keep_params <- c(0.2, 50) #1st entry is mut rate cutoff for control sample; second is read count cutoff
#Process cB for fast analysis
df_fast <- cBtofast(cB,
samp_list,
type_list,
mut_list,
rep_list,
tl)
#Analyze data with fast analysis
pnews <- c(0.125, 0.127, 0.088, 0.083)
df_fast_slim <-  df_fast[df_fast$fnum < 100, ]
fn_list <- fast_analysis(df_fast_slim, pnew = pnews, pold = 0.00207)
fn_list <- fast_analysis(df_fast_slim, pnew = pnews, pold = 0.00207)
devtools::load_all()
getwd()
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
fn_list <- fast_analysis(df_fast_slim, pnew = pnews, pold = 0.00207)
df_fn <- fn_list[[1]]
df_fn
devtools::load_all()
fn_list <- fast_analysis(df_fast_slim, pnew = pnews, pold = 0.00207)
df_fn <- fn_list[[1]]
avg_df_fn <- fn_list[[2]]
avg_df_fn
hist(avg_df_fn$sd_boot)
mean(avg_df_fn$sd_boot)
mean(avg_df_fn$sd_logit_fn)
plot(avg_df_fn$sd_boot, avg_df_fn$sd_logit_fn)
devtools::load_all()
fn_list <- fast_analysis(df_fast, pnew = pnews, pold = 0.00207)
devtools::load_all()
