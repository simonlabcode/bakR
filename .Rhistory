message("Estimating fraction labeled")
Mut_data <- merge(Mut_data, New_data_estimate, by = c("mut", "reps"))
## Add total read count information to Mut_data
Count_data <- Mut_data %>% dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(ntot = sum(n)) %>% ungroup()
Mut_data <- merge(Mut_data, Count_data, by = c("fnum", "mut", "reps"))
mixed_lik <- function(lam_n, lam_o, TC, n, logit_fn){
logl <- sum(n*log(pracma::sigmoid(logit_fn)*(lam_n^TC)*exp(-lam_n) + (1-pracma::sigmoid(logit_fn))*(lam_o^TC)*exp(-lam_o) ))
return(-logl)
}
Mut_data_est <- Mut_data %>% ungroup() %>% dplyr::mutate(lam_n = pnew*nT, lam_o = pold*nT) %>%
dplyr::group_by(fnum, mut, reps, TC) %>%
#dplyr::summarise(lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n),
#                 prop = sum(n)/mean(ntot), TC_reads = sum(n), .group = "keep") %>%
dplyr::summarise(lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n),
n = sum(n), .group = "keep") %>%
# mutate(avg_mut = TC/nT) %>%
# #mutate(prior_new = ifelse(avg_mut >= (pnew_est - 0.01), 0.99, (avg_mut + 0.01)/pnew_est )) %>%
# mutate(prior_new = 0.9)%>%
# dplyr::mutate(New_prob = stats::dpois(TC, lambda = lam_n)) %>%
# dplyr::mutate(Old_prob = stats::dpois(TC, lambda = lam_o)) %>%
# dplyr::mutate(Fn_prelim = (prop - Old_prob)/(New_prob - Old_prob)) %>%
dplyr::ungroup() %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(logit_fn_rep = optim(0.5, mixed_lik, TC = TC, n = n, lam_n = lam_n, lam_o = lam_o, method = "BFGS")$par, nreads =sum(n), .groups = "keep") %>%
dplyr::mutate(Fn_rep_est = inv_logit(logit_fn_rep)) %>%
dplyr::ungroup()
hist(Mut_data_est$logit_fn_rep)
sum(Mut_data_est$logit_fn_rep < -10)
message("Estimating per replicate uncertainties")
Mut_data <- merge(Mut_data, Mut_data_est[, c("logit_fn_rep", "fnum", "mut", "reps")], by = c("fnum", "mut", "reps"))
## Estimate Fisher Info and uncertainties
## Could make more efficient by summarizing over nT info and using U_content to adjust pnew*avg_U
Mut_data <- Mut_data %>% ungroup() %>%
dplyr::group_by(fnum, mut, reps, TC, pnew, logit_fn_rep) %>%
dplyr::summarise(U_cont = sum(nT*n)/sum(n), n = sum(n), .groups = "keep") %>%
dplyr::mutate(Exp_l_fn = exp(logit_fn_rep)) %>%
# dplyr::mutate(fn = inv_logit(Mut_data_est$logit_fn_rep[(Mut_data_est$mut == mut) & (Mut_data_est$reps == reps) & (Mut_data_est$fnum == fnum)])) %>%
# dplyr::mutate(Fisher_fn_num = ((pnew_est*nT)^TC)*exp(-pnew_est*nT) - ((pold*nT)^TC)*exp(-pold*nT) ) %>%
# dplyr::mutate(Fisher_fn_den = fn*Fisher_fn_num + ((pold*nT)^TC)*exp(-pold*nT)) %>%
dplyr::mutate(Inv_Fisher_Logit_3 = 1/(((pnew/pold)^TC)*exp(-(U_cont)*(pnew - pold)) - 1 )) %>%
dplyr::mutate(Inv_Fisher_Logit_1 = 1 + Exp_l_fn ) %>%
dplyr::mutate(Inv_Fisher_Logit_2 = ((1 + Exp_l_fn)^2)/Exp_l_fn) %>%
dplyr::ungroup() %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(Fisher_Logit = sum(n/((Inv_Fisher_Logit_1 + Inv_Fisher_Logit_2*Inv_Fisher_Logit_3)^2))/sum(n), tot_n = sum(n)) %>% #,
#Fisher_fn = sum(n*((Fisher_fn_num/Fisher_fn_den)^2)), tot_n = sum(n)) %>%
dplyr::mutate(Logit_fn_se = 1/sqrt(tot_n*Fisher_Logit)) #, Fn_se = 1/sqrt(tot_n*Fisher_fn))
Mut_data_est$logit_fn_se = Mut_data$Logit_fn_se
if(is.null(nbin)){
nbin <- max(c(round(ngene*num_conds*nreps/100), 10))
}
message("Estimating mean-variance relationship")
Binned_data <- Mut_data_est %>% dplyr::group_by(fnum, mut) %>%
dplyr::summarise(nreads = sum(nreads),fn_sd_log = log(sqrt(1/sum(1/((sd(logit_fn_rep)^2)*((nreps-1)/(nreps+1)) + logit_fn_se^2 ) ) ) )) %>%
dplyr::ungroup() %>%
dplyr::mutate(bin_ID = as.numeric(Hmisc::cut2(nreads, g = nbin))) %>% dplyr::group_by(bin_ID) %>%
dplyr::summarise(avg_reads = mean(log10(nreads)), avg_sd = mean(fn_sd_log))
## Regress avg_reads vs. avg_sd
heterosked_lm <- stats::lm(avg_sd ~ avg_reads, data = Binned_data )
h_int <- summary(heterosked_lm)$coefficients[1,1]
pracma::sigmoid(-15)
pracma::sigmoid(-10)
Mut_data_est <- Mut_data %>% ungroup() %>% dplyr::mutate(lam_n = pnew*nT, lam_o = pold*nT) %>%
dplyr::group_by(fnum, mut, reps, TC) %>%
#dplyr::summarise(lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n),
#                 prop = sum(n)/mean(ntot), TC_reads = sum(n), .group = "keep") %>%
dplyr::summarise(lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n),
n = sum(n), .group = "keep") %>%
# mutate(avg_mut = TC/nT) %>%
# #mutate(prior_new = ifelse(avg_mut >= (pnew_est - 0.01), 0.99, (avg_mut + 0.01)/pnew_est )) %>%
# mutate(prior_new = 0.9)%>%
# dplyr::mutate(New_prob = stats::dpois(TC, lambda = lam_n)) %>%
# dplyr::mutate(Old_prob = stats::dpois(TC, lambda = lam_o)) %>%
# dplyr::mutate(Fn_prelim = (prop - Old_prob)/(New_prob - Old_prob)) %>%
dplyr::ungroup() %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(logit_fn_rep = optim(0.5, mixed_lik, TC = TC, n = n, lam_n = lam_n, lam_o = lam_o, method = "BFGS")$par, nreads =sum(n), .groups = "keep") %>%
dplyr::mutate(logit_fn_rep = ifelse(logit_fn_rep < -10, runif(1, -12, -10), ifelse(logit_fn_rep > 10, runif(1, 10, 12))))
Mut_data <- df
Mut_data <- Mut_data[Mut_data$type == 1,]
ngene <- max(Mut_data$fnum)
num_conds <- max(Mut_data$mut)
nreps <- max(Mut_data$reps)
sample_lookup <- Mut_data[, c("sample", "mut", "reps")] %>% dplyr::distinct()
feature_lookup <- Mut_data[,c("fnum", "XF")] %>% dplyr::distinct()
fn_rep_est <- rep(0, times=ngene*num_conds*nreps)
dim(fn_rep_est) <- c(ngene, num_conds, nreps)
R_ID <- fn_rep_est
MT_ID <- R_ID
FN_ID <- R_ID
# Estimate fraction new in each replicate using binomial model
message("Estimating fraction labeled")
Mut_data <- merge(Mut_data, New_data_estimate, by = c("mut", "reps"))
## Add total read count information to Mut_data
Count_data <- Mut_data %>% dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(ntot = sum(n)) %>% ungroup()
Mut_data <- merge(Mut_data, Count_data, by = c("fnum", "mut", "reps"))
mixed_lik <- function(lam_n, lam_o, TC, n, logit_fn){
logl <- sum(n*log(pracma::sigmoid(logit_fn)*(lam_n^TC)*exp(-lam_n) + (1-pracma::sigmoid(logit_fn))*(lam_o^TC)*exp(-lam_o) ))
return(-logl)
}
Mut_data_est <- Mut_data %>% ungroup() %>% dplyr::mutate(lam_n = pnew*nT, lam_o = pold*nT) %>%
dplyr::group_by(fnum, mut, reps, TC) %>%
#dplyr::summarise(lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n),
#                 prop = sum(n)/mean(ntot), TC_reads = sum(n), .group = "keep") %>%
dplyr::summarise(lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n),
n = sum(n), .group = "keep") %>%
# mutate(avg_mut = TC/nT) %>%
# #mutate(prior_new = ifelse(avg_mut >= (pnew_est - 0.01), 0.99, (avg_mut + 0.01)/pnew_est )) %>%
# mutate(prior_new = 0.9)%>%
# dplyr::mutate(New_prob = stats::dpois(TC, lambda = lam_n)) %>%
# dplyr::mutate(Old_prob = stats::dpois(TC, lambda = lam_o)) %>%
# dplyr::mutate(Fn_prelim = (prop - Old_prob)/(New_prob - Old_prob)) %>%
dplyr::ungroup() %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(logit_fn_rep = optim(0.5, mixed_lik, TC = TC, n = n, lam_n = lam_n, lam_o = lam_o, method = "BFGS")$par, nreads =sum(n), .groups = "keep") %>%
dplyr::mutate(logit_fn_rep = ifelse(logit_fn_rep < -10, runif(1, -12, -10), ifelse(logit_fn_rep > 10, runif(1, 10, 12)))) %>%
dplyr::mutate(Fn_rep_est = inv_logit(logit_fn_rep)) %>%
dplyr::ungroup()
hist(Mut_data_est$logit_fn_rep)
Mut_data_est <- Mut_data %>% ungroup() %>% dplyr::mutate(lam_n = pnew*nT, lam_o = pold*nT) %>%
dplyr::group_by(fnum, mut, reps, TC) %>%
#dplyr::summarise(lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n),
#                 prop = sum(n)/mean(ntot), TC_reads = sum(n), .group = "keep") %>%
dplyr::summarise(lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n),
n = sum(n), .group = "keep") %>%
# mutate(avg_mut = TC/nT) %>%
# #mutate(prior_new = ifelse(avg_mut >= (pnew_est - 0.01), 0.99, (avg_mut + 0.01)/pnew_est )) %>%
# mutate(prior_new = 0.9)%>%
# dplyr::mutate(New_prob = stats::dpois(TC, lambda = lam_n)) %>%
# dplyr::mutate(Old_prob = stats::dpois(TC, lambda = lam_o)) %>%
# dplyr::mutate(Fn_prelim = (prop - Old_prob)/(New_prob - Old_prob)) %>%
dplyr::ungroup() %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(logit_fn_rep = optim(0.5, mixed_lik, TC = TC, n = n, lam_n = lam_n, lam_o = lam_o, method = "BFGS")$par, nreads =sum(n), .groups = "keep") %>%
dplyr::mutate(logit_fn_rep = ifelse(logit_fn_rep < -10, runif(1, -12, -10), ifelse(logit_fn_rep > 10, runif(1, 10, 12), logit_fn_rep))) %>%
dplyr::mutate(Fn_rep_est = inv_logit(logit_fn_rep)) %>%
dplyr::ungroup()
hist(Mut_data_est$logit_fn_rep)
TC <- c(0, 1, 2, 3, 4)
n <- c(80, 60, 20, 5, 1)
lam_n <- 25*0.05
lam_o <- 25*0.004
#fit <- optim(0.5, mixed_lik, TC = as.vector(TC_tot$TC), n = as.vector(TC_tot$n), lam_n = 25*0.05, lam_o = 25*0.004, method = "BFGS")
optim(0.5, mixed_lik, TC = TC, n = n, lam_n = lam_n, lam_o = lam_o, method = "BFGS" )$par
TC <- c(0, 1, 2, 3, 4, 5)
n <- c(70, 80, 30, 15, 5, 1)
lam_n <- 25*0.05
lam_o <- 25*0.004
#fit <- optim(0.5, mixed_lik, TC = as.vector(TC_tot$TC), n = as.vector(TC_tot$n), lam_n = 25*0.05, lam_o = 25*0.004, method = "BFGS")
optim(0.5, mixed_lik, TC = TC, n = n, lam_n = lam_n, lam_o = lam_o, method = "BFGS" )$par
pracma::sigmoid(19.3861)
TC <- c(0, 1, 2, 3, 4, 5)
n <- c(70, 80, 30, 15, 5, 1)
lam_n <- 25*0.05
lam_o <- 25*0.004
#fit <- optim(0.5, mixed_lik, TC = as.vector(TC_tot$TC), n = as.vector(TC_tot$n), lam_n = 25*0.05, lam_o = 25*0.004, method = "BFGS")
optim(0.5, mixed_lik, TC = TC, n = n, lam_n = lam_n, lam_o = lam_o, method = "BFGS" )$par
?optim
#fit <- optim(0.5, mixed_lik, TC = as.vector(TC_tot$TC), n = as.vector(TC_tot$n), lam_n = 25*0.05, lam_o = 25*0.004, method = "BFGS")
optim(0.5, mixed_lik, TC = TC, n = n, lam_n = lam_n, lam_o = lam_o, method = "L-BFGS-B", lower = -5, upper = 5 )$par
pracma::sigmoid(2.07718)
Mut_data_est <- Mut_data %>% ungroup() %>% dplyr::mutate(lam_n = pnew*nT, lam_o = pold*nT) %>%
dplyr::group_by(fnum, mut, reps, TC) %>%
#dplyr::summarise(lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n),
#                 prop = sum(n)/mean(ntot), TC_reads = sum(n), .group = "keep") %>%
dplyr::summarise(lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n),
n = sum(n), .group = "keep") %>%
# mutate(avg_mut = TC/nT) %>%
# #mutate(prior_new = ifelse(avg_mut >= (pnew_est - 0.01), 0.99, (avg_mut + 0.01)/pnew_est )) %>%
# mutate(prior_new = 0.9)%>%
# dplyr::mutate(New_prob = stats::dpois(TC, lambda = lam_n)) %>%
# dplyr::mutate(Old_prob = stats::dpois(TC, lambda = lam_o)) %>%
# dplyr::mutate(Fn_prelim = (prop - Old_prob)/(New_prob - Old_prob)) %>%
dplyr::ungroup() %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(logit_fn_rep = optim(0.5, mixed_lik, TC = TC, n = n, lam_n = lam_n, lam_o = lam_o, method = "L-BFGS-B", lower = -6, upper = 6)$par, nreads =sum(n), .groups = "keep") %>%
dplyr::mutate(logit_fn_rep = ifelse(logit_fn_rep < -10, runif(1, -12, -10), ifelse(logit_fn_rep > 10, runif(1, 10, 12), logit_fn_rep))) %>%
dplyr::mutate(Fn_rep_est = inv_logit(logit_fn_rep)) %>%
dplyr::ungroup()
hist(Mut_data_est$logit_fn_rep)
Mut_data_est <- Mut_data %>% ungroup() %>% dplyr::mutate(lam_n = pnew*nT, lam_o = pold*nT) %>%
dplyr::group_by(fnum, mut, reps, TC) %>%
#dplyr::summarise(lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n),
#                 prop = sum(n)/mean(ntot), TC_reads = sum(n), .group = "keep") %>%
dplyr::summarise(lam_n = sum(lam_n*n)/sum(n), lam_o = sum(lam_o*n)/sum(n),
n = sum(n), .group = "keep") %>%
# mutate(avg_mut = TC/nT) %>%
# #mutate(prior_new = ifelse(avg_mut >= (pnew_est - 0.01), 0.99, (avg_mut + 0.01)/pnew_est )) %>%
# mutate(prior_new = 0.9)%>%
# dplyr::mutate(New_prob = stats::dpois(TC, lambda = lam_n)) %>%
# dplyr::mutate(Old_prob = stats::dpois(TC, lambda = lam_o)) %>%
# dplyr::mutate(Fn_prelim = (prop - Old_prob)/(New_prob - Old_prob)) %>%
dplyr::ungroup() %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(logit_fn_rep = optim(0.5, mixed_lik, TC = TC, n = n, lam_n = lam_n, lam_o = lam_o, method = "L-BFGS-B", lower = -7, upper = 7)$par, nreads =sum(n), .groups = "keep") %>%
dplyr::mutate(logit_fn_rep = ifelse(logit_fn_rep < -10, runif(1, -12, -10), ifelse(logit_fn_rep > 10, runif(1, 10, 12), logit_fn_rep))) %>%
dplyr::mutate(Fn_rep_est = inv_logit(logit_fn_rep)) %>%
dplyr::ungroup()
hist(Mut_data_est$logit_fn_rep)
Mut_data <- merge(Mut_data, Mut_data_est[, c("logit_fn_rep", "fnum", "mut", "reps")], by = c("fnum", "mut", "reps"))
## Estimate Fisher Info and uncertainties
## Could make more efficient by summarizing over nT info and using U_content to adjust pnew*avg_U
Mut_data <- Mut_data %>% ungroup() %>%
dplyr::group_by(fnum, mut, reps, TC, pnew, logit_fn_rep) %>%
dplyr::summarise(U_cont = sum(nT*n)/sum(n), n = sum(n), .groups = "keep") %>%
dplyr::mutate(Exp_l_fn = exp(logit_fn_rep)) %>%
# dplyr::mutate(fn = inv_logit(Mut_data_est$logit_fn_rep[(Mut_data_est$mut == mut) & (Mut_data_est$reps == reps) & (Mut_data_est$fnum == fnum)])) %>%
# dplyr::mutate(Fisher_fn_num = ((pnew_est*nT)^TC)*exp(-pnew_est*nT) - ((pold*nT)^TC)*exp(-pold*nT) ) %>%
# dplyr::mutate(Fisher_fn_den = fn*Fisher_fn_num + ((pold*nT)^TC)*exp(-pold*nT)) %>%
dplyr::mutate(Inv_Fisher_Logit_3 = 1/(((pnew/pold)^TC)*exp(-(U_cont)*(pnew - pold)) - 1 )) %>%
dplyr::mutate(Inv_Fisher_Logit_1 = 1 + Exp_l_fn ) %>%
dplyr::mutate(Inv_Fisher_Logit_2 = ((1 + Exp_l_fn)^2)/Exp_l_fn) %>%
dplyr::ungroup() %>%
dplyr::group_by(fnum, mut, reps) %>%
dplyr::summarise(Fisher_Logit = sum(n/((Inv_Fisher_Logit_1 + Inv_Fisher_Logit_2*Inv_Fisher_Logit_3)^2))/sum(n), tot_n = sum(n)) %>% #,
#Fisher_fn = sum(n*((Fisher_fn_num/Fisher_fn_den)^2)), tot_n = sum(n)) %>%
dplyr::mutate(Logit_fn_se = 1/sqrt(tot_n*Fisher_Logit)) #, Fn_se = 1/sqrt(tot_n*Fisher_fn))
Mut_data_est$logit_fn_se = Mut_data$Logit_fn_se
if(is.null(nbin)){
nbin <- max(c(round(ngene*num_conds*nreps/100), 10))
}
message("Estimating mean-variance relationship")
Binned_data <- Mut_data_est %>% dplyr::group_by(fnum, mut) %>%
dplyr::summarise(nreads = sum(nreads),fn_sd_log = log(sqrt(1/sum(1/((sd(logit_fn_rep)^2)*((nreps-1)/(nreps+1)) + logit_fn_se^2 ) ) ) )) %>%
dplyr::ungroup() %>%
dplyr::mutate(bin_ID = as.numeric(Hmisc::cut2(nreads, g = nbin))) %>% dplyr::group_by(bin_ID) %>%
dplyr::summarise(avg_reads = mean(log10(nreads)), avg_sd = mean(fn_sd_log))
## Regress avg_reads vs. avg_sd
heterosked_lm <- stats::lm(avg_sd ~ avg_reads, data = Binned_data )
h_int <- summary(heterosked_lm)$coefficients[1,1]
h_slope <- summary(heterosked_lm)$coefficients[2,1]
logit_fn <- as.vector(Mut_data_est$logit_fn_rep)
fn_estimate <- as.vector(Mut_data_est$Fn_rep_est)
# fn_se <- as.vector(Mut_data_est$fn_se)
logit_fn_se <- as.vector(Mut_data_est$logit_fn_se)
Replicate <- as.vector(Mut_data_est$reps)
Condition <- as.vector(Mut_data_est$mut)
Gene_ID <- as.vector(Mut_data_est$fnum)
nreads <- as.vector(Mut_data_est$nreads)
rm(Mut_data_est)
df_fn <- data.frame(logit_fn, logit_fn_se, fn_estimate, Replicate, Condition, Gene_ID, nreads)
df_fn <- df_fn[order(df_fn$Gene_ID, df_fn$Condition, df_fn$Replicate),]
nreps <- max(df_fn$Replicate)
message("Averaging replicate data and regularizing estimates")
#Average over replicates and estimate hyperparameters
avg_df_fn_bayes <- df_fn %>% dplyr::group_by(Gene_ID, Condition) %>%
dplyr::summarize(avg_logit_fn = stats::weighted.mean(logit_fn, 1/logit_fn_se),
sd_logit_fn = sqrt(1/sum(1/((sd(logit_fn)^2)*((nreps-1)/(nreps+1)) + logit_fn_se^2 ) ) ),
nreads = sum(nreads)) %>% dplyr::ungroup() %>%
dplyr::group_by(Condition) %>%
dplyr::mutate(sdp = sd(avg_logit_fn)) %>%
dplyr::mutate(theta_o = mean(avg_logit_fn)) %>%
# mutate(var_pop = mean(sd_logit_fn^2)) %>%
# mutate(var_of_var = var(sd_logit_fn^2)) %>%
# mutate(two_params = 8*(var_pop^4)/var_of_var) %>%
# mutate(roots = RConics::cubic(c(1, -(4 + 2*(var_pop^2)/var_of_var), two_params, two_params))) %>%
# mutate(a_hyper = roots[(roots > 2) & (!is.complex(roots))]) %>%
# mutate(b_hyper = (var_pop*(a_hyper - 2))/a_hyper) %>%
dplyr::ungroup()
var_pop <- mean(avg_df_fn_bayes$sd_logit_fn^2) # Will be prior mean in regularization of sd
var_of_var <- stats::var(avg_df_fn_bayes$sd_logit_fn^2) # Will be prior variance in regularization of sd
var_of_var
## Regularize standard deviation estimate
# Estimate hyperpriors with method of moments
two_params <- 8*(var_pop^4)/var_of_var
b <- c(1, -(4 + 2*(var_pop^2)/var_of_var), two_params, two_params)
roots <- RConics::cubic(b)
a_hyper <- roots[(roots > 2) & (!is.complex(roots))]
b_hyper <- (var_pop*(a_hyper - 2))/a_hyper
a_hyper
crazy_rows <- which(avg_df_fn_bayes$sd_logit_fn > 10)
hist(Count_data$ntot[(Count_data$fnum %in% crazy_gene_ids) & (Count_data$mut %in% crazy_exp_ids)])
?pracma::sigmoid
pracma::sigmoid
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
fast_list <- fast_analysis(data_list$Fast_df, read_cut = 30)
fast_list_MLE <- fast_analysis(data_list$Fast_df, read_cut = 30)
fast_list_Bayes <- fast_analysis(data_list$Fast_df, read_cut = 30, MLE = FALSE)
plot(fast_list_MLE$Fn_Estimates$logit_fn, fast_list_Bayes$Fn_Estimates$logit_fn)
plot(fast_list_MLE$Regularized_ests$sd_post, fast_list_Bayes$Regularized_ests$sd_post)
plot(fast_list_MLE$Regularized_ests$sd_post, fast_list_Bayes$Regularized_ests$sd_post)
abline(a = 0, b =1)
document()
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
fast_list_MLE <- fast_analysis(data_list$Fast_df, read_cut = 30)
devtools::load_all()
fast_list_MLE <- fast_analysis(data_list$Fast_df, read_cut = 30)
plot(fast_list_MLE$Fn_Estimates$logit_fn, fast_list_Bayes$Fn_Estimates$logit_fn)
plot(fast_list_MLE$Regularized_ests$sd_post, fast_list_Bayes$Regularized_ests$sd_post)
abline(a = 0, b =1)
fast_list_MLE <- fast_analysis(data_list$Fast_df, read_cut = 30, upper = 8, lower = -8)
fast_list_MLE <- fast_analysis(data_list$Fast_df, read_cut = 30, upper = 7, lower = -7)
fast_list_MLE <- fast_analysis(data_list$Fast_df, read_cut = 30, upper = 6, lower = -6)
plot(fast_list_MLE$Fn_Estimates$logit_fn, fast_list_Bayes$Fn_Estimates$logit_fn)
plot(fast_list_MLE$Regularized_ests$sd_post, fast_list_Bayes$Regularized_ests$sd_post)
abline(a = 0, b =1)
plot(fast_list_MLE$Fn_Estimates$logit_fn_se, fast_list_Bayes$Fn_Estimates$logit_fn_se)
abline(a = 0, b =1)
fast_list_MLE$Fn_Estimates$logit_fn[which(fast_list_MLE$Fn_Estimates$logit_fn_se > 30)]
fast_list_MLE$Fn_Estimates$logit_fn[which(fast_list_MLE$Fn_Estimates$logit_fn_se > 10)]
fast_list_MLE$Fn_Estimates$logit_fn[which(fast_list_MLE$Fn_Estimates$logit_fn_se > 8)]
hist(fast_list_MLE$Fn_Estimates$fn_estimate)
setwd("C:/Users/isaac/Documents/Simon_Lab/MyfirstPaper/Data/Simulated_dfs/")
sim_df_1 <- readRDS("Controls/effect_size_4.0_rep_var_0.05_1000_genes.rds")
hist(sim_df_1$fn_s4U)
setwd("C:/Users/isaac/Documents/Simon_Lab/MyfirstPaper/Data/Real_cBs/")
cB <- readRDS("cB.rds")
# This is the name of all of all the samples you want to analyze as they show up in
# the sample column of the cB. Order is important for next couple lines
samp_list <- c('JS181101', 'JS181102','JS181107', 'JS181108',
'JS181113', 'JS181114')
# Samples in samp_list are no s4U controls
c_list <- c('JS181113', 'JS181114')
# 1 = if corresponding sample in samp_list is s4U fed;
# 0 = no s4U control
# Order of type_list corresponds to order of samp_list
type_list <- c(1, 1, 1, 1, 0, 0)
# Experimental condition IDs
# 1 = reference, > 1 = experimental conditions that you want to compare to reference
mut_list <- c(1, 1, 2, 2, 1 ,2)
# Replicate ID
# Arbitrarily labels 1st, 2nd, etc. replicate of each experimental condition
rep_list <- c(rep(c(1,2), times=2), 1, 1)
data_list <- cBprocess(cB, samp_list, type_list, mut_list, rep_list, 2, Fast = TRUE)
colnames(cB)
cB <- cB %>% select(XF, nT, TC, sample, n)
unique(cB$sample)
metadf <- data.frame(tl = c(2, 2, 2, 2, 0, 0),
Exp_ID = c(1L, 1L, 2L, 2L, 1L, 2L))
rownames(metadf) <- unique(cB$sample)
DynData <- DynamicSeqData(cB, metadf)
data_list <- cBprocess(DynData, Fast = TRUE)
Fast_df <- data_list$Fast_df
fast_list <- fast_analysis(Fast_df)
fast_list_Bayes <- fast_analysis(Fast_df, MLE = FALSE)
max(fast_list_Bayes$Fn_Estimates$logit_fn)
fast_list <- fast_analysis(Fast_df, lower = -5, upper = 5)
plot(fast_list$Fn_Estimates$logit_fn, fast_list_Bayes$Fn_Estimates$logit_fn)
plot(fast_list$Fn_Estimates$logit_fn_se, fast_list_Bayes$Fn_Estimates$logit_fn_se)
fast_list$Fn_Estimates$logit_fn[fast_list$Fn_Estimates$logit_fn_se > 5]
fast_list$Fn_Estimates$Gene_ID[fast_list$Fn_Estimates$logit_fn_se > 5]
fast_list$Fn_Estimates$XF[fast_list$Fn_Estimates$logit_fn_se > 5]
### See what Stan estimates for the wild feature
setwd("C:/Users/isaac/Documents/Simon_Lab/MyfirstPaper/Comparing_Models/DCP2/Fits/")
fit_stan <- readRDS("DCP2_Heterosked_fit_summary_2021_08_27.rds")
setwd("C:/Users/isaac/Documents/Simon_Lab/MyfirstPaper/Data/Real_cBs/")
data_stan <- readRDS("Stan_data_list_DCP2.rds")
fit_stan[grep("logit_fn", fit_stan$variable),]
stan_fns <- fit_stan[grep("logit_fn", fit_stan$variable),]
stan_fns$FN <- rep(1:(nrow(stan_fns)/4), times = 4)
stan_fns$MT <- rep(rep(1:2, each = nrow(stan_fns)/4), times = 2)
fast_list$Fn_Estimates$XF[fast_list$Fn_Estimates$logit_fn_se > 5]
data_stan$Stan_data$sdf$fnum[data_stan$Stan_data$sdf$XF == "AC004453.8"]
fnum_crazy <- unique(data_stan$Stan_data$sdf$fnum[data_stan$Stan_data$sdf$XF == "AC004453.8"])
stan_fns[stan_fns$FN == fnum_crazy,]
## Look at regularization of crazy gene estimates
reg_ests <- fast_list$Regularized_ests
crazy_gene <- unique(fast_list$Fn_Estimates$XF[fast_list$Fn_Estimates$logit_fn_se > 5])
reg_ests[reg_ests$XF == crazy_gene,]
rep_ests <- fast_list$Fn_Estimates
rep_ests[rep_ests$XF == crazy_gene,]
max(stan_fns$sd)
### See what Stan estimates for the wild feature
setwd("C:/Users/isaac/Documents/Simon_Lab/MyfirstPaper/Comparing_Models/DCP2/Fits/")
fit_stan <- readRDS("DCP2_Unpooled_Reps_fit_summary_2021_08_27.rds")
stan_fns <- fit_stan[grep("logit_fn", fit_stan$variable),]
stan_fns$FN <- rep(1:(nrow(stan_fns)/4), times = 4)
stan_fns$MT <- rep(rep(1:2, each = nrow(stan_fns)/4), times = 2)
fnum_crazy <- unique(data_stan$Stan_data$sdf$fnum[data_stan$Stan_data$sdf$XF == "AC004453.8"])
stan_fns[stan_fns$FN == fnum_crazy,]
max(stan_fns$sd)
max(fast_list_Bayes$Fn_Estimates$logit_fn_se)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
fast_list <- fast_analysis(Fast_df)
plot(fast_list$Fn_Estimates$logit_fn, fast_list_Bayes$Fn_Estimates$logit_fn)
plot(fast_list$Fn_Estimates$logit_fn_se, fast_list_Bayes$Fn_Estimates$logit_fn_se)
FnPCA(fast_list)
FnPCA(fast_list_Bayes)
plotVolcano(fast_list)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
plotVolcano(fast_list)
max(fast_list$Fn_Estimates$Gene_ID)
Fast_df
max(Fast_df$fnum)
Fast_df <- data_list$Fast_df
fast_list <- fast_analysis(Fast_df)
FnPCA(fast_list)
plotVolcano(fast_list)
max(fast_list$Fn_Estimates$Gene_ID)
fast_list_Bayes <- fast_analysis(Fast_df, MLE = FALSE)
max(fast_list_Bayes$Fn_Estimates$Gene_ID)
max(Fast_df$fnum)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
fast_list <- fast_analysis(Fast_df)
FnPCA(fast_list)
plotVolcano(fast_list)
max(fast_list$Fn_Estimates$Gene_ID)
FnPCA(fast_list)
# Look at if one replicate trends in particular direction
hist(fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 1) & (fast_list$Fn_Estimates$Replicate == 1) ] - fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 1) & (fast_list$Fn_Estimates$Replicate == 2) ])
plot(density(fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 1) & (fast_list$Fn_Estimates$Replicate == 1) ] - fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 1) & (fast_list$Fn_Estimates$Replicate == 2) ]))
FnPCA(fast_list)
fast_list_Bayes <- fast_analysis(Fast_df, MLE = FALSE)
plot(density(fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 2) & (fast_list$Fn_Estimates$Replicate == 1) ] - fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 2) & (fast_list$Fn_Estimates$Replicate == 2) ]))
plot(density(fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 1) & (fast_list$Fn_Estimates$Replicate == 1) ] - fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 1) & (fast_list$Fn_Estimates$Replicate == 2) ]))
plot(density(fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 2) & (fast_list$Fn_Estimates$Replicate == 1) ] - fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 2) & (fast_list$Fn_Estimates$Replicate == 2) ]))
plot(density(fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 1) & (fast_list$Fn_Estimates$Replicate == 1) ] - fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 1) & (fast_list$Fn_Estimates$Replicate == 2) ]))
plot(density(fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 2) & (fast_list$Fn_Estimates$Replicate == 1) ] - fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 2) & (fast_list$Fn_Estimates$Replicate == 2) ]))
plot(density(fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 1) & (fast_list$Fn_Estimates$Replicate == 1) ] - fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 1) & (fast_list$Fn_Estimates$Replicate == 2) ]))
lines(density(fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 2) & (fast_list$Fn_Estimates$Replicate == 1) ] - fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 2) & (fast_list$Fn_Estimates$Replicate == 2) ]))
mean(fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 1) & (fast_list$Fn_Estimates$Replicate == 1) ] - fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 1) & (fast_list$Fn_Estimates$Replicate == 2) ])
mean(fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 1) & (fast_list$Fn_Estimates$Replicate == 1) ] - fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 1) & (fast_list$Fn_Estimates$Replicate == 2) ])
mean(fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 2) & (fast_list$Fn_Estimates$Replicate == 1) ] - fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 2) & (fast_list$Fn_Estimates$Replicate == 2) ])
sd(fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 1) & (fast_list$Fn_Estimates$Replicate == 1) ] - fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 1) & (fast_list$Fn_Estimates$Replicate == 2) ])
sd(fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 2) & (fast_list$Fn_Estimates$Replicate == 1) ] - fast_list$Fn_Estimates$logit_fn[(fast_list$Fn_Estimates$Condition == 2) & (fast_list$Fn_Estimates$Replicate == 2) ])
library(devtools)
library(tidyverse)
library(rstan)
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
library(devtools)
library(dplyr)
setwd("C:/Users/isaac/Documents/Simon_Lab/MyfirstPaper/Data/Real_cBs/")
cB <- readRDS("cB.rds")
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
colnames(cB)
cB <- cB %>% select(XF, sample, TC, nT, n, io, rname)
unique(cB$sample)
metadf <- data.frame(tl = c(2, 2, 2, 2, 0, 0),
Exp_ID = c(1L, 1L, 2L, 2L, 1L, 2L))
rownames(metadf) <- unique(cB$sample)
colnames(cB) <- as.character(1:ncol(cB))
DynData <- DynamicSeqData(cB, metadf)
data_list <- cBprocess(DynData, Fast = TRUE, FOI = c("ZNF106"), concat = TRUE)
fast_list <- fast_analysis(data_list$Fast_df, features_cut = 25, se_max = 3)
plotVolcano(fast_list)
FnPCA(fast_list)
?DESeq
?DESeq2::results
document()
document()
4^20
4^50
library(devtools)
devtools::load_all()
library(devtools)
library(tidyverse)
library(rstan)
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
setwd("C:/Users/isaac/Documents/Simon_Lab/MyfirstPaper/Data/Simulated_dfs/")
sim_df_1 <- readRDS("Controls/effect_size_4.0_rep_var_0.05_1000_genes.rds")
# Extract simulated cB and summarise data
cB_sim_1 <- sim_df_1$sample_data
cB_sim_1 <- cB_sim_1 %>% group_by(S, TP, R, MIR, TC, MT, num_us) %>%
tally()
rm(sim_df_1)
# Define XF column
cB_sim_1$XF <- cB_sim_1$MIR
samp_list <- unique(cB_sim_1$S)
type_list <- rep(0, times=length(samp_list))
mut_list <- rep(0, times = length(samp_list))
rep_list <- rep(0, times = length(samp_list))
tl <- 1
count <- 1
for(i in samp_list){
type_list[count] <- unique(cB_sim_1$TP[cB_sim_1$S == i])
rep_list[count] <- unique(cB_sim_1$R[cB_sim_1$S == i])
mut_list[count] <- unique(cB_sim_1$MT[cB_sim_1$S == i])
count <- count + 1
}
keep_params <- c(0.2, 50)
colnames(cB_sim_1) <- c("sample", "TP", "R", "MIR", "TC", "MT", "nT", "n", "XF")
cB_sim_1$sample <- as.character(cB_sim_1$sample)
metadf <- data.frame(tl = type_list, Exp_ID = as.integer(mut_list))
rownames(metadf) <- unique(cB_sim_1$sample)
DynData <- DynamicSeqData(cB_sim_1, metadf)
Fits <- DynamicSeqFit(DynData, StanFit = FALSE, HybridFit = FALSE, pold = 0.001, features_cut = 15)
DynamicSeqFit(Fits)
getwd()
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
pkgbuild::compile_dll(force = TRUE)
devtools::document()
DynamicSeqFit(Fits)
