one corresponding to numerical IDs of experimental conditions for each sample
(Exp_ID) and one corresponding to s4U label times (tl; 0 if an unlabeled control)",
call. = FALSE
)
}else if(ncol(metadf) > 2){
stop(
"There are more than 2 columns in metadf. Metadf should contain 2 columns,
one corresponding to numerical IDs of experimental conditions for each sample
(Exp_ID) and one corresponding to s4U label times (tl; 0 if an unlabeled control)",
call. = FALSE
)
}
## Check that all data in metadf is numerical
if(sum(!purrr::map_dbl(unclass(metadf), is.numeric)) > 0 ){
stop(
"Not all columns of metadf contain numeric data. Metadf should contain 2 columns,
one corresponding to numerical IDs of experimental conditions for each sample
(Exp_ID) and one corresponding to s4U label times (tl; 0 if an unlabeled control)",
call. = FALSE
)
}
## Check that one column in metadf is integer
if(sum(purrr::map_dbl(unclass(metadf), is.integer)) < 1){
stop(
"No columns in metadf contain strictly integer data. The column containing numerical IDs
for experimental conditions (Exp_ID) should be strictly integer data.",
call. = FALSE
)
}
## Check to make sure n > 0 in cB
if("n" %in% colnames(cB)){
if(sum(cB$n < 1) > 0){
stop(
"n column of cB contains values < 1. This column should tally the number of identical
observations for each combination of gene ID, mutational and T content, and sample ID."
)
}
}else if(sum(cB[,5] < 1) > 0){
stop(
"5th column of cB contains values < 1. This column should tally the number of identical
observations for each combination of gene ID, mutational and T content, and sample ID."
)
}
## Check to make sure TC >= 0 in cB
if("TC" %in% colnames(cB)){
if(sum(cB$TC < 0) > 0){
stop(
"TC column of cB contains values < 0. This column should tally the number of mutations
in each read and thus should be >= 0."
)
}
}else if(sum(cB[,3] < 1) > 0){
stop(
"3rd column of cB contains values < 0. This column should tally the number of mutations
in each read and thus should be >= 0."
)
}
## Check to make sure that nT >= 0 in cB
if("nT" %in% colnames(cB)){
if(sum(cB$nT < 0) > 0){
stop(
"nT column of cB contains values < 0. This column should tally the number of Ts (Us in RNA)
in each read and thus should be >= 0."
)
}
}else if(sum(cB[,4] < 1) > 0){
stop(
"4th column of cB contains values < 0. This column should tally the number of Ts (Us in RNA)
in each read and thus should be >= 0."
)
}
}
validate_DynamicSeqData(new_DynamicSeqData(cB, metadf))
all(unique(cB$sample) %in% rownames(metadf)
)
all(unique(cB$sample) %in% rownames(metadf)[-1])
validate_DynamicSeqData <- function(x){
vals <- unclass(x)
cB <- vals$cB
metadf <- vals$metadf
## Check if rownames of metadf are same as unique(cB$sample)
if("sample" %in% colnames(cB)){
if(all(rownames(metadf) %in% unique(cB$sample)) & all(unique(cB$sample) %in% rownames(metadf) )){
stop(
"Row names of metadf are not same as unique(cB$sample).
Make sure the order in which samples appear in cB
matches the rownames of metadf",
call. = FALSE
)
}
}else{
if(all(rownames(metadf) %in% unique(cB[,2])) & all(unique(cB$sample) %in% rownames(metadf))){
stop(
"Row names of metadf are not same as unique(cB[,2]).
Make sure 2nd column of cB contains sample names and
that these match the rownames of metadf",
call. = FALSE
)
}
}
## Check if Numerical data in cB is all integer
if(sum(purrr::map_dbl(unclass(cB), is.integer)) < 3){
stop(
"There are less than 3 columns of cB containing integer data.
cB should have a column corresponding to numbers of mutations (TC),
numbers of Ts in a read (nT), and number of identical observations (n),
all of which should be integer data.",
call. = FALSE
)
}else if(sum(purrr::map_dbl(unclass(cB), is.integer)) > 3){
stop(
"There are more than 3 columns of cB containing integer data. Remove
unnecessary columns (i.e., those that do not correspond to the number of
mutations (TC), numbers of Ts in a read (nT), and number of identical
observations (n).",
call. = FALSE
)
}
## Check number of columns of CB
if(ncol(cB) < 5){
stop(
"There are less than 5 columns in cB. cB should contain 5 columns,
one corresponding to gene names (XF), one to sample names (sample),
one to number of T to C mutations (TC), one to number of Ts in read (nT),
and one to the number of identical observations (n).",
call. = FALSE
)
}else if(ncol(cB) > 5){
stop(
"There are more than 5 columns in cB. cB should contain 5 columns,
one corresponding to gene names (XF), one to sample names (sample),
one to number of T to C mutations (TC), one to number of Ts in read (nT),
and one to the number of identical observations (n).",
call. = FALSE
)
}
## Check number of columns of cB
if(ncol(metadf) < 2){
stop(
"There are less than 2 columns in metadf. Metadf should contain 2 columns,
one corresponding to numerical IDs of experimental conditions for each sample
(Exp_ID) and one corresponding to s4U label times (tl; 0 if an unlabeled control)",
call. = FALSE
)
}else if(ncol(metadf) > 2){
stop(
"There are more than 2 columns in metadf. Metadf should contain 2 columns,
one corresponding to numerical IDs of experimental conditions for each sample
(Exp_ID) and one corresponding to s4U label times (tl; 0 if an unlabeled control)",
call. = FALSE
)
}
## Check that all data in metadf is numerical
if(sum(!purrr::map_dbl(unclass(metadf), is.numeric)) > 0 ){
stop(
"Not all columns of metadf contain numeric data. Metadf should contain 2 columns,
one corresponding to numerical IDs of experimental conditions for each sample
(Exp_ID) and one corresponding to s4U label times (tl; 0 if an unlabeled control)",
call. = FALSE
)
}
## Check that one column in metadf is integer
if(sum(purrr::map_dbl(unclass(metadf), is.integer)) < 1){
stop(
"No columns in metadf contain strictly integer data. The column containing numerical IDs
for experimental conditions (Exp_ID) should be strictly integer data.",
call. = FALSE
)
}
## Check to make sure n > 0 in cB
if("n" %in% colnames(cB)){
if(sum(cB$n < 1) > 0){
stop(
"n column of cB contains values < 1. This column should tally the number of identical
observations for each combination of gene ID, mutational and T content, and sample ID."
)
}
}else if(sum(cB[,5] < 1) > 0){
stop(
"5th column of cB contains values < 1. This column should tally the number of identical
observations for each combination of gene ID, mutational and T content, and sample ID."
)
}
## Check to make sure TC >= 0 in cB
if("TC" %in% colnames(cB)){
if(sum(cB$TC < 0) > 0){
stop(
"TC column of cB contains values < 0. This column should tally the number of mutations
in each read and thus should be >= 0."
)
}
}else if(sum(cB[,3] < 1) > 0){
stop(
"3rd column of cB contains values < 0. This column should tally the number of mutations
in each read and thus should be >= 0."
)
}
## Check to make sure that nT >= 0 in cB
if("nT" %in% colnames(cB)){
if(sum(cB$nT < 0) > 0){
stop(
"nT column of cB contains values < 0. This column should tally the number of Ts (Us in RNA)
in each read and thus should be >= 0."
)
}
}else if(sum(cB[,4] < 1) > 0){
stop(
"4th column of cB contains values < 0. This column should tally the number of Ts (Us in RNA)
in each read and thus should be >= 0."
)
}
}
validate_DynamicSeqData(new_DynamicSeqData(cB, metadf))
rownames(metadf)
unique(cB$sample)
all(rownames(metadf) %in% unique(cB$sample)) & all(unique(cB$sample) %in% rownames(metadf) )
Data <- new_DynamicSeqData(cB, metadf)
all(rownames(Data$metadf) %in% unique(Data$cB$sample)) & all(unique(Data$cB$sample) %in% rownames(Data$metadf) )
validate_DynamicSeqData <- function(x){
vals <- unclass(x)
cB <- vals$cB
metadf <- vals$metadf
## Check if rownames of metadf are same as unique(cB$sample)
if("sample" %in% colnames(cB)){
if(!(all(rownames(metadf) %in% unique(cB$sample)) & all(unique(cB$sample) %in% rownames(metadf) ))){
stop(
"Row names of metadf are not same as unique(cB$sample).
Make sure the order in which samples appear in cB
matches the rownames of metadf",
call. = FALSE
)
}
}else{
if(!(all(rownames(metadf) %in% unique(cB[,2])) & all(unique(cB$sample) %in% rownames(metadf)))){
stop(
"Row names of metadf are not same as unique(cB[,2]).
Make sure 2nd column of cB contains sample names and
that these match the rownames of metadf",
call. = FALSE
)
}
}
## Check if Numerical data in cB is all integer
if(sum(purrr::map_dbl(unclass(cB), is.integer)) < 3){
stop(
"There are less than 3 columns of cB containing integer data.
cB should have a column corresponding to numbers of mutations (TC),
numbers of Ts in a read (nT), and number of identical observations (n),
all of which should be integer data.",
call. = FALSE
)
}else if(sum(purrr::map_dbl(unclass(cB), is.integer)) > 3){
stop(
"There are more than 3 columns of cB containing integer data. Remove
unnecessary columns (i.e., those that do not correspond to the number of
mutations (TC), numbers of Ts in a read (nT), and number of identical
observations (n).",
call. = FALSE
)
}
## Check number of columns of CB
if(ncol(cB) < 5){
stop(
"There are less than 5 columns in cB. cB should contain 5 columns,
one corresponding to gene names (XF), one to sample names (sample),
one to number of T to C mutations (TC), one to number of Ts in read (nT),
and one to the number of identical observations (n).",
call. = FALSE
)
}else if(ncol(cB) > 5){
stop(
"There are more than 5 columns in cB. cB should contain 5 columns,
one corresponding to gene names (XF), one to sample names (sample),
one to number of T to C mutations (TC), one to number of Ts in read (nT),
and one to the number of identical observations (n).",
call. = FALSE
)
}
## Check number of columns of cB
if(ncol(metadf) < 2){
stop(
"There are less than 2 columns in metadf. Metadf should contain 2 columns,
one corresponding to numerical IDs of experimental conditions for each sample
(Exp_ID) and one corresponding to s4U label times (tl; 0 if an unlabeled control)",
call. = FALSE
)
}else if(ncol(metadf) > 2){
stop(
"There are more than 2 columns in metadf. Metadf should contain 2 columns,
one corresponding to numerical IDs of experimental conditions for each sample
(Exp_ID) and one corresponding to s4U label times (tl; 0 if an unlabeled control)",
call. = FALSE
)
}
## Check that all data in metadf is numerical
if(sum(!purrr::map_dbl(unclass(metadf), is.numeric)) > 0 ){
stop(
"Not all columns of metadf contain numeric data. Metadf should contain 2 columns,
one corresponding to numerical IDs of experimental conditions for each sample
(Exp_ID) and one corresponding to s4U label times (tl; 0 if an unlabeled control)",
call. = FALSE
)
}
## Check that one column in metadf is integer
if(sum(purrr::map_dbl(unclass(metadf), is.integer)) < 1){
stop(
"No columns in metadf contain strictly integer data. The column containing numerical IDs
for experimental conditions (Exp_ID) should be strictly integer data.",
call. = FALSE
)
}
## Check to make sure n > 0 in cB
if("n" %in% colnames(cB)){
if(sum(cB$n < 1) > 0){
stop(
"n column of cB contains values < 1. This column should tally the number of identical
observations for each combination of gene ID, mutational and T content, and sample ID."
)
}
}else if(sum(cB[,5] < 1) > 0){
stop(
"5th column of cB contains values < 1. This column should tally the number of identical
observations for each combination of gene ID, mutational and T content, and sample ID."
)
}
## Check to make sure TC >= 0 in cB
if("TC" %in% colnames(cB)){
if(sum(cB$TC < 0) > 0){
stop(
"TC column of cB contains values < 0. This column should tally the number of mutations
in each read and thus should be >= 0."
)
}
}else if(sum(cB[,3] < 1) > 0){
stop(
"3rd column of cB contains values < 0. This column should tally the number of mutations
in each read and thus should be >= 0."
)
}
## Check to make sure that nT >= 0 in cB
if("nT" %in% colnames(cB)){
if(sum(cB$nT < 0) > 0){
stop(
"nT column of cB contains values < 0. This column should tally the number of Ts (Us in RNA)
in each read and thus should be >= 0."
)
}
}else if(sum(cB[,4] < 1) > 0){
stop(
"4th column of cB contains values < 0. This column should tally the number of Ts (Us in RNA)
in each read and thus should be >= 0."
)
}
}
validate_DynamicSeqData(new_DynamicSeqData(cB, metadf))
validate_DynamicSeqData <- function(x){
vals <- unclass(x)
cB <- vals$cB
metadf <- vals$metadf
## Check if rownames of metadf are same as unique(cB$sample)
if("sample" %in% colnames(cB)){
if(!(all(rownames(metadf) %in% unique(cB$sample)) & all(unique(cB$sample) %in% rownames(metadf) ))){
stop(
"Row names of metadf are not same as unique(cB$sample).
Make sure the order in which samples appear in cB
matches the rownames of metadf",
call. = FALSE
)
}
}else{
if(!(all(rownames(metadf) %in% unique(cB[,2])) & all(unique(cB$sample) %in% rownames(metadf)))){
stop(
"Row names of metadf are not same as unique(cB[,2]).
Make sure 2nd column of cB contains sample names and
that these match the rownames of metadf",
call. = FALSE
)
}
}
## Check if Numerical data in cB is all integer
if(sum(purrr::map_dbl(unclass(cB), is.integer)) < 3){
stop(
"There are less than 3 columns of cB containing integer data.
cB should have a column corresponding to numbers of mutations (TC),
numbers of Ts in a read (nT), and number of identical observations (n),
all of which should be integer data.",
call. = FALSE
)
}else if(sum(purrr::map_dbl(unclass(cB), is.integer)) > 3){
stop(
"There are more than 3 columns of cB containing integer data. Remove
unnecessary columns (i.e., those that do not correspond to the number of
mutations (TC), numbers of Ts in a read (nT), and number of identical
observations (n).",
call. = FALSE
)
}
## Check number of columns of CB
if(ncol(cB) < 5){
stop(
"There are less than 5 columns in cB. cB should contain 5 columns,
one corresponding to gene names (XF), one to sample names (sample),
one to number of T to C mutations (TC), one to number of Ts in read (nT),
and one to the number of identical observations (n).",
call. = FALSE
)
}else if(ncol(cB) > 5){
stop(
"There are more than 5 columns in cB. cB should contain 5 columns,
one corresponding to gene names (XF), one to sample names (sample),
one to number of T to C mutations (TC), one to number of Ts in read (nT),
and one to the number of identical observations (n).",
call. = FALSE
)
}
## Check number of columns of cB
if(ncol(metadf) < 2){
stop(
"There are less than 2 columns in metadf. Metadf should contain 2 columns,
one corresponding to numerical IDs of experimental conditions for each sample
(Exp_ID) and one corresponding to s4U label times (tl; 0 if an unlabeled control)",
call. = FALSE
)
}else if(ncol(metadf) > 2){
stop(
"There are more than 2 columns in metadf. Metadf should contain 2 columns,
one corresponding to numerical IDs of experimental conditions for each sample
(Exp_ID) and one corresponding to s4U label times (tl; 0 if an unlabeled control)",
call. = FALSE
)
}
## Check that all data in metadf is numerical
if(sum(!purrr::map_dbl(unclass(metadf), is.numeric)) > 0 ){
stop(
"Not all columns of metadf contain numeric data. Metadf should contain 2 columns,
one corresponding to numerical IDs of experimental conditions for each sample
(Exp_ID) and one corresponding to s4U label times (tl; 0 if an unlabeled control)",
call. = FALSE
)
}
## Check that one column in metadf is integer
if(sum(purrr::map_dbl(unclass(metadf), is.integer)) < 1){
stop(
"No columns in metadf contain strictly integer data. The column containing numerical IDs
for experimental conditions (Exp_ID) should be strictly integer data.",
call. = FALSE
)
}
## Check to make sure n > 0 in cB
if("n" %in% colnames(cB)){
if(sum(cB$n < 1) > 0){
stop(
"n column of cB contains values < 1. This column should tally the number of identical
observations for each combination of gene ID, mutational and T content, and sample ID."
)
}
}else if(sum(cB[,5] < 1) > 0){
stop(
"5th column of cB contains values < 1. This column should tally the number of identical
observations for each combination of gene ID, mutational and T content, and sample ID."
)
}
## Check to make sure TC >= 0 in cB
if("TC" %in% colnames(cB)){
if(sum(cB$TC < 0) > 0){
stop(
"TC column of cB contains values < 0. This column should tally the number of mutations
in each read and thus should be >= 0."
)
}
}else if(sum(cB[,3] < 1) > 0){
stop(
"3rd column of cB contains values < 0. This column should tally the number of mutations
in each read and thus should be >= 0."
)
}
## Check to make sure that nT >= 0 in cB
if("nT" %in% colnames(cB)){
if(sum(cB$nT < 0) > 0){
stop(
"nT column of cB contains values < 0. This column should tally the number of Ts (Us in RNA)
in each read and thus should be >= 0."
)
}
}else if(sum(cB[,4] < 1) > 0){
stop(
"4th column of cB contains values < 0. This column should tally the number of Ts (Us in RNA)
in each read and thus should be >= 0."
)
}
x
}
validate_DynamicSeqData(new_DynamicSeqData(cB, metadf))
### Helper function
DynamicSeqData <- function(cB, metadf){
cB <- as.data.frame(cB)
metadf <- as.data.frame(metadf)
cB_cols <- c("XF", "sample", "TC", "nT", "n")
meta_cols <- c("tl", "Exp_ID")
if(!(all(colnames(cB) %in% cB_cols) & all(cB_cols %in% colnames(cB)))){
colnames(cB) <- cB_cols
}
if(!(all(colnames(metadf) %in% cB_cols) & all(cB_cols %in% colnames(cB)))){
colnames(metadf) <- meta_cols
}
validate_DynamicSeqData(new_DynamicSeqData(cB, metadf))
}
DynamicSeqData(cB, metadf)
?unlist
?merge
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
