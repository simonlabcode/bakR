print("num_ks_DE has too many elements")
break
} else if (length(num_ks_DE) < num_conds){
print("num_ks_DE has too few elements")
break
}
}
for(j in 1:num_conds){
if(j == 1){
effect_mean[i,1] <- 0
L2FC_ks_mean[i,1] <- 0
}else{
if(i < (ngene-num_kd_DE[j] + 1)){
effect_mean[i,j] <- 0
}else{
effect_mean[i,j] <- rnorm(n=1, mean=eff_mean, sd=eff_sd)
}
if(i < (ngene-num_ks_DE[j] + 1)){
L2FC_ks_mean[i,j] <- 0
}else{
if (runif(1) < 0.5){
L2FC_ks_mean[i,j] <- runif(n=1, min=low_L2FC_ks, max=high_L2FC_ks)
}else{
L2FC_ks_mean[i,j] <- runif(n=1, min=-high_L2FC_ks, max=-low_L2FC_ks)
}
}
}
}
}
L2FC_kd_mean <- log2(log(1 - inv_logit(fn_mean + effect_mean))/log(1- inv_logit(fn_mean)))
#Simulate read counts
if (sim_read_counts == TRUE){
L2FC_tot_mean <- L2FC_ks_mean - L2FC_kd_mean
RNA_conc <- (ks_mean*2^(L2FC_ks_mean))/(kd_mean*2^(L2FC_kd_mean))
a1 <- 5
a0 <- 0.01
for(i in 1:ngene){
for(j in 1:num_conds){
for(k in 1:nreps){
Counts[i, j, k] <- rnbinom(n=1, size=1/((a1/(scale_factor*RNA_conc[i,j])) + a0), mu = scale_factor*RNA_conc[i,j])
#Counts[i, j, k] <- rpois(n=1, lambda = scale_factor*RNA_conc[i,j,k])
if(Counts[i, j, k] < 5){
Counts[i, j, k] <- Counts[i, j, k] + rpois(n=1, lambda = 2) + 1
}
}
}
}
} else{
if(sim_from_data == FALSE){
Counts <- rep(nreads, times= ngene*num_conds*nreps)
dim(Counts) <- c(ngene, num_conds, nreps)
}
}
hist(Counts)
plot(log10(Counts[,1,1]), log10(Counts[,1,2]), xlim=c(1, 4))
standard_RNA <- scale(log10(RNA_conc*scale_factor))
log_RNA <- log10(RNA_conc*scale_factor)
standard_RNA <- matrix(0, nrow = ngene, ncol = num_conds)
mean_RNA <- rep(0, times = num_conds)
sd_RNA <- rep(0, times = num_conds)
#SIMULATE L2FC OF DEG AND SYNTH RATE CONSTANTS; REPLICATE VARIABILITY SIMULATED
set.seed(123)
for(j in 1:num_conds){
mean_RNA[j] <- mean(log10(RNA_conc[,j]*scale_factor))
sd_RNA[j] <- stats::sd(log10(RNA_conc[,j]*scale_factor))
for(i in 1:ngene){
standard_RNA[i,j] <- (log10(RNA_conc[i,j]*scale_factor) - mean_RNA[j])/sd_RNA[j]
for(k in 1:nreps){
fn[i, j, k] <- inv_logit(stats::rnorm(1, mean=(logit(fn_mean[i]) + effect_mean[i,j]), sd = stats::rlnorm(1, noise_deg_a*standard_RNA[i,j] + noise_deg_b, sd_rep )))
ks[i,j,k] <- exp(stats::rnorm(1, mean=log((2^L2FC_ks_mean[i,j])*ks_mean[i]), sd=noise_synth))
}
}
}
fn2 <- fn
ks2 <- ks
test <- rep(0, times = ngene*num_conds*nreps)
dim(test) <- c(ngene, num_conds, nreps)
#SIMULATE L2FC OF DEG AND SYNTH RATE CONSTANTS; REPLICATE VARIABILITY SIMULATED
set.seed(123)
for(j in 1:num_conds){
for(i in 1:ngene){
for(k in 1:nreps){
standard_RNA2 <- (log10(RNA_conc[i,j]*scale_factor) - mean(log10(RNA_conc[,j]*scale_factor)))/stats::sd(log10(RNA_conc[,j]*scale_factor))
fn2[i, j, k] <- inv_logit(stats::rnorm(1, mean=(logit(fn_mean[i]) + effect_mean[i,j]), sd = stats::rlnorm(1, noise_deg_a*standard_RNA2 + noise_deg_b, sd_rep )))
ks2[i,j,k] <- exp(stats::rnorm(1, mean=log((2^L2FC_ks_mean[i,j])*ks_mean[i]), sd=noise_synth))
}
}
}
plot(density(fn))
standard_RNA <- matrix(0, nrow = ngene, ncol = num_conds)
mean_RNA <- rep(0, times = num_conds)
sd_RNA <- rep(0, times = num_conds)
#SIMULATE L2FC OF DEG AND SYNTH RATE CONSTANTS; REPLICATE VARIABILITY SIMULATED
set.seed(123)
for(j in 1:num_conds){
mean_RNA[j] <- mean(log10(RNA_conc[,j]*scale_factor))
sd_RNA[j] <- stats::sd(log10(RNA_conc[,j]*scale_factor))
for(i in 1:ngene){
standard_RNA[i,j] <- (log10(RNA_conc[i,j]*scale_factor) - mean_RNA[j])/sd_RNA[j]
for(k in 1:nreps){
fn[i, j, k] <- inv_logit(stats::rnorm(1, mean=(logit(fn_mean[i]) + effect_mean[i,j]), sd = stats::rlnorm(1, noise_deg_a*standard_RNA[i,j] + noise_deg_b, sd_rep )))
ks[i,j,k] <- exp(stats::rnorm(1, mean=log((2^L2FC_ks_mean[i,j])*ks_mean[i]), sd=noise_synth))
}
}
}
plot(density(fn))
lines(density(fn2), col = "blue")
test
fn - fn2
ks - ks2
kd <- -log(1 - fn)/tl
###Custom fn###
if(Custom == TRUE){
for(i in 1:ngene){
for(j in 1:num_conds){
for(k in 1:nreps){
if( i < 101){
fn[i,j,k] <- 0.1
}else if(i < 201){
fn[i,j,k] <- 0.5
}else{
fn[i,j,k] <- 0.9
}
}
}
}
}
l <- ngene
p_do <- matrix(rep(0, times = num_conds*nreps), nrow = nreps, ncol = num_conds)
fn_real <- fn
for(j in 1:num_conds){
for(k in 1:nreps){
fn_real[,j,k] <- (fn[,j,k]*(1-p_do[k,j]))/(1 - p_do[k,j]*(1 - fn[,j,k]))
Counts[,j,k] <- Counts[,j,k] - Counts[,j,k]*fn[,j,k]*p_do[k,j]
}
}
# This is one very huge function
# It simulates TL-seq data, recording the number of TC mutations in each read, which is informed
# by whatever the fraction new for the particular transcript is
simulateData <- function(nmir = l,   # num of genes
fn_s4U = fn_real,   # fraction of s4U reads made after label introduction in non-heatshocked sample
#fn_s4U2 = fn_hs, # fraction of s4U reads made after label introduction in heatshocked sample
p_new_real_tc = p_new,                   # TC mutation rate in fed cells
p_old_real_tc = p_old,                  # TC mutation rate in unfed cells
read_length = read_lengths,
nreads = Counts, # per transript per sample
nsamp = (nreps*num_conds) + num_conds,
ctl = c(rep(1, times=nreps*num_conds), rep(0, times=num_conds)),   # cntl = 0 is no feed, cntl = 1 is feed
mt = c(rep(1:num_conds, each=nreps),seq(from=1,to=num_conds,by=1)),
replicate = c(rep(seq(from=1, to=nreps), times=num_conds), rep(1, times=num_conds))
#Could just generalize this, which is what next line does, repeating 1 for all but the last sample
#ctl = c(rep(1, times = nsamp-1),0) #assumes nsamp is odd, think it has to be
){
# mir_pnew_logit_tc <- rnorm(nmir, mean = logit(p_new_real_tc), sd = 0.2)  # Calculates an s4U mutation probability within given range
# mir_pnew_tc <- inv_logit(mir_pnew_logit_tc)   # figure out what the probability values actual are (unlogit the logit)
#
#
# mir_pold_logit_tc <- rnorm(nmir, mean = logit(p_old_real_tc), sd = 0.2)  # Calculates a background mutation probability within a given range
# mir_pold_tc <- inv_logit(mir_pold_logit_tc)  #unlogit the logit
# Start generating a vector with data
sample_data <- vector('list', length = nsamp)
for (s in 1:nsamp){
mir_data <- vector('list', length = nmir)
for (mir in 1:nmir){ #mir is feature number index, should change to gene or something
r <- replicate[s] #Replicate number index
MT <- mt[s]       #Experimental sample index
readsize = read_length[mt[s]]
mir_pold_tc <- p_old[mt[s]]
mir_pnew_tc <- p_new[mt[s]]
#Simulate which reads are labeled
newreads_tc <- rbernoulli(nreads[mir, MT, r], p = fn_s4U[mir, MT, r])# vector of reads, T/F is s4U labeled
#Simulate the nubmer of Us in each read
nu <- rbinom(n = nreads[mir,MT,r], size = readsize, prob = 0.25)
#Number of reads that are new
newreads_tc <- sum(newreads_tc)
#Generate number of mutations for new and old reads
if (!ctl[s]){ #If no s4U added, only old
nmut_tc <- rbinom(n = nreads[mir,MT,r], size=nu, prob = mir_pold_tc)
}else {
nmut_tc_new <- rbinom(n=newreads_tc, size=nu[1:newreads_tc], prob=mir_pnew_tc)
nmut_tc_old <- rbinom(n=(nreads[mir, MT, r]-newreads_tc), size = nu[(newreads_tc+1):nreads[mir, MT, r]], prob=mir_pold_tc)
nmut_tc <- c(nmut_tc_new, nmut_tc_old)
}
#Now make it look kind of like a cB file
# use mirMut for each gene, cntl is if cntl or not, x is # of new reads
df <- tibble(S = rep(s, times = nreads[mir, MT, r]),  #starting to generate something that looks like a cB file
TP = rep(ctl[s], times = nreads[mir, MT, r]),
R = rep(r, times=nreads[mir, MT, r]),
MIR = rep(mir, times = nreads[mir, MT, r]), # same as XF or fnum, so just feature number
TC = nmut_tc,
MT = rep(mt[s], times=nreads[mir, MT, r]),
num_us = nu)
#rep_data[[r]] <- df
#rep_data <- bind_rows(rep_data)
mir_data[[mir]] <- df
}
mir_data <- bind_rows(mir_data)
sample_data[[s]] <- mir_data
}
sample_data <- bind_rows(sample_data)
sim_df <- list(nmir = nmir,
fn_s4U = fn_s4U,
p_new_real_tc = p_new_real_tc,
p_old_real_tc = p_old_real_tc,
nreads = nreads, # per miR per sample
nsamp = nsamp,
ctl = ctl,
mir_pnew_tc = mir_pnew_tc,
mir_pold_tc = mir_pold_tc,
sample_data = sample_data
)
return(sim_df)   # return a list of all the things we should know.
}
sim_df_1 <- simulateData()
# Extract simulated cB and summarise data
cB_sim_1 <- data.table::setDT(sim_df_1$sample_data)
devtools::install(build_vignettes = TRUE)
library(changer)
library(available)
suggest(text = "Hierarchical analysis of differential RNA metabolic kinetics")
suggest(text = "Analysis of differential RNA metabolic kinetics")
available("hakR")
available("hypeR")
available("DynaSeq")
available("DynamSeq")
suggest(text = "Analysis of differential RNA metabolic kinetics")
devtools::load_all()
set.seed(123)
sim_list <- sim_DynamicSeqData(200, num_kd_DE = c(0, 200),num_conds = 2, p_new = 0.05,
nreps = 3, eff_sd = 0.7, tl = 60, fn_sd = 1)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, totcut = 10,  StanRateEst = TRUE, RateEst_size = 1)
Fit$Fast_Fit$Effects_df
Fit$Fast_Fit$Regularized_ests
Fit$Fast_Fit$Fn_Estimates
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 1)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE)
Fit$Hybrid_Fit$Effects_df
Fit$Hybrid_Fit$Kdeg_df
Fit$Hybrid_Fit$Fn_Estimates
Fit$Hybrid_Fit$Fit_Summary
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE)
Fit$Hybrid_Fit$Fit_Summary
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
sim_list <- sim_DynamicSeqData(200, num_kd_DE = c(0, 200),num_conds = 2, p_new = 0.05,
nreps = 3, eff_sd = 0.7, tl = 60, fn_sd = 1)
DynData <- sim_list$DynData
DynData
log2(exp(1))
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
devtools::load_all()
?fast_analysis
?DynamicSeqFit
library(devtools)
library(tidyverse)
library(rstan)
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
set.seed(123)
sim_list <- sim_DynamicSeqData(200, num_kd_DE = c(0, 200),num_conds = 2, p_new = 0.05,
nreps = 3, eff_sd = 0.7, tl = 60, fn_sd = 1)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, totcut = 10,  StanRateEst = TRUE, RateEst_size = 10)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE)
Fit$Hybrid_Fit$Mutation_Rates
devtools::load_all()
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE)
Fit$Hybrid_Fit$Mutation_Rates
sim_list <- sim_DynamicSeqData(10, num_kd_DE = c(0, 200),num_conds = 2, p_new = 0.05,
nreps = 3, eff_sd = 0.7, tl = 60, fn_sd = 1)
sim_list <- sim_DynamicSeqData(10, num_kd_DE = c(0, 10),num_conds = 2, p_new = 0.05,
nreps = 3, eff_sd = 0.7, tl = 60, fn_sd = 1)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, totcut = 10,  StanRateEst = TRUE, RateEst_size = 10)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, totcut = 10,  StanRateEst = FALSE, RateEst_size = 10)
Fit <- DynamicSeqFit(Fit, StanFit = TRUE)
Fit$Full_Fit$Mutation_Rates
Fit$Stan_Fit$Mutation_Rates
Fit$Stan_Fit$Fit_Summary[order(Fit$Stan_Fit$Fit_Summary$n_eff),]
library(devtools)
library(tidyverse)
library(rstan)
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
set.seed(123)
sim_list <- sim_DynamicSeqData(10, num_kd_DE = c(0, 10),num_conds = 2, p_new = 0.05,
nreps = 3, eff_sd = 0.7, tl = 60, fn_sd = 1)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, totcut = 10,  StanRateEst = FALSE, RateEst_size = 10)
?fast_analysis
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, totcut = 10,  StanRateEst = FALSE, RateEst_size = 10, pnew = rep(0.05, times = 6), pold = 0.001)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE)
Fit$Hybrid_Fit$Mutation_Rates
Fit <- DynamicSeqFit(Fit, StanFit = TRUE)
Fit$Stan_Fit$Mutation_Rates
Fit$Stan_Fit$Fit_Summary
Fit <- DynamicSeqFit(Fit, StanFit = TRUE, keep_fit = TRUE)
Fit$Stan_Fit$Mutation_Rates
Fit$Hybrid_Fit$Fit_Summary
Fit$Stan_Fit$Fn_Estimates
devtools::install("DynamicSeq", build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
?DynamicSeqFit
sim_truth <- sim_DynamicSeqData(500)$sim_list
sim_truth <- DynamicSeq::sim_DynamicSeqData(500)$sim_list
sim_truth
sim_truth$Fn_rep_sim
devtools::load_all()
sim_list <- sim_DynamicSeqData(500)
DynData <- sim_list$DynData
sim_truth <- sim_list$sim_list
Fit <- DynamicSeqFit(DynData, pnew = rep(0.05, times = 6), pold = 0.001)
est_fn <- Fit$Fast_Fit$Fn_Estimates$logit_fn
Fit$Fast_Fit
Fit$Fast_Fit$Fn_Estimates
plotVolcano(Fit$Fast_Fit)
devtools::load_all()
plotVolcano(Fit$Fast_Fit)
devtools::load_all()
plotVolcano(Fit$Fast_Fit)
plotMA(Fit$Fast_Fit, Fit$Data_lists$Stan_data$Avg_Reads_natural)
devtools::load_all()
plotMA(Fit$Fast_Fit, Fit$Data_lists$Stan_data$Avg_Reads_natural)
plotVolcano(Fit$Fast_Fit)
plotVolcano(Fit$Fast_Fit) +
labs(x = expression(L2FC(k["deg"])))
plotVolcano(Fit$Fast_Fit) + ggplot2::labs(x = expression(L2FC(k["deg"])))
devtools::load_all()
plotVolcano(Fit$Fast_Fit) + ggplot2::labs(x = expression(L2FC(k["deg"])))
devtools::load_all()
plotVolcano(Fit$Fast_Fit) + ggplot2::labs(x = expression(L2FC(k["deg"])))
plotVolcano(Fit$Fast_Fit) + ggplot2::labs(x = expression(L2FC(k["deg"])))
plotVolcano(Fit$Fast_Fit) + ggplot2::labs(x = expression(L2FC(k["deg"])))
devtools::load_all()
plotVolcano(Fit$Fast_Fit)
expression(log["10"])
bquote(log[10](p[adj]))
bquote(L2FC(k[deg]))
devtools::load_all()
plotVolcano(Fit$Fast_Fit)
devtools::load_all()
bquote(log[10](Avg. read count.fields()))
bquote(log[10](Avg. read count))
bquote(log[10](Avg read count))
devtools::load_all()
plotMA(Fit$Fast_Fit, Fit$Data_lists$Stan_data$Avg_Reads_natural)
plotVolcano(Fit$Fast_Fit)
plot(density(rbeta(10000, 15, 45)))
plot(density(rbeta(10000, 25, 75)))
min(rbeta(10000, 25, 75))
devtools::load_all()
devtools::document()
?rbeta
devtools::load_all()
simdata <- sim_DynamicSeqData(100)
simdata <- sim_DynamicSeqData(100, alpha = 0.5)
simdata <- sim_DynamicSeqData(100, alpha = 1)
simdata <- sim_DynamicSeqData(100, alpha = 2)
simdata <- sim_DynamicSeqData(100, alpha = 200)
200/(200 + 75)
simdata <- sim_DynamicSeqData(100, alpha = 400)
library(devtools)
library(tidyverse)
library(rstan)
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
set.seed(123)
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.05,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 5)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 25)
stan_look <- Fit$Data_lists$Stan_data
stan_look
stan_look$U_cont
devtools::load_all()
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 5)
hist(rpois(10000, 1))
hist(rpois(10000, 0.5))
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.05,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.05,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
warnings()
rbinom(100, 0, 0.1)
rbinom(100, -1, 0.1)
devtools::load_all()
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.05,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 5)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 10)
## See what actual fns are
Fn_rep <- sim_list$sim_list$Fn_rep_sim
kd_rep <- -log(1 - Fn_rep$fn)/60
data_list <- Fit$Data_lists$Stan_data
## Look at Feature 524, R == 2, MT == 2
plot(log(kd_rep[Fn_rep$Feature_ID %in% unique(data_list$sdf$XF)]), Fit$Fast_Fit$Fn_Estimates$log_kdeg )
abline(a = 0, b = 1)
## See what actual fns are
Fn_rep <- sim_list$sim_list$Fn_rep_sim
kd_rep <- -log(1 - Fn_rep$fn)/1
data_list <- Fit$Data_lists$Stan_data
## Look at Feature 524, R == 2, MT == 2
plot(log(kd_rep[Fn_rep$Feature_ID %in% unique(data_list$sdf$XF)]), Fit$Fast_Fit$Fn_Estimates$log_kdeg )
abline(a = 0, b = 1)
plotVolcano(Fit$Fast_Fit)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 30)
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 10)
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = FALSE)
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 10)
## See what actual fns are
Fn_rep <- sim_list$sim_list$Fn_rep_sim
kd_rep <- -log(1 - Fn_rep$fn)/1
data_list <- Fit$Data_lists$Stan_data
## Look at Feature 524, R == 2, MT == 2
plot(log(kd_rep[Fn_rep$Feature_ID %in% unique(data_list$sdf$XF)]), Fit$Fast_Fit$Fn_Estimates$log_kdeg )
abline(a = 0, b = 1)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 10)
library(devtools)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
set.seed(123)
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 10)
Fit <- DynamicSeqFit(DynData, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 15)
Fit <- DynamicSeqFit(DynData, FastRerun = TRUE, StanRateEst = FALSE, pnew = rep(0.1, times = 4), pold = 0.001)
?sampling
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
?is.numerical
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
set.seed(123)
sim_list <- sim_DynamicSeqData(100, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 10)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 10)
Fit <- DynamicSeqFit(DynData, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 15)
Fit <- DynamicSeqFit(DynData, FastRerun = TRUE, StanRateEst = FALSE, pnew = rep(0.1, times = 4), pold = 0.001)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
Fit
Fit$Fast_Fit$Effects_df$Feature_ID
sim_list <- sim_DynamicSeqData(100, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 5)
sim_list <- sim_DynamicSeqData(200, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 5)
Fit$Fast_Fit
Fit$Fast_Fit$Effects_df$Feature_ID
Fit$Fast_Fit$Mut_rates
Fit <- DynamicSeqFit(DynData, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 15)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
Fit <- DynamicSeqFit(Fit, StanFit = TRUE, chains = 2, keep_fit = FALSE)
