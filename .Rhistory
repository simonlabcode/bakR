devtools::load_all()
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE)
Fit$Hybrid_Fit$Mutation_Rates
sim_list <- sim_DynamicSeqData(10, num_kd_DE = c(0, 200),num_conds = 2, p_new = 0.05,
nreps = 3, eff_sd = 0.7, tl = 60, fn_sd = 1)
sim_list <- sim_DynamicSeqData(10, num_kd_DE = c(0, 10),num_conds = 2, p_new = 0.05,
nreps = 3, eff_sd = 0.7, tl = 60, fn_sd = 1)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, totcut = 10,  StanRateEst = TRUE, RateEst_size = 10)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, totcut = 10,  StanRateEst = FALSE, RateEst_size = 10)
Fit <- DynamicSeqFit(Fit, StanFit = TRUE)
Fit$Full_Fit$Mutation_Rates
Fit$Stan_Fit$Mutation_Rates
Fit$Stan_Fit$Fit_Summary[order(Fit$Stan_Fit$Fit_Summary$n_eff),]
library(devtools)
library(tidyverse)
library(rstan)
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
set.seed(123)
sim_list <- sim_DynamicSeqData(10, num_kd_DE = c(0, 10),num_conds = 2, p_new = 0.05,
nreps = 3, eff_sd = 0.7, tl = 60, fn_sd = 1)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, totcut = 10,  StanRateEst = FALSE, RateEst_size = 10)
?fast_analysis
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, totcut = 10,  StanRateEst = FALSE, RateEst_size = 10, pnew = rep(0.05, times = 6), pold = 0.001)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE)
Fit$Hybrid_Fit$Mutation_Rates
Fit <- DynamicSeqFit(Fit, StanFit = TRUE)
Fit$Stan_Fit$Mutation_Rates
Fit$Stan_Fit$Fit_Summary
Fit <- DynamicSeqFit(Fit, StanFit = TRUE, keep_fit = TRUE)
Fit$Stan_Fit$Mutation_Rates
Fit$Hybrid_Fit$Fit_Summary
Fit$Stan_Fit$Fn_Estimates
devtools::install("DynamicSeq", build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
?DynamicSeqFit
sim_truth <- sim_DynamicSeqData(500)$sim_list
sim_truth <- DynamicSeq::sim_DynamicSeqData(500)$sim_list
sim_truth
sim_truth$Fn_rep_sim
devtools::load_all()
sim_list <- sim_DynamicSeqData(500)
DynData <- sim_list$DynData
sim_truth <- sim_list$sim_list
Fit <- DynamicSeqFit(DynData, pnew = rep(0.05, times = 6), pold = 0.001)
est_fn <- Fit$Fast_Fit$Fn_Estimates$logit_fn
Fit$Fast_Fit
Fit$Fast_Fit$Fn_Estimates
plotVolcano(Fit$Fast_Fit)
devtools::load_all()
plotVolcano(Fit$Fast_Fit)
devtools::load_all()
plotVolcano(Fit$Fast_Fit)
plotMA(Fit$Fast_Fit, Fit$Data_lists$Stan_data$Avg_Reads_natural)
devtools::load_all()
plotMA(Fit$Fast_Fit, Fit$Data_lists$Stan_data$Avg_Reads_natural)
plotVolcano(Fit$Fast_Fit)
plotVolcano(Fit$Fast_Fit) +
labs(x = expression(L2FC(k["deg"])))
plotVolcano(Fit$Fast_Fit) + ggplot2::labs(x = expression(L2FC(k["deg"])))
devtools::load_all()
plotVolcano(Fit$Fast_Fit) + ggplot2::labs(x = expression(L2FC(k["deg"])))
devtools::load_all()
plotVolcano(Fit$Fast_Fit) + ggplot2::labs(x = expression(L2FC(k["deg"])))
plotVolcano(Fit$Fast_Fit) + ggplot2::labs(x = expression(L2FC(k["deg"])))
plotVolcano(Fit$Fast_Fit) + ggplot2::labs(x = expression(L2FC(k["deg"])))
devtools::load_all()
plotVolcano(Fit$Fast_Fit)
expression(log["10"])
bquote(log[10](p[adj]))
bquote(L2FC(k[deg]))
devtools::load_all()
plotVolcano(Fit$Fast_Fit)
devtools::load_all()
bquote(log[10](Avg. read count.fields()))
bquote(log[10](Avg. read count))
bquote(log[10](Avg read count))
devtools::load_all()
plotMA(Fit$Fast_Fit, Fit$Data_lists$Stan_data$Avg_Reads_natural)
plotVolcano(Fit$Fast_Fit)
plot(density(rbeta(10000, 15, 45)))
plot(density(rbeta(10000, 25, 75)))
min(rbeta(10000, 25, 75))
devtools::load_all()
devtools::document()
?rbeta
devtools::load_all()
simdata <- sim_DynamicSeqData(100)
simdata <- sim_DynamicSeqData(100, alpha = 0.5)
simdata <- sim_DynamicSeqData(100, alpha = 1)
simdata <- sim_DynamicSeqData(100, alpha = 2)
simdata <- sim_DynamicSeqData(100, alpha = 200)
200/(200 + 75)
simdata <- sim_DynamicSeqData(100, alpha = 400)
library(devtools)
library(tidyverse)
library(rstan)
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
set.seed(123)
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.05,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 5)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 25)
stan_look <- Fit$Data_lists$Stan_data
stan_look
stan_look$U_cont
devtools::load_all()
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 5)
hist(rpois(10000, 1))
hist(rpois(10000, 0.5))
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.05,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.05,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
warnings()
rbinom(100, 0, 0.1)
rbinom(100, -1, 0.1)
devtools::load_all()
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.05,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 5)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 10)
## See what actual fns are
Fn_rep <- sim_list$sim_list$Fn_rep_sim
kd_rep <- -log(1 - Fn_rep$fn)/60
data_list <- Fit$Data_lists$Stan_data
## Look at Feature 524, R == 2, MT == 2
plot(log(kd_rep[Fn_rep$Feature_ID %in% unique(data_list$sdf$XF)]), Fit$Fast_Fit$Fn_Estimates$log_kdeg )
abline(a = 0, b = 1)
## See what actual fns are
Fn_rep <- sim_list$sim_list$Fn_rep_sim
kd_rep <- -log(1 - Fn_rep$fn)/1
data_list <- Fit$Data_lists$Stan_data
## Look at Feature 524, R == 2, MT == 2
plot(log(kd_rep[Fn_rep$Feature_ID %in% unique(data_list$sdf$XF)]), Fit$Fast_Fit$Fn_Estimates$log_kdeg )
abline(a = 0, b = 1)
plotVolcano(Fit$Fast_Fit)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 30)
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 10)
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = FALSE)
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = TRUE, RateEst_size = 10)
## See what actual fns are
Fn_rep <- sim_list$sim_list$Fn_rep_sim
kd_rep <- -log(1 - Fn_rep$fn)/1
data_list <- Fit$Data_lists$Stan_data
## Look at Feature 524, R == 2, MT == 2
plot(log(kd_rep[Fn_rep$Feature_ID %in% unique(data_list$sdf$XF)]), Fit$Fast_Fit$Fn_Estimates$log_kdeg )
abline(a = 0, b = 1)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 10)
library(devtools)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
set.seed(123)
sim_list <- sim_DynamicSeqData(1000, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 10)
Fit <- DynamicSeqFit(DynData, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 15)
Fit <- DynamicSeqFit(DynData, FastRerun = TRUE, StanRateEst = FALSE, pnew = rep(0.1, times = 4), pold = 0.001)
?sampling
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
?is.numerical
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
set.seed(123)
sim_list <- sim_DynamicSeqData(100, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 10)
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 10)
Fit <- DynamicSeqFit(DynData, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 15)
Fit <- DynamicSeqFit(DynData, FastRerun = TRUE, StanRateEst = FALSE, pnew = rep(0.1, times = 4), pold = 0.001)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
Fit
Fit$Fast_Fit$Effects_df$Feature_ID
sim_list <- sim_DynamicSeqData(100, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 5)
sim_list <- sim_DynamicSeqData(200, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 5)
Fit$Fast_Fit
Fit$Fast_Fit$Effects_df$Feature_ID
Fit$Fast_Fit$Mut_rates
Fit <- DynamicSeqFit(DynData, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 15)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
Fit <- DynamicSeqFit(Fit, StanFit = TRUE, chains = 2, keep_fit = FALSE)
rcmdcheck::rcmdcheck()
?dnorm
devtools::build_manual()
?devtools::build_manual
getwd()
devtools::build_manual(pkd = "C:/Users/isaac/Documents/Simon_Lab/DynamicSeq")
devtools::build_manual(pkg = "C:/Users/isaac/Documents/Simon_Lab/DynamicSeq")
devtools::build_manual(pkg = "C:/Users/isaac/Documents/Simon_Lab/DynamicSeq")
getwd()
setwd("C:/Users/isaac/Documents/Simon_Lab/")
R CMD Rd2pdf "DynamicSeq"
?Rd2pdf
R CMD Rd2pdf "C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/"
library(rcmdcheck)
R CMD Rd2pdf "C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/"
rcmdcheck::rcmdcheck()
getwd()
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
rcmdcheck::rcmdcheck()
tools::texi2dvi()
tools::texi2dvi
library(help = "tools")
devtools::document
devtools::document()
rcmdcheck::rcmdcheck()
?changer::changer
getwd()
changer::changer(path = "C:/Users/isaac/Documents/Simon_Lab/DynamicSeq", new_name = "bakR")
devtools::document()
devtools::document()
pkgbuild::compile_dll(force=TRUE)
devtools::document()
library(devtools)
library(tidyverse)
library(rstan)
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
set.seed(123)
sim_list <- sim_bakRData(200, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$bakRData
Fit <- bakRFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 5)
Fit <- bakRFit(DynData, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 15)
Fit <- bakRFit(DynData, FastRerun = TRUE, StanRateEst = FALSE, pnew = rep(0.1, times = 4), pold = 0.001)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 2)
Fit <- bakRFit(Fit, StanFit = TRUE, chains = 2, keep_fit = FALSE)
stanmodels$MCMC_Model
getwd()
devtools::document()
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 2)
stanmodels$Hybrid
rstan::sampling(stanmodels$MCMC_Model, data = Fit$Data_lists$Stan_data, chains = chains, ...)
rstan::sampling(stanmodels$MCMC_Model, data = Fit$Data_lists$Stan_data, chains = 1)
rstan::sampling(stanmodels$MCMC_Model, data = Fit$Data_lists$Stan_data, chains = 2)
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 1)
Fit <- bakRFit(Fit, StanFit = TRUE, chains = 1, keep_fit = FALSE)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 2)
library(devtools)
library(rstan)
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
set.seed(123)
sim_list <- sim_bakRData(200, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$bakRData
Fit <- bakRFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 5)
Fit <- bakRFit(DynData, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 15)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 2)
pkgbuild::compile_dll(force = TRUE)
devtools::document
devtools::document()
library(devtools)
library(tidyverse)
library(rstan)
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
set.seed(123)
sim_list <- sim_bakRData(200, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$bakRData
Fit <- bakRFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 5)
Fit <- bakRFit(DynData, FastRerun = TRUE, StanRateEst = TRUE, RateEst_size = 15)
Fit <- bakRFit(DynData, FastRerun = TRUE, StanRateEst = FALSE, pnew = rep(0.1, times = 4), pold = 0.001)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 2)
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 1)
## See what actual fns are
Fn_rep <- sim_list$sim_list$Fn_rep_sim
kd_rep <- -log(1 - Fn_rep$fn)/1
data_list <- Fit$Data_lists$Stan_data
## Look at Feature 524, R == 2, MT == 2
plot(log(kd_rep[Fn_rep$Feature_ID %in% unique(data_list$sdf$XF)]), Fit$Fast_Fit$Fn_Estimates$log_kdeg )
abline(a = 0, b = 1)
plot(log(kd_rep[Fn_rep$Feature_ID %in% unique(data_list$sdf$XF)]), log(Fit$Hybrid_Fit$Kdeg_df$kdeg ))
Fit$Hybrid_Fit$Kdeg_df$kdeg
Fit$Fast_Fit$Fn_Estimates$log_kdeg
logit_fnrep <- pracma::logit(Fn_rep)
logit_fnrep <- Fn_rep$Logit_fn
plot( logit_fnrep[Fn_rep$Feature_ID %in% unique(data_list$sdf$XF)], Fit$Hybrid_Fit$Fn_Estimates$logit_fn)
abline(a = 0, b = 1)
sim_list <- sim_bakRData(400, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$bakRData
Fit <- bakRFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 5)
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 1)
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
library(devtools)
library(tidyverse)
library(rstan)
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
# Or just load installed package
library(bakR)
set.seed(123)
sim_list <- sim_bakRData(400, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$bakRData
Fit <- bakRFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 5)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 2)
devtools::build_manual(pkg = "bakR")
devtools::build_manual()
rcmdcheck::rcmdcheck()
library(devtools)
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
set.seed(123)
sim_list <- sim_bakRData(400, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$bakRData
Fit <- bakRFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 5)
devtools::load_all()
Fit <- bakRFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 5)
devtools::load_all()
Fit <- bakRFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 5)
devtools::load_all()
Fit <- bakRFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 5)
rcmdcheck::rcmdcheck()
devtools::document()
devtools::document()
rcmdcheck::rcmdcheck()
data("cB_example")
cB_small
dim(cB_small)
data("metadf_example")
metadf
{}
devtools::document
devtools::document()
devtools::document()
rcmdcheck::rcmdcheck()
devtools::load_all()
data("cB_small")
cB_small
data("metadf")
metadf
devtools::load_all()
?metadf
devtools::document()
?metadf
rcmdcheck::rcmdcheck()
rcmdcheck::rcmdcheck()
devtools::document()
rcmdcheck::rcmdcheck()
devtools::document()
rcmdcheck::rcmdcheck()
(900*899)/2
(((900*899)/2)^2)*(75^4)
(((300*299)/2)^2)*(75^4)
(((300*299)/2)^2)*(25^4)
(((300*299)/2)^2)*(15^4)
(((150*149)/2)^2)*(15^4)
?plotMA
p.adjust
library(devtools)
library(tidyverse)
library(rstan)
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
setwd("C:/Users/isaac/Documents/Simon_Lab/bakR/")
devtools::load_all()
set.seed(123)
sim_list <- sim_bakRData(400, num_kd_DE = c(0, 100),num_conds = 2, p_new = 0.1,
nreps = 2, eff_sd = 0.7, tl = 1, fn_sd = 1, STL = TRUE)
DynData <- sim_list$bakRData
Fit <- bakRFit(DynData, lower = -7, upper = 7, StanRateEst = FALSE, RateEst_size = 5)
class(Fit)
devtools::load_all()
plotMA(Fit)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
Fit <- bakRFit(Fit, HybridFit = TRUE, chains = 2)
plotMA(Fit, Model = "Hybrid")
plotMA(Fit, Model = "MLE")
?plotMA
devtools::document()
?plotMA
devtools::load_all()
devtools::document()
?plotMA
devtools::document()
?plotMA
devtools::load_all()
plotMA(Fit, Model = "Hybrid")
plotMA(Fit, Model = "MLE")
?optim
sqrt(2/3)
4800*(1-sqrt(2/3))
(4800*(1-sqrt(2/3)))/150
4000/1.25
