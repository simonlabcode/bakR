mir_pnew_tc <- p_new[mt[s]]
#Simulate which reads are labeled
newreads_tc <- rbernoulli(nreads[mir, MT, r], p = fn_s4U[mir, MT, r])# vector of reads, T/F is s4U labeled
#Simulate the nubmer of Us in each read
nu <- rbinom(n = nreads[mir,MT,r], size = readsize, prob = 0.25)
#Number of reads that are new
newreads_tc <- sum(newreads_tc)
#Generate number of mutations for new and old reads
if (!ctl[s]){ #If no s4U added, only old
nmut_tc <- rbinom(n = nreads[mir,MT,r], size=nu, prob = mir_pold_tc)
}else {
nmut_tc_new <- rbinom(n=newreads_tc, size=nu[1:newreads_tc], prob=mir_pnew_tc)
nmut_tc_old <- rbinom(n=(nreads[mir, MT, r]-newreads_tc), size = nu[(newreads_tc+1):nreads[mir, MT, r]], prob=mir_pold_tc)
nmut_tc <- c(nmut_tc_new, nmut_tc_old)
}
#Now make it look kind of like a cB file
# use mirMut for each gene, cntl is if cntl or not, x is # of new reads
df <- tibble(S = rep(s, times = nreads[mir, MT, r]),  #starting to generate something that looks like a cB file
TP = rep(ctl[s], times = nreads[mir, MT, r]),
R = rep(r, times=nreads[mir, MT, r]),
MIR = rep(mir, times = nreads[mir, MT, r]), # same as XF or fnum, so just feature number
TC = nmut_tc,
MT = rep(mt[s], times=nreads[mir, MT, r]),
num_us = nu)
#rep_data[[r]] <- df
#rep_data <- bind_rows(rep_data)
mir_data[[mir]] <- df
}
mir_data <- bind_rows(mir_data)
sample_data[[s]] <- mir_data
}
sample_data <- bind_rows(sample_data)
sim_df <- list(nmir = nmir,
fn_s4U = fn_s4U,
p_new_real_tc = p_new_real_tc,
p_old_real_tc = p_old_real_tc,
nreads = nreads, # per miR per sample
nsamp = nsamp,
ctl = ctl,
mir_pnew_tc = mir_pnew_tc,
mir_pold_tc = mir_pold_tc,
sample_data = sample_data
)
return(sim_df)   # return a list of all the things we should know.
}
for(i in Counts){
test <- rbinom(n = i, size= 200, prob = 0.25)
}
rm(test)
setwd("C:/Users/isaac/Documents/Simon_Lab/MyfirstPaper/Model_Refinement/Simulations/")
sim_df <- simulateData()
## Analyze with fast_analysis
sim_df_1 <- sim_df
# Extract simulated cB and summarise data
cB_sim_1 <- sim_df_1$sample_data
cB_sim_1 <- cB_sim_1 %>% group_by(S, TP, R, MIR, TC, MT, num_us) %>%
tally()
rm(sim_df_1)
# Define XF column
cB_sim_1$XF <- cB_sim_1$MIR
samp_list <- unique(cB_sim_1$S)
type_list <- rep(0, times=length(samp_list))
mut_list <- rep(0, times = length(samp_list))
rep_list <- rep(0, times = length(samp_list))
tl <- 1
count <- 1
for(i in samp_list){
type_list[count] <- unique(cB_sim_1$TP[cB_sim_1$S == i])
rep_list[count] <- unique(cB_sim_1$R[cB_sim_1$S == i])
mut_list[count] <- unique(cB_sim_1$MT[cB_sim_1$S == i])
count <- count + 1
}
keep_params <- c(0.2, 30)
colnames(cB_sim_1) <- c("sample", "TP", "R", "MIR", "TC", "MT", "nT", "n", "XF")
### TEST STAN ###
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
metadf <- data.frame(tl = type_list, Exp_ID = as.integer(mut_list))
rownames(metadf) <- unique(cB_sim_1$sample)
cB_sim_1$sample <- as.character(cB_sim_1$sample)
DynData <- DynamicSeqData(cB_sim_1, metadf)
cB_data <- cBprocess(DynData,
keep_input = keep_params,
Fast = TRUE)
Fit <- DynamicSeqFit(DynData, features_cut = 10)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, Pooled = TRUE, StanFit = FALSE, chains = 1)
Fit$Data_lists$Stan_data$sdf[,c("XF", "fnum")] %>% dplyr::distinct()
devtools::load_all()
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, Pooled = TRUE, StanFit = FALSE, chains = 1)
Fit$Hybrid_Fit$Effects_df
colnames(Fit$Hybrid_Fit$Effects_df)
colnames(Fit$Hybrid_Fit$Kdeg_df)
colnames(Fit$Hybrid_Fit$Fn_Estimates)
names(Fit$Data_lists$Stan_data)
names(Fit$Data_lists)
colnames(Fit$Data_lists$Fast_df)
devtools::document()
?cBprocess
?rnorm
?rnbinom
?log10
?sd
?mean
?vector
?rbernoulli
?rbinom
?tibble
?bind_rows
?tally
devtools::load_all()
sim_DynamicSeqData(100)
devtools::load_all()
sim_DynamicSeqData(100)
!(all(rownames(metadf) %in% unique(cB$sample)) & all(unique(cB$sample) %in% rownames(metadf) )
)
colnames(cB)
fun1 <- function(x){
stop("x can fuck off")
}
fun2 <- function(x){
warning("x is going to be told to fuck off. Are you okay with
this outcome? If not, cry about it")
fun1(x)
}
fun2(1)
fun2 <- function(x){
#warning("x is going to be told to fuck off. Are you okay with
#       this outcome? If not, cry about it")
warning("x")
fun1(x)
}
fun2(1)
fun2 <- function(x){
withCallingHandlers(
warning("x is going to be told to fuck off. Are you okay with
this outcome? If not, cry about it")
)
fun1(x)
}
fun2(1)
fun2 <- function(x){
withCallingHandlers(
warning("x is going to be told to fuck off. Are you okay with this outcome? If not, cry about it")
)
fun1(x)
}
fun2(1)
warnings()
fun2 <- function(x){
warning("x is going to be told to fuck off. Are you okay with this outcome? If not, cry about it")
fun1(x)
}
fun2(1)
warnings()
fun2 <- function(x){
warning("x is going to be told to fuck off. Are you okay with this outcome? If not, cry about it")
warnings()
fun1(x)
}
fun2(1)
warnings()
getwd()
devtools::load_all()
sim_list <- sim_DynamicSeqData(1000)
devtools::load_all()
sim_list <- sim_DynamicSeqData(1000)
lobstr::obj_size(sim_list)
lobstr::obj_size(sim_list$sim_list$sim_df)
lobstr::obj_size(sim_list$DynData)
devtools::load_all()
devtools::load_all()
sim_list <- sim_DynamicSeqData(1000)
lobstr::obj_size(sim_list$DynData)
lobstr::obj_size(sim_list)
names(sim_list$sim_list)
devtools::load_all()
sim_list <- sim_DynamicSeqData(100)
devtools::document()
?sim_DynamicSeqData
hist(log10(sim_list$sim_list$RNA_conc))
?rlnorm
devtools::load_all()
sim_list <- sim_DynamicSeqData(100)
hist(log10(sim_list$sim_list$RNA_conc))
sim_list <- sim_DynamicSeqData(100, num_kd_DE = c(1))
devtools::load_all()
sim_list <- sim_DynamicSeqData(100, num_kd_DE = c(1))
60*8
p_new <- c(1, 1, 1)
!all(p_new > 0)
!all(c(0, 1, 1) > 0)
!(all(c(0.1, 0.1, 0.1) < c(0.001, 0.001, 0.001)))
!(all(c(0.1, 0.1, 0.1) < c(0.001, 0.001, 0.2)))
!(all(c(0.1, 0.1, 0.1) > c(0.001, 0.001, 0.2)))
devtools::load_all()
sim_DynamicSeqData(100)
devtools::load_all()
devtools::load_all()
sim_DynamicSeqData(100)
sim_list <- sim_DynamicSeqData(100)
sim_list <- sim_DynamicSeqData(500)
hist(log10(sim_list$sim_list$RNA_conc))
sim_list <- sim_DynamicSeqData(500, nreps = 1)
sim_list <- sim_DynamicSeqData(500, nreps = -1)
sim_list <- sim_DynamicSeqData(500, num_conds = -1)
sim_list <- sim_DynamicSeqData(500, num_conds = 1)
sim_list <- sim_DynamicSeqData(10, num_conds = 1)
sim_list <- sim_DynamicSeqData(10, eff_sd = 0)
sim_list <- sim_DynamicSeqData(10, tl = TRUE)
sim_list <- sim_DynamicSeqData(10, tl -1)
sim_list <- sim_DynamicSeqData(10, tl= -1)
sim_list <- sim_DynamicSeqData(10, p_new = c(0.1, 0.1), p_old = c(0.01, 0.2))
sim_list <- sim_DynamicSeqData(10, p_new = c(1.2, 0.1), p_old = c(0.01, 0.01))
sim_list <- sim_DynamicSeqData(10, p_new = c(0.1, 0.1), p_old = c(-1, 0.01))
sim_list <- sim_DynamicSeqData(10, p_do = 0)
sim_list <- sim_DynamicSeqData(10, p_do = -1)
sim_list <- sim_DynamicSeqData(10, p_do = 1)
sim_list <- sim_DynamicSeqData(10, noise_deg_a = -0.3)
sim_list <- sim_DynamicSeqData(10, noise_deg_a = 0.3)
sim_list <- sim_DynamicSeqData(10, noise_synth = -0.1)
sim_list <- sim_DynamicSeqData(10, sd_rep = -0.1)
sim_list <- sim_DynamicSeqData(10, sd_rep = 0)
sim_list <- sim_DynamicSeqData(10, low_L2FC_ks = -1, high_L2FC_ks = -2)
sim_list <- sim_DynamicSeqData(10, num_kd_DE = c(1, 1))
sim_list <- sim_DynamicSeqData(10, num_kd_DE = c(0, 10))
sim_list <- sim_DynamicSeqData(10, num_kd_DE = c(0, 11))
sim_list <- sim_DynamicSeqData(10, num_ks_DE = c(0, 11))
sim_list <- sim_DynamicSeqData(10, num_ks_DE = c(1, 1))
sim_list <- sim_DynamicSeqData(10, scale_factor = 10)
sim_list <- sim_DynamicSeqData(10, scale_factor = 5)
sim_list <- sim_DynamicSeqData(10, scale_factor =-1)
sim_list <- sim_DynamicSeqData(10, a1 = -1)
is.numeric(c(1, 0.5, 0.2))
all(is.numeric(c(1, 0.5, 0.2)))
?all
devtools::load_all()
devtools::load_all()
sim_DynamicSeqData(100)
sim_DynamicSeqData(-1)
sim_DynamicSeqData(12.5)
as.integer(12.5)
sim_DynamicSeqData(num_conds = 2)
sim_DynamicSeqData(10, num_conds = 2)
as.integer(TRUE)
as.integer(FALSE)
devtools::load_all()
sim_DynamicSeqData(10, num_conds = 2)
sim_DynamicSeqData(10, ngene = 12.5)
sim_DynamicSeqData(ngene = 12.5)
devtools::load_all()
sim_DynamicSeqData(ngene = 12.5)
sim_DynamicSeqData(10, ngene = 12.5)
sim_DynamicSeqData(10, num_conds = c(2, 3))
sim_DynamicSeqData(10, num_kd_DE = c(0, 1.5, 2.5))
sim_DynamicSeqData(10, num_kd_DE = c(0, 1.5))
devtools::document()
length(NULL)
?fast_analysis
devtools::document()
sim_list <- sim_DynamicSeqData(50)
DynData <- sim_list$DynData
fast_fit <- DynamicSeqFit(DynData, StanFit = FALSE, keep_input = c(0.2, 10))
devtools::load_all()
fast_fit <- DynamicSeqFit(DynData, StanFit = FALSE, keep_input = c(0.2, 10))
devtools::load_all()
fast_fit <- DynamicSeqFit(DynData, StanFit = FALSE, keep_input = c(0.2, 10))
devtools::load_all()
fast_fit <- DynamicSeqFit(DynData, StanFit = FALSE, keep_input = c(0.2, 10))
devtools::load_all()
fast_fit <- DynamicSeqFit(DynData, StanFit = FALSE, keep_input = c(0.2, 10))
typeof("test")
typeof(c("test", "test2"))
devtools::load_all()
fast_fit <- DynamicSeqFit(DynData, StanFit = FALSE, keep_input = c(0.2, 10))
devtools::load_all()
fast_fit <- DynamicSeqFit(DynData, StanFit = FALSE, keep_input = c(0.2, 10))
devtools::load_all()
fast_fit <- DynamicSeqFit(DynData, StanFit = FALSE, keep_input = c(0.2, 10))
is.null(c())
devtools::load_all()
fast_fit <- DynamicSeqFit(DynData, StanFit = FALSE, keep_input = c(0.2, 10))
?TL_stan
devtools::document()
devtools::document()
devtools::load_all()
sim_list <- sim_DynamicSeqData(50)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData)
?fast_analysis
devtools::load_all()
Fit <- DynamicSeqFit(DynData)
devtools::load_all()
Fit <- DynamicSeqFit(DynData)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, Pooled = TRUE)
devtools::load_all()
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, Pooled = TRUE)
devtools::load_all()
devtools::load_all()
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, Pooled = TRUE)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, Pooled = TRUE, chains = 1)
FnPCA(Fit$Fast_Fit)
FnPCA(Fit$Hybrid_Fit)
plotVolcano(Fit$Fast_Fit)
plotVolcano(Fit$Hybrid_Fit)
sim_list <- sim_DynamicSeqData(50, num_conds = 1)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData)
Fit$Fast_Fit$Effects_df
Fit$Fast_Fit$Fn_Estimates
Fit <- DynamicSeqFit(DynData, keep_input = c(1, 0))
sim_list$sim_list$fn_mean
plot(Fit$Fast_Fit$Regularized_ests$avg_logit_fn, sim_list$sim_list$fn_mean)
plot(Fit$Fast_Fit$Regularized_ests$avg_logit_fn, pracma::logit(sim_list$sim_list$fn_mean))
abline(a = 0, b = 1)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, Pooled = TRUE)
Fit$Data_lists$Stan_data$tl
devtools::load_all()
sim_list <- sim_DynamicSeqData(50)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, Pooled = TRUE)
sim_list <- sim_DynamicSeqData(50, num_conds = 1)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, keep_input = c(1, 0))
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, Pooled = TRUE)
Fit$Data_lists$Stan_data$tl
Rep_Fn <- Fit$Fast_Fit$Fn_Estimates
data_list <- list(
NE = nrow(Rep_Fn),
NF = max(Rep_Fn$Feature_ID),
MT = Rep_Fn$Exp_ID,
FE = Rep_Fn$Feature_ID,
tl = obj$Data_lists$Stan_data$tl,
logit_fn_rep = Rep_Fn$logit_fn,
fn_se = Rep_Fn$logit_fn_se,
Avg_Reads = obj$Data_lists$Stan_data$Avg_Reads,
nMT = max(Rep_Fn$Exp_ID),
R = Rep_Fn$Replicate,
nrep = max(Rep_Fn$Replicate),
sample_lookup = obj$Data_lists$Stan_data$sample_lookup,
sdf = obj$Data_lists$Stan_data$sdf
)
obj <- Fit
data_list <- list(
NE = nrow(Rep_Fn),
NF = max(Rep_Fn$Feature_ID),
MT = Rep_Fn$Exp_ID,
FE = Rep_Fn$Feature_ID,
tl = obj$Data_lists$Stan_data$tl,
logit_fn_rep = Rep_Fn$logit_fn,
fn_se = Rep_Fn$logit_fn_se,
Avg_Reads = obj$Data_lists$Stan_data$Avg_Reads,
nMT = max(Rep_Fn$Exp_ID),
R = Rep_Fn$Replicate,
nrep = max(Rep_Fn$Replicate),
sample_lookup = obj$Data_lists$Stan_data$sample_lookup,
sdf = obj$Data_lists$Stan_data$sdf
)
data_list$tl
data_list$nrep
data_list$nMT
Stan_list <- DynamicSeq::TL_stan(data_list, Hybrid_Fit = TRUE, Pooled = TRUE,...)
Stan_list <- DynamicSeq::TL_stan(data_list, Hybrid_Fit = TRUE, Pooled = TRUE)
Stan_list <- DynamicSeq::TL_stan(data_list, Hybrid_Fit = TRUE, Pooled = FALSE)
devtools::load_all()
sim_list <- sim_DynamicSeqData(100)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData)
Fit <- DynamicSeqFit(DynData, keep_input = c(0.2, 200))
Fit <- DynamicSeqFit(DynData, keep_input = c(0.2, 500))
Fit <- DynamicSeqFit(DynData, lower = -9, upper = 9)
fast_fit <- Fit$Fast_Fit
fast_fit$Fn_Estimates
sum(fast_fit$Fn_Estimates$logit_fn == -9)
sum(fast_fit$Fn_Estimates$logit_fn < -9)
sum(fast_fit$Fn_Estimates$logit_fn >= 9)
sim_list$sim_list$fn_mean
hist(pracma::logit(sim_list$sim_list$fn_true)
hist(pracma::logit(sim_list$sim_list$fn_true))
hist(pracma::logit(sim_list$sim_list$fn_true))
max(sim_list$sim_list$fn_true)
sim_list <- sim_DynamicSeqData(100, eff_sd = 0.05)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -9, upper = 9)
sim_list <- sim_DynamicSeqData(100, eff_sd = 0.05, tl = 20)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -9, upper = 9)
fast_fit <- Fit$Fast_Fit
sum(fast_fit$Fn_Estimates$logit_fn >= 9)
sum(fast_fit$Fn_Estimates$logit_fn <= -9)
sum(fast_fit$Fn_Estimates$logit_fn == -9)
fast_fit$Fn_Estimates$logit_fn
hist(fast_fit$Fn_Estimates$logit_fn)
devtools::load_all()
sim_list <- sim_DynamicSeqData(100, eff_sd = 0.05, tl = 60, fn_sd = 0.5)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -9, upper = 9)
sim_list <- sim_DynamicSeqData(100, eff_sd = 0.05, tl = 60, fn_sd = 1.0)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -9, upper = 9)
FnPCA(Fit$Fast_Fit)
plotVolcano(Fit$Fast_Fit)
usethis::use_vignette("Getting-Started")
devtools::load_all()
sim_DynamicSeqData(10)
test <- sim_DynamicSeqData(10)
?head
?t()
pkgbuild::compile_dll(force = TRUE)
devtools::document()
# Plotting theme
theme_mds <-    theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.text = element_text(color="black", size = 12),
axis.title = element_text(color="black", size = 18),
strip.background = element_blank())
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
sim_list <- sim_DynamicSeqData(100, num_conds = 3, nreps = 2, eff_sd = 1, tl = 60, fn_sd = 0.75)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -9, upper = 9)
fnums_kept <- unique(Fit$Data_lists$Stan_data$sdf$XF)
## Compare to simulation
plot(Fit$Fast_Fit$Effects_df$effect, sim_list$sim_list$Effect_sim$effect[sim_list$sim_list$Effect_sim$Feature_ID %in% fnums_kept])
abline(a = 0, b = 1)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, chains = 2)
plot(Fit$Hybrid_Fit$Effects_df$effect, sim_list$sim_list$Effect_sim$effect[sim_list$sim_list$Effect_sim$Feature_ID %in% fnums_kept])
abline(a = 0, b = 1)
plotMA(Fit$Fast_Fit, Fit$Data_lists$Stan_data$Avg_Reads_natural, Exp_shape = TRUE)
plotMA(Fit$Hybrid_Fit, Fit$Data_lists$Stan_data$Avg_Reads_natural, Exp_shape =TRUE)
Fit <- DynamicSeqFit(Fit, HybridFit = TRUE, Pooled = TRUE, chains = 2)
plot(Fit$Hybrid_Fit$Effects_df$effect, sim_list$sim_list$Effect_sim$effect[sim_list$sim_list$Effect_sim$Feature_ID %in% fnums_kept])
abline(a = 0, b = 1)
Fit <- DynamicSeqFit(Fit, StanFit = TRUE, Pooled = TRUE, chains = 2)
Fit <- DynamicSeqFit(Fit, StanFit = TRUE, Pooled = TRUE, chains = 1)
plot(Fit$Stan_Fit$Effects_df$effect, sim_list$sim_list$Effect_sim$effect[sim_list$sim_list$Effect_sim$Feature_ID %in% fnums_kept])
abline(a = 0, b = 1)
plot(Fit$Stan_Fit$Effects_df$effect, Fit$Hybrid_Fit$Effects_df$effect)
abline(a = 0, b = 1)
plot(Fit$Stan_Fit$Effects_df$effect, Fit$Fast_Fit$Effects_df$effect)
abline(a = 0, b = 1)
sim_list <- sim_DynamicSeqData(40, num_conds = 3, nreps = 2, eff_sd = 1, tl = 60, fn_sd = 0.75)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -9, upper = 9)
fnums_kept <- unique(Fit$Data_lists$Stan_data$sdf$XF)
## Compare to simulation
plot(Fit$Fast_Fit$Effects_df$effect, sim_list$sim_list$Effect_sim$effect[sim_list$sim_list$Effect_sim$Feature_ID %in% fnums_kept])
abline(a = 0, b = 1)
Fit <- DynamicSeqFit(Fit, StanFit = TRUE, Pooled = FALSE, chains = 1)
Fit$Stan_Fit$Fit_Summary[order(Fit$Stan_Fit$Fit_Summary$n_eff),]
hist(Fit$Stan_Fit$Fit_Summary$n_eff)
devtools::load_all()
data("cB_example")
data("metadf_example")
DynamicSeqData(cB_small, metadf)
devtools::document()
colnames(cB_small)
devtools::load_all()
devtools::document()
data("cB_example")
colnames(cB_small)
cB <- data("cB_example")
cB
sim_data <- sim_DynamicSeqData(10)
devtools::install()
devtools::load_all()
data("cB_example")
cB_small
getwd()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
?DynamicSeqFit
print(Fit)
names(Fit)
str(Fit)
vignette("DynamicSeq")
?vignette
vignette("Getting-Started", package = "DynamicSeq")
vignette(package = "DynamicSeq")
vignette(package = "DESeq2")
devtools::document()
browseVignettes(package = "DynamicSeq")
devtools::install(build_vignettes = TRUE)
vignette(package = "DynamicSeq")
vignette("Getting-Started", package = "DynamicSeq")
devtools::load_all()
devtools::document()
devtools::load_all()
data <- sim_DynamicSeqData(100)
data$DynData
setwd("C:/Users/isaac/Documents/Simon_Lab/DynamicSeq/")
devtools::load_all()
sim_list <- sim_DynamicSeqData(100, num_conds = 3, p_new = 0.1,
nreps = 3, eff_sd = 0.5, tl = 60, fn_sd = 0.7)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -9, upper = 9)
L2FC_mat <- Heatmap_kdeg(Fit$Fast_Fit)
pheatmap::pheatmap(L2FC_mat)
sim_list <- sim_DynamicSeqData(1000, num_conds = 3, p_new = 0.1,
nreps = 3, eff_sd = 0.5, tl = 60, fn_sd = 0.7)
DynData <- sim_list$DynData
Fit <- DynamicSeqFit(DynData, lower = -9, upper = 9)
L2FC_mat <- Heatmap_kdeg(Fit$Fast_Fit)
pheatmap::pheatmap(L2FC_mat)
L2FC_mat <- Heatmap_kdeg(Fit$Fast_Fit,filter_sig = TRUE)
pheatmap::pheatmap(L2FC_mat)
