% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TL_stan.R
\name{TL_stan}
\alias{TL_stan}
\title{Bayesian hierarchical mixture model with Stan for TL-seq data analysis}
\usage{
TL_stan(data_list, Hybrid_Fit = FALSE, keep_fit = FALSE, chains = 1, ...)
}
\arguments{
\item{data_list}{List to pass to Stan of form given by cBtoStan}

\item{Hybrid_Fit}{Logical; if TRUE, Hybrid Stan model that takes as data output of fast_analysis is run.}

\item{keep_fit}{Logical; if TRUE, Stan fit object is included in output; typically large file so default FALSE.}

\item{chains}{Number of Markov chains to sample from. 1 should suffice since these are validated models}

\item{...}{Arguments passed to \code{rstan::sampling} (e.g. iter, chains).}
}
\value{
A list of objects:
\itemize{
\item Effects_df; dataframe with estimates of the effect size (change in logit(fn)) comparing each experimental condition to the
reference sample for each feature. This dataframe also includes p-values obtained from a moderated t-test. The columns of this
dataframe are:
\itemize{
\item Feature_ID; Numerical ID of feature
\item Exp_ID; Numerical ID for experimental condition (Exp_ID from metadf)
\item L2FC_kdegs; L2FC(kdeg) estimate
\item effects; Change in logit(fraction) new comparing reference and experimental sample(s)
\item ses; Uncertainty in effect size
\item XF; Original feature name
}
\item Kdeg_df; dataframe with estimates of the kdeg (RNA degradation rate constant) for each feature, averaged across replicate data.
The columns of this dataframe are:
\itemize{
\item Feature_ID; Numerical ID of feature
\item Exp_ID; Numerical ID for experimental condition
\item kdeg; Degradation rate constant posterior mean
\item kdeg_sd; Degradation rate constant posterior standard deviation
\item XF; Original feature name
}
\item Fn_Estimates; dataframe with estimates of the logit(fraction new) for each feature in each replicate.
The columns of this dataframe are:
\itemize{
\item Exp_ID; Numerical ID for experimental condition (Exp_ID from metadf)
\item Replicate; Numerical ID for replicate
\item Feature_ID; Numerical ID for feature
\item logit_fn; Logit(fraction new) posterior mean
\item logit_fn_se; Logit(fraction new) posterior standard deviation
\item sample; Sample name
\item XF; Original feature name
}
\item Fit_Summary; only outputted if keep_fit == FALSE. Summary of Stan fit object with each row corresponding to a particular
parameter. All posterior point descriptions are descriptions of the marginal posterior distribution for the parameter in that row.
For example, the posterior mean is the average value for the parameter when averaging over all other parameter values.
The columns of this dataframe are:
\itemize{
\item mean; Posterior mean for the parameter given by the row name
\item se_mean; Standard error of the posterior mean; essentially how confident the model is that what it estimates to be the
posterior mean is what the posterior mean actually is. This will depend on the number of chains run on the number of iterations
each chain is run for.
\item sd; Posterior standard deviation
\item 2.5\%; 2.5th percentile of the posterior distribution. 2.5\% of the posterior mass is below this point
\item 25\%; 25th percentile of the posterior distribution
\item 50\%; 50th percentile of the posterior distribution
\item 75\%; 75th percentile of the posterior distribution
\item 97.5\%; 97.5th percentile of the posterior distribution
\item n_eff; Effective sample size. The larger this is the better, though it should preferably be around the total number of
iterations (iter x chains). Small values of this could represent poor model convergence
\item Rhat; Describes how well separate Markov chains mixed. This is preferably as close to 1 as possible, and values higher
than 1 could represent poor model convergence
}
\item Stan_Fit; only outputted if keep_fit == TRUE. This is the full Stan fit object, an R6 object of class \code{stanfit}
}
}
\description{
\code{TL_stan} analyzes nucleotide recoding sequencing data with a fully
Bayesian hierarchical model implemented in the PPL Stan. The models estimate
fraction news as well as changes in kinetic parameters, comparing a single reference
sample to each experimental sample provided.
}
\details{
Two general models can be implemented in TL_stan: a full nucleotide recoding model and
a hybrid model that takes as input results from \code{fast_analysis}.
In the full model, U-to-C mutations are modeled as coming from a Poisson distribution
with rate parameter adjusted by the empirical U-content of each feature analyzed. Features
represent whatever the user defined them to be when constructing the bakR data object.
Typical feature categories are genes, exons, etc. Hierarchical modeling is used to pool data
across replicates, across features, and across datasets. More specifically, replicate data for the
same feature are partially pooled to estimate feature-specific mean fraction news and uncertainties.
Feature means are partially pooled to estimate dataset-wide mean fraction news and standard devitaitons.
The replicate variability for each feature is also partially pooled to determine an experimental
condition-wide mean-variance relationship between read depths and replicate variability. Partial pooling
reduces subjectivity when determining priors by allowing the model to determine what priors should have
been set. Partial pooling also regularizes estimates, reducing estimate variability and thus increasing
estimate accuracy. This is particularly important for replicate variability estimates, which often rely
on only a few replicates of data per feature and thus are typically highly unstable.

The hybrid model inherits the hierarchical modeling structure of the full model, but reduces computational
burden by foregoing per-replicate-and-feature fraction new estimation and uncertainty quantification. Instead,
the hybrid model takes as data fraction new estimates and approximate uncertainties from \code{fast_analysis}.
Runtimes of the hybrid model are thus often an order or magnitude or more shorter than with the full model, but
loses some accuracy by relying on point estimates and uncertainty quantification that is only valid in the
limit of large dataset sizes (where the dataset size for the per-replicate-and-feature fraction new estimate is the raw number
of sequencing reads mapping to the feature in that replicate).

Users also have the option to save or discard the Stan fit object. Fit objects can be exceedingly large (> 10 GB) for most
nucleotide recoding datasets. Therefore, if you don't want to store such a large object, a summary object will be saved instead,
which greatly reduces the size of the output (~ 1-10 MB) while still retaining much of the important information. In addition,
the output of \code{TL_stan} provides the estimates and uncertainties for key parameters (L2FC(kdeg), kdeg, and fraction new)
that will likely be of most interest. That being said, there are some analyses that are only possible if the original fit object
is saved. For example, the fit object will contain all of the samples from the posterior collected during model fitting. Thus,
new parameters (e.g., L2FC(kdeg)'s comparing two experimental samples) not naturally generated by the model can be estimated
post-hoc. Still, there are often approximate estimates that can be obtained for such parameters that don't rely on the full
fit object. One analysis that is impossible without the original fit object is generating model diagnostic plots. These include
trace plots (to show mixing and efficient parameter space exploration of the Markov chains), pairs plots (to show correlations
between parameters and where any divergences occurred), and other visualizations that can help users assess how well a model
ran. Because the models implemented by \code{TL_stan} are extensively validated, it is less likely that such diagnostics will be helpful,
but often anomalies on your data can lead to poor model convergence, in which case assessing model diagnostics can help you
identify the source of problems in your data. Summary statistics describing how well the model was able to estimate each parameter
(n_eff and rhat) are provided in the fit summaries, but can often obscure some of the nuanced details of model fitting.
}
